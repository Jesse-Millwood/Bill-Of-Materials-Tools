
test.out:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000194  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000081  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000534  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000018c  00000000  00000000  0000081b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000382  00000000  00000000  000009a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000135  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000175  00000000  00000000  00000f01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1e c0       	rjmp	.+60     	; 0x40 <__bad_interrupt>
   4:	1d c0       	rjmp	.+58     	; 0x40 <__bad_interrupt>
   6:	1c c0       	rjmp	.+56     	; 0x40 <__bad_interrupt>
   8:	1b c0       	rjmp	.+54     	; 0x40 <__bad_interrupt>
   a:	1a c0       	rjmp	.+52     	; 0x40 <__bad_interrupt>
   c:	19 c0       	rjmp	.+50     	; 0x40 <__bad_interrupt>
   e:	18 c0       	rjmp	.+48     	; 0x40 <__bad_interrupt>
  10:	17 c0       	rjmp	.+46     	; 0x40 <__bad_interrupt>
  12:	16 c0       	rjmp	.+44     	; 0x40 <__bad_interrupt>
  14:	15 c0       	rjmp	.+42     	; 0x40 <__bad_interrupt>
  16:	14 c0       	rjmp	.+40     	; 0x40 <__bad_interrupt>
  18:	13 c0       	rjmp	.+38     	; 0x40 <__bad_interrupt>
  1a:	12 c0       	rjmp	.+36     	; 0x40 <__bad_interrupt>
  1c:	11 c0       	rjmp	.+34     	; 0x40 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_copy_data>:
  26:	10 e0       	ldi	r17, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	e4 e9       	ldi	r30, 0x94	; 148
  2e:	f1 e0       	ldi	r31, 0x01	; 1
  30:	02 c0       	rjmp	.+4      	; 0x36 <.do_copy_data_start>

00000032 <.do_copy_data_loop>:
  32:	05 90       	lpm	r0, Z+
  34:	0d 92       	st	X+, r0

00000036 <.do_copy_data_start>:
  36:	ae 37       	cpi	r26, 0x7E	; 126
  38:	b1 07       	cpc	r27, r17
  3a:	d9 f7       	brne	.-10     	; 0x32 <.do_copy_data_loop>
  3c:	93 d0       	rcall	.+294    	; 0x164 <main>
  3e:	a8 c0       	rjmp	.+336    	; 0x190 <_exit>

00000040 <__bad_interrupt>:
  40:	df cf       	rjmp	.-66     	; 0x0 <__vectors>

00000042 <lcd_nibble>:
uint8_t lcd_pos = LCD_LINE1;


static void lcd_nibble( uint8_t d )
{
  LCD_D7 = 0; if( d & 1<<7 ) LCD_D7 = 1;
  42:	c5 98       	cbi	0x18, 5	; 24
  44:	87 fd       	sbrc	r24, 7
  46:	c5 9a       	sbi	0x18, 5	; 24
  LCD_D6 = 0; if( d & 1<<6 ) LCD_D6 = 1;
  48:	c3 98       	cbi	0x18, 3	; 24
  4a:	86 fd       	sbrc	r24, 6
  4c:	c3 9a       	sbi	0x18, 3	; 24
  LCD_D5 = 0; if( d & 1<<5 ) LCD_D5 = 1;
  4e:	c4 98       	cbi	0x18, 4	; 24
  50:	85 fd       	sbrc	r24, 5
  52:	c4 9a       	sbi	0x18, 4	; 24
  LCD_D4 = 0; if( d & 1<<4 ) LCD_D4 = 1;
  54:	c0 98       	cbi	0x18, 0	; 24
  56:	84 fd       	sbrc	r24, 4
  58:	c0 9a       	sbi	0x18, 0	; 24
  LCD_E0 = 1;
  5a:	c1 9a       	sbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  5c:	82 e0       	ldi	r24, 0x02	; 2
  5e:	8a 95       	dec	r24
  60:	f1 f7       	brne	.-4      	; 0x5e <lcd_nibble+0x1c>
  _delay_us( LCD_TIME_ENA );
  LCD_E0 = 0;
  62:	c1 98       	cbi	0x18, 1	; 24
}
  64:	08 95       	ret

00000066 <lcd_byte>:


static void lcd_byte( uint8_t d )
{
  66:	1f 93       	push	r17
  68:	18 2f       	mov	r17, r24
  lcd_nibble( d );
  6a:	eb df       	rcall	.-42     	; 0x42 <lcd_nibble>
  lcd_nibble( d<<4 );
  6c:	81 2f       	mov	r24, r17
  6e:	82 95       	swap	r24
  70:	80 7f       	andi	r24, 0xF0	; 240
  72:	e7 df       	rcall	.-50     	; 0x42 <lcd_nibble>
  74:	85 e8       	ldi	r24, 0x85	; 133
  76:	8a 95       	dec	r24
  78:	f1 f7       	brne	.-4      	; 0x76 <lcd_byte+0x10>
  _delay_us( LCD_TIME_DAT );
}
  7a:	1f 91       	pop	r17
  7c:	08 95       	ret

0000007e <lcd_command>:


void lcd_command( uint8_t d )
{
  7e:	1f 93       	push	r17
  80:	18 2f       	mov	r17, r24
  LCD_RS = 0;
  82:	c2 98       	cbi	0x18, 2	; 24
  lcd_byte( d );
  84:	f0 df       	rcall	.-32     	; 0x66 <lcd_byte>
  switch( d ){
  86:	14 30       	cpi	r17, 0x04	; 4
  88:	18 f0       	brcs	.+6      	; 0x90 <lcd_command+0x12>
  8a:	10 38       	cpi	r17, 0x80	; 128
  8c:	40 f0       	brcs	.+16     	; 0x9e <lcd_command+0x20>
  8e:	05 c0       	rjmp	.+10     	; 0x9a <lcd_command+0x1c>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	80 ea       	ldi	r24, 0xA0	; 160
  92:	9f e0       	ldi	r25, 0x0F	; 15
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <lcd_command+0x16>
  98:	10 e8       	ldi	r17, 0x80	; 128
    case 0 ... 3:                       // on longer commands
      _delay_us( LCD_TIME_CLR );
      d = LCD_LINE1;
    case 0x80 ... 0xFF:                 // set position
      lcd_pos = d;
  9a:	10 93 60 00 	sts	0x0060, r17
  }
}
  9e:	1f 91       	pop	r17
  a0:	08 95       	ret

000000a2 <lcd_putchar>:


void lcd_putchar( uint8_t d )
{
  LCD_RS = 1;
  a2:	c2 9a       	sbi	0x18, 2	; 24
  lcd_byte( d );
  a4:	e0 df       	rcall	.-64     	; 0x66 <lcd_byte>
  switch( ++lcd_pos ){
  a6:	80 91 60 00 	lds	r24, 0x0060
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 60 00 	sts	0x0060, r24
  b0:	88 3a       	cpi	r24, 0xA8	; 168
  b2:	71 f0       	breq	.+28     	; 0xd0 <lcd_putchar+0x2e>
  b4:	89 3a       	cpi	r24, 0xA9	; 169
  b6:	18 f4       	brcc	.+6      	; 0xbe <lcd_putchar+0x1c>
  b8:	84 39       	cpi	r24, 0x94	; 148
  ba:	71 f4       	brne	.+28     	; 0xd8 <lcd_putchar+0x36>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <lcd_putchar+0x2a>
  be:	84 3d       	cpi	r24, 0xD4	; 212
  c0:	19 f0       	breq	.+6      	; 0xc8 <lcd_putchar+0x26>
  c2:	88 3e       	cpi	r24, 0xE8	; 232
  c4:	49 f4       	brne	.+18     	; 0xd8 <lcd_putchar+0x36>
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <lcd_putchar+0x32>
  c8:	84 e9       	ldi	r24, 0x94	; 148
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <lcd_putchar+0x34>
  cc:	80 ec       	ldi	r24, 0xC0	; 192
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_putchar+0x34>
  d0:	84 ed       	ldi	r24, 0xD4	; 212
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <lcd_putchar+0x34>
      d = LCD_LINE3;
      break;
    case LCD_LINE3 + LCD_COLUMN:
#ifdef LCD_LINE4
      d = LCD_LINE4;
      break;
  d4:	80 e8       	ldi	r24, 0x80	; 128
      d = LCD_LINE1;
      break;
    default: 
      return;
  }
  lcd_command( d );
  d6:	d3 cf       	rjmp	.-90     	; 0x7e <lcd_command>
  d8:	08 95       	ret

000000da <lcd_puts>:
}


void lcd_puts( void *s )                        // display string from SRAM
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  for( uint8_t *s1 = s; *s1; s1++ )             // until zero byte
  de:	ec 01       	movw	r28, r24
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__stack+0x7>
    lcd_putchar( *s1 );
  e2:	df df       	rcall	.-66     	; 0xa2 <lcd_putchar>
}


void lcd_puts( void *s )                        // display string from SRAM
{
  for( uint8_t *s1 = s; *s1; s1++ )             // until zero byte
  e4:	21 96       	adiw	r28, 0x01	; 1
  e6:	88 81       	ld	r24, Y
  e8:	88 23       	and	r24, r24
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__stack+0x3>
    lcd_putchar( *s1 );
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <lcd_blank>:


void lcd_blank( uint8_t len )                   // blank n digits
{
  f2:	1f 93       	push	r17
  f4:	18 2f       	mov	r17, r24
  f6:	03 c0       	rjmp	.+6      	; 0xfe <lcd_blank+0xc>
  while( len-- )
    lcd_putchar( ' ' );
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	d3 df       	rcall	.-90     	; 0xa2 <lcd_putchar>
  fc:	11 50       	subi	r17, 0x01	; 1
}


void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
  fe:	11 23       	and	r17, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <lcd_blank+0x6>
    lcd_putchar( ' ' );
}
 102:	1f 91       	pop	r17
 104:	08 95       	ret

00000106 <lcd_init>:


void lcd_init( void )
{
 106:	1f 93       	push	r17
  LCD_DDR_D4 = 1;                               // enable output pins
 108:	b8 9a       	sbi	0x17, 0	; 23
  LCD_DDR_D5 = 1;
 10a:	bc 9a       	sbi	0x17, 4	; 23
  LCD_DDR_D6 = 1;
 10c:	bb 9a       	sbi	0x17, 3	; 23
  LCD_DDR_D7 = 1;
 10e:	bd 9a       	sbi	0x17, 5	; 23
  LCD_DDR_RS = 1;
 110:	ba 9a       	sbi	0x17, 2	; 23
  LCD_DDR_E0 = 1;
 112:	b9 9a       	sbi	0x17, 1	; 23
  LCD_E0 = 0;
 114:	c1 98       	cbi	0x18, 1	; 24
  LCD_RS = 0;                                   // send commands
 116:	c2 98       	cbi	0x18, 2	; 24
 118:	80 e3       	ldi	r24, 0x30	; 48
 11a:	95 e7       	ldi	r25, 0x75	; 117
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_init+0x16>

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	8f df       	rcall	.-226    	; 0x42 <lcd_nibble>
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	90 e2       	ldi	r25, 0x20	; 32
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init+0x22>
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
 12c:	80 e3       	ldi	r24, 0x30	; 48
 12e:	89 df       	rcall	.-238    	; 0x42 <lcd_nibble>
 130:	88 ec       	ldi	r24, 0xC8	; 200
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_init+0x2e>
  _delay_us( 100 );
  lcd_nibble( 0x30 );
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	83 df       	rcall	.-250    	; 0x42 <lcd_nibble>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 13c:	15 e8       	ldi	r17, 0x85	; 133
 13e:	81 2f       	mov	r24, r17
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_init+0x3a>
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
 144:	80 e2       	ldi	r24, 0x20	; 32
 146:	7d df       	rcall	.-262    	; 0x42 <lcd_nibble>
 148:	1a 95       	dec	r17
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_init+0x42>
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
 14c:	88 e2       	ldi	r24, 0x28	; 40
 14e:	97 df       	rcall	.-210    	; 0x7e <lcd_command>
#endif
  lcd_command( 0x08 );                          // display off
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	95 df       	rcall	.-214    	; 0x7e <lcd_command>
  lcd_command( 0x01 );                          // display clear
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	93 df       	rcall	.-218    	; 0x7e <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	91 df       	rcall	.-222    	; 0x7e <lcd_command>
  lcd_command( 0x0C );                          // on, no cursor, no blink
 15c:	8c e0       	ldi	r24, 0x0C	; 12
 15e:	8f df       	rcall	.-226    	; 0x7e <lcd_command>
}
 160:	1f 91       	pop	r17
 162:	08 95       	ret

00000164 <main>:
#include "lcd_drv.h"

 
int main( void )
{
  lcd_init();
 164:	d0 df       	rcall	.-96     	; 0x106 <lcd_init>
  lcd_xy( 0, 0 );
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	8a df       	rcall	.-236    	; 0x7e <lcd_command>
  lcd_puts( "Line 1" );
 16a:	81 e6       	ldi	r24, 0x61	; 97
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	b5 df       	rcall	.-150    	; 0xda <lcd_puts>
#ifdef LCD_LINE2
  lcd_xy( 0, 1 );
 170:	80 ec       	ldi	r24, 0xC0	; 192
 172:	85 df       	rcall	.-246    	; 0x7e <lcd_command>
  lcd_puts( "Line 2" );
 174:	88 e6       	ldi	r24, 0x68	; 104
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	b0 df       	rcall	.-160    	; 0xda <lcd_puts>
#ifdef LCD_LINE3
  lcd_xy( 0, 2 );
 17a:	84 e9       	ldi	r24, 0x94	; 148
 17c:	80 df       	rcall	.-256    	; 0x7e <lcd_command>
  lcd_puts( "Line 3" );
 17e:	8f e6       	ldi	r24, 0x6F	; 111
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ab df       	rcall	.-170    	; 0xda <lcd_puts>
#ifdef LCD_LINE4
  lcd_xy( 0, 3 );
 184:	84 ed       	ldi	r24, 0xD4	; 212
 186:	7b df       	rcall	.-266    	; 0x7e <lcd_command>
  lcd_puts( "Line 4" );
 188:	86 e7       	ldi	r24, 0x76	; 118
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	a6 df       	rcall	.-180    	; 0xda <lcd_puts>
 18e:	ff cf       	rjmp	.-2      	; 0x18e <main+0x2a>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
