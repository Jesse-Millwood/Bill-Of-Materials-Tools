
Water Monitor Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000254c  000025e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000254c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  0080012e  0080012e  0000260e  2**0
                  ALLOC
  3 .stab         00002fa0  00000000  00000000  00002610  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b1b  00000000  00000000  000055b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000060cb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000298  00000000  00000000  000060fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000421d  00000000  00000000  00006392  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a5af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000189c  00000000  00000000  0000b49a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006ac  00000000  00000000  0000cd38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009de  00000000  00000000  0000d3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000019b2  00000000  00000000  0000ddc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000228  00000000  00000000  0000f774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 01 	jmp	0x202	; 0x202 <__ctors_end>
       4:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_1>
       8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       c:	0c 94 96 02 	jmp	0x52c	; 0x52c <__vector_3>
      10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      14:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__vector_5>
      18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      20:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      24:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      2c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_11>
      30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      38:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__vector_14>
      3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      48:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      4c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      54:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      58:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      5c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      60:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      64:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>

00000068 <backslash>:
      68:	00 10 08 04 02 01 00 00                             ........

00000070 <Menu>:
      70:	4d 65 6e 75 3a 00                                   Menu:.

00000076 <ThresholdSel>:
      76:	54 68 72 65 73 68 6f 6c 64 20 53 65 6c 65 63 74     Threshold Select
	...

00000087 <MsrmntHeader>:
      87:	43 79 6c 73 20 2f 20 47 61 6c 73 00                 Cyls / Gals.

00000093 <Tank2Title>:
      93:	4b 79 7a 65 6e 3a 00                                Kyzen:.

0000009a <Tank1Title>:
      9a:	20 20 20 44 49 3a 00                                   DI:.

000000a1 <Welcome>:
      a1:	57 61 74 65 72 20 55 73 61 67 65 20 4d 6f 6e 69     Water Usage Moni
      b1:	74 6f 72 00                                         tor.

000000b5 <LCDprogress>:
      b5:	4c 6f 61 64 69 6e 67 2e 2e 2e 00                    Loading....

000000c0 <LcdCustomChar>:
      c0:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      d0:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      e0:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      f0:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000100 <__c.2006>:
     100:	6e 61 6e 00                                         nan.

00000104 <__c.2004>:
     104:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     114:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     124:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     134:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     144:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     154:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     164:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     174:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     184:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     194:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1a4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1b4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1c4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1d4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1e4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1f4:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000202 <__ctors_end>:
     202:	11 24       	eor	r1, r1
     204:	1f be       	out	0x3f, r1	; 63
     206:	cf ef       	ldi	r28, 0xFF	; 255
     208:	d4 e0       	ldi	r29, 0x04	; 4
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	cd bf       	out	0x3d, r28	; 61

0000020e <__do_copy_data>:
     20e:	11 e0       	ldi	r17, 0x01	; 1
     210:	a0 e0       	ldi	r26, 0x00	; 0
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	ec e4       	ldi	r30, 0x4C	; 76
     216:	f5 e2       	ldi	r31, 0x25	; 37
     218:	02 c0       	rjmp	.+4      	; 0x21e <__do_copy_data+0x10>
     21a:	05 90       	lpm	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	ae 32       	cpi	r26, 0x2E	; 46
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <__do_copy_data+0xc>

00000224 <__do_clear_bss>:
     224:	21 e0       	ldi	r18, 0x01	; 1
     226:	ae e2       	ldi	r26, 0x2E	; 46
     228:	b1 e0       	ldi	r27, 0x01	; 1
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	a3 36       	cpi	r26, 0x63	; 99
     230:	b2 07       	cpc	r27, r18
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>
     234:	0e 94 bd 0a 	call	0x157a	; 0x157a <main>
     238:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <_exit>

0000023c <__bad_interrupt>:
     23c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000240 <Encoder_init>:
#include "includes.h"

void Encoder_init(void)
{
	// Initialize Encoder Flags
	ENC.turnLeft = 0;
     240:	80 91 3a 01 	lds	r24, 0x013A
	ENC.turnRight = 0;
     244:	8d 7f       	andi	r24, 0xFD	; 253
     246:	8e 7f       	andi	r24, 0xFE	; 254
     248:	80 93 3a 01 	sts	0x013A, r24
	// Enable Pull ups on Encoder channels and switch
	PORTD |= (1<<ENC_CH_A) | (1<<ENC_CH_B) | (1<<ENC_SW); 
     24c:	8b b1       	in	r24, 0x0b	; 11
     24e:	87 60       	ori	r24, 0x07	; 7
     250:	8b b9       	out	0x0b, r24	; 11
	
	// External Interrupt 0 Activated
	EIMSK |= (1<<INT0);
     252:	e8 9a       	sbi	0x1d, 0	; 29
	// Interrupt Activated on falling edge of INT0 PIN
	EICRA |= (1<<ISC01);
     254:	e9 e6       	ldi	r30, 0x69	; 105
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	82 60       	ori	r24, 0x02	; 2
     25c:	80 83       	st	Z, r24
     25e:	08 95       	ret

00000260 <__vector_1>:
 * PD3 (PCINT19)		: BUTTON
 */


ISR(INT0_vect)
{
     260:	1f 92       	push	r1
     262:	0f 92       	push	r0
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	0f 92       	push	r0
     268:	11 24       	eor	r1, r1
     26a:	2f 93       	push	r18
     26c:	3f 93       	push	r19
     26e:	4f 93       	push	r20
     270:	5f 93       	push	r21
     272:	6f 93       	push	r22
     274:	7f 93       	push	r23
     276:	8f 93       	push	r24
     278:	9f 93       	push	r25
     27a:	af 93       	push	r26
     27c:	bf 93       	push	r27
     27e:	ef 93       	push	r30
     280:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     282:	af e9       	ldi	r26, 0x9F	; 159
     284:	bf e0       	ldi	r27, 0x0F	; 15
     286:	11 97       	sbiw	r26, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <__vector_1+0x26>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <__vector_1+0x2c>
     28c:	00 00       	nop
		The encoder has pull up resistors on channel A and B. Channel C 
		is grounded and there is 0.1uF caps from Channel A and B pins to
		ground
	*/
	_delay_ms(1);
	if (ENC_RD==0b00)
     28e:	49 b1       	in	r20, 0x09	; 9
     290:	59 b1       	in	r21, 0x09	; 9
     292:	51 fb       	bst	r21, 1
     294:	22 27       	eor	r18, r18
     296:	20 f9       	bld	r18, 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	44 70       	andi	r20, 0x04	; 4
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	55 95       	asr	r21
     2a0:	47 95       	ror	r20
     2a2:	24 2b       	or	r18, r20
     2a4:	35 2b       	or	r19, r21
     2a6:	23 2b       	or	r18, r19
     2a8:	d1 f4       	brne	.+52     	; 0x2de <__vector_1+0x7e>
     2aa:	af e9       	ldi	r26, 0x9F	; 159
     2ac:	bf e0       	ldi	r27, 0x0F	; 15
     2ae:	11 97       	sbiw	r26, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <__vector_1+0x4e>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <__vector_1+0x54>
     2b4:	00 00       	nop
	{
		// Encoder is turning clockwise
		// Channel A has transitioned from high to low
		// and the level of channel B is low
		_delay_ms(1);
		if (ENC_RD == 0b00)
     2b6:	29 b1       	in	r18, 0x09	; 9
     2b8:	39 b1       	in	r19, 0x09	; 9
     2ba:	31 fb       	bst	r19, 1
     2bc:	66 27       	eor	r22, r22
     2be:	60 f9       	bld	r22, 0
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	24 70       	andi	r18, 0x04	; 4
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	35 95       	asr	r19
     2c8:	27 95       	ror	r18
     2ca:	62 2b       	or	r22, r18
     2cc:	73 2b       	or	r23, r19
     2ce:	67 2b       	or	r22, r23
     2d0:	31 f4       	brne	.+12     	; 0x2de <__vector_1+0x7e>
		{
			ENC.turnRight = 1;
     2d2:	20 91 3a 01 	lds	r18, 0x013A
			ENC.turnLeft = 0;
     2d6:	21 60       	ori	r18, 0x01	; 1
     2d8:	2d 7f       	andi	r18, 0xFD	; 253
     2da:	20 93 3a 01 	sts	0x013A, r18
		}
	}
	if(ENC_RD == 0b01)
     2de:	29 b1       	in	r18, 0x09	; 9
     2e0:	39 b1       	in	r19, 0x09	; 9
     2e2:	31 fb       	bst	r19, 1
     2e4:	88 27       	eor	r24, r24
     2e6:	80 f9       	bld	r24, 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	24 70       	andi	r18, 0x04	; 4
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	35 95       	asr	r19
     2f0:	27 95       	ror	r18
     2f2:	82 2b       	or	r24, r18
     2f4:	93 2b       	or	r25, r19
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	d1 f4       	brne	.+52     	; 0x32e <__vector_1+0xce>
     2fa:	8f e9       	ldi	r24, 0x9F	; 159
     2fc:	9f e0       	ldi	r25, 0x0F	; 15
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <__vector_1+0x9e>
     302:	00 c0       	rjmp	.+0      	; 0x304 <__vector_1+0xa4>
     304:	00 00       	nop
	{
		// Encoder is turning counter clockwise
		// Channel A has transitioned from high to low
		// and the level of channel B is high
		_delay_ms(1);
		if(ENC_RD == 0b01)
     306:	89 b1       	in	r24, 0x09	; 9
     308:	99 b1       	in	r25, 0x09	; 9
     30a:	91 fb       	bst	r25, 1
     30c:	ee 27       	eor	r30, r30
     30e:	e0 f9       	bld	r30, 0
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	84 70       	andi	r24, 0x04	; 4
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	95 95       	asr	r25
     318:	87 95       	ror	r24
     31a:	e8 2b       	or	r30, r24
     31c:	f9 2b       	or	r31, r25
     31e:	31 97       	sbiw	r30, 0x01	; 1
     320:	31 f4       	brne	.+12     	; 0x32e <__vector_1+0xce>
		{
			ENC.turnRight = 0;
     322:	80 91 3a 01 	lds	r24, 0x013A
			ENC.turnLeft = 1;
     326:	8e 7f       	andi	r24, 0xFE	; 254
     328:	82 60       	ori	r24, 0x02	; 2
     32a:	80 93 3a 01 	sts	0x013A, r24
		}
	}
     32e:	ff 91       	pop	r31
     330:	ef 91       	pop	r30
     332:	bf 91       	pop	r27
     334:	af 91       	pop	r26
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	7f 91       	pop	r23
     33c:	6f 91       	pop	r22
     33e:	5f 91       	pop	r21
     340:	4f 91       	pop	r20
     342:	3f 91       	pop	r19
     344:	2f 91       	pop	r18
     346:	0f 90       	pop	r0
     348:	0f be       	out	0x3f, r0	; 63
     34a:	0f 90       	pop	r0
     34c:	1f 90       	pop	r1
     34e:	18 95       	reti

00000350 <FLOW_init>:
#include "includes.h"

void FLOW_init(void)
{
	// Initialize Flowmeter Globals
	FLOW_indicator.threshold_met = 0;
     350:	80 91 47 01 	lds	r24, 0x0147
	FLOW_indicator.state = INACTIVE;
	FLOW_indicator.active_toggle1s = 0;
	FLOW_indicator.incrementcyclesflag = 0;
     354:	88 7f       	andi	r24, 0xF8	; 248
     356:	87 7f       	andi	r24, 0xF7	; 247
     358:	80 93 47 01 	sts	0x0147, r24
	
	FLOW_gallonThreshold = 2;
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	a0 e0       	ldi	r26, 0x00	; 0
     362:	b0 e4       	ldi	r27, 0x40	; 64
     364:	80 93 5d 01 	sts	0x015D, r24
     368:	90 93 5e 01 	sts	0x015E, r25
     36c:	a0 93 5f 01 	sts	0x015F, r26
     370:	b0 93 60 01 	sts	0x0160, r27
	FLOW_DIgalThreshold = 2;
     374:	80 93 43 01 	sts	0x0143, r24
     378:	90 93 44 01 	sts	0x0144, r25
     37c:	a0 93 45 01 	sts	0x0145, r26
     380:	b0 93 46 01 	sts	0x0146, r27
	FLOW_KYgalThreshold = 2;
     384:	80 93 34 01 	sts	0x0134, r24
     388:	90 93 35 01 	sts	0x0135, r25
     38c:	a0 93 36 01 	sts	0x0136, r26
     390:	b0 93 37 01 	sts	0x0137, r27
	// Activate Pull-up for Flow Sensor
	PORTB	|= (1<<FLOW_SENSOR_PIN);
     394:	28 9a       	sbi	0x05, 0	; 5
	
	// Enable pin change interrupt and configure
	PCICR	|= (1<<PCIE0);
     396:	e8 e6       	ldi	r30, 0x68	; 104
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	80 83       	st	Z, r24
	PCMSK0	|= (1<<PCINT0); 
     3a0:	eb e6       	ldi	r30, 0x6B	; 107
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	81 60       	ori	r24, 0x01	; 1
     3a8:	80 83       	st	Z, r24
	
	// Initialize a timer to keep track of the time between falling edges
	// Timer 1, 16-bit, CTC mode(OCR1A)
	// Divided by 256
	// increments every 16us, overflows every 1.049s
	TCCR1B |= (1<<WGM12) | (1<<CS12);
     3aa:	e1 e8       	ldi	r30, 0x81	; 129
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	80 81       	ld	r24, Z
     3b0:	8c 60       	ori	r24, 0x0C	; 12
     3b2:	80 83       	st	Z, r24
	// Interrupt 
	TIMSK1 |= (1<<OCIE1A);
     3b4:	ef e6       	ldi	r30, 0x6F	; 111
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	82 60       	ori	r24, 0x02	; 2
     3bc:	80 83       	st	Z, r24
	
	// set OCR1A to be hit once every second
	OCR1A = 62500;
     3be:	84 e2       	ldi	r24, 0x24	; 36
     3c0:	94 ef       	ldi	r25, 0xF4	; 244
     3c2:	90 93 89 00 	sts	0x0089, r25
     3c6:	80 93 88 00 	sts	0x0088, r24
	
	// Initialize FLOW meter variables
	FLOW_gals = 0;
     3ca:	10 92 49 01 	sts	0x0149, r1
     3ce:	10 92 4a 01 	sts	0x014A, r1
     3d2:	10 92 4b 01 	sts	0x014B, r1
     3d6:	10 92 4c 01 	sts	0x014C, r1
	FLOW_DIgals = 0;
     3da:	10 92 3d 01 	sts	0x013D, r1
     3de:	10 92 3e 01 	sts	0x013E, r1
     3e2:	10 92 3f 01 	sts	0x013F, r1
     3e6:	10 92 40 01 	sts	0x0140, r1
	
	FLOW_DIcycles = 0;
     3ea:	10 92 3c 01 	sts	0x013C, r1
     3ee:	10 92 3b 01 	sts	0x013B, r1
	FLOW_KYgals = 0;
     3f2:	10 92 57 01 	sts	0x0157, r1
     3f6:	10 92 58 01 	sts	0x0158, r1
     3fa:	10 92 59 01 	sts	0x0159, r1
     3fe:	10 92 5a 01 	sts	0x015A, r1
	FLOW_KYcycles = 0;
     402:	10 92 42 01 	sts	0x0142, r1
     406:	10 92 41 01 	sts	0x0141, r1
	FLOW_freq = 0;
     40a:	10 92 52 01 	sts	0x0152, r1
     40e:	10 92 51 01 	sts	0x0151, r1
	FLOW_pcount = 0;
     412:	10 92 5c 01 	sts	0x015C, r1
     416:	10 92 5b 01 	sts	0x015B, r1
	FLOW_idlecount = 15;
     41a:	8f e0       	ldi	r24, 0x0F	; 15
     41c:	80 93 4d 01 	sts	0x014D, r24
	FLOW_idlecount_mins = 0;
     420:	10 92 62 01 	sts	0x0162, r1
     424:	10 92 61 01 	sts	0x0161, r1
     428:	08 95       	ret

0000042a <check_FLOW>:
}

void check_FLOW(void)
{
	// Check the if the threshold has been met
	if((FLOW_DIgals >= FLOW_DIgalThreshold) || (FLOW_KYgals >= FLOW_KYgalThreshold))
     42a:	20 91 43 01 	lds	r18, 0x0143
     42e:	30 91 44 01 	lds	r19, 0x0144
     432:	40 91 45 01 	lds	r20, 0x0145
     436:	50 91 46 01 	lds	r21, 0x0146
     43a:	60 91 3d 01 	lds	r22, 0x013D
     43e:	70 91 3e 01 	lds	r23, 0x013E
     442:	80 91 3f 01 	lds	r24, 0x013F
     446:	90 91 40 01 	lds	r25, 0x0140
     44a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__gesf2>
     44e:	88 23       	and	r24, r24
     450:	a4 f4       	brge	.+40     	; 0x47a <check_FLOW+0x50>
     452:	20 91 34 01 	lds	r18, 0x0134
     456:	30 91 35 01 	lds	r19, 0x0135
     45a:	40 91 36 01 	lds	r20, 0x0136
     45e:	50 91 37 01 	lds	r21, 0x0137
     462:	60 91 57 01 	lds	r22, 0x0157
     466:	70 91 58 01 	lds	r23, 0x0158
     46a:	80 91 59 01 	lds	r24, 0x0159
     46e:	90 91 5a 01 	lds	r25, 0x015A
     472:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__gesf2>
     476:	88 23       	and	r24, r24
     478:	34 f0       	brlt	.+12     	; 0x486 <check_FLOW+0x5c>
	{
		FLOW_indicator.threshold_met = 1;
     47a:	80 91 47 01 	lds	r24, 0x0147
     47e:	81 60       	ori	r24, 0x01	; 1
     480:	80 93 47 01 	sts	0x0147, r24
     484:	05 c0       	rjmp	.+10     	; 0x490 <check_FLOW+0x66>
	}
	else
	{
		FLOW_indicator.threshold_met = 0;
     486:	80 91 47 01 	lds	r24, 0x0147
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	80 93 47 01 	sts	0x0147, r24
	}
	
	if ((FLOW_idlecount <= 10) && (FLOW_freq>=10))
     490:	80 91 4d 01 	lds	r24, 0x014D
     494:	8b 30       	cpi	r24, 0x0B	; 11
     496:	80 f4       	brcc	.+32     	; 0x4b8 <check_FLOW+0x8e>
     498:	80 91 51 01 	lds	r24, 0x0151
     49c:	90 91 52 01 	lds	r25, 0x0152
     4a0:	0a 97       	sbiw	r24, 0x0a	; 10
     4a2:	50 f0       	brcs	.+20     	; 0x4b8 <check_FLOW+0x8e>
	{
		// Flow meter has been idle for less than 10 seconds
		FLOW_idlecount_mins = 0;
     4a4:	10 92 62 01 	sts	0x0162, r1
     4a8:	10 92 61 01 	sts	0x0161, r1
		FLOW_indicator.incrementcyclesflag = 1;
     4ac:	80 91 47 01 	lds	r24, 0x0147
     4b0:	88 60       	ori	r24, 0x08	; 8
     4b2:	80 93 47 01 	sts	0x0147, r24
     4b6:	10 c0       	rjmp	.+32     	; 0x4d8 <check_FLOW+0xae>
	}
	else
	{
		// Flow meter has been idle for more than 2 seconds
		if (FLOW_idlecount >= 75)
     4b8:	80 91 4d 01 	lds	r24, 0x014D
     4bc:	8b 34       	cpi	r24, 0x4B	; 75
     4be:	60 f0       	brcs	.+24     	; 0x4d8 <check_FLOW+0xae>
		{
			// Prevent idle count from overflowing and incrementing cycle count
			FLOW_idlecount = 15;
     4c0:	8f e0       	ldi	r24, 0x0F	; 15
     4c2:	80 93 4d 01 	sts	0x014D, r24
			FLOW_idlecount_mins ++;
     4c6:	80 91 61 01 	lds	r24, 0x0161
     4ca:	90 91 62 01 	lds	r25, 0x0162
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	90 93 62 01 	sts	0x0162, r25
     4d4:	80 93 61 01 	sts	0x0161, r24
			
		}
	}
	if((FLOW_idlecount_mins >= INCREMENT_TIMEOUT) && FLOW_indicator.incrementcyclesflag)
     4d8:	80 91 61 01 	lds	r24, 0x0161
     4dc:	90 91 62 01 	lds	r25, 0x0162
     4e0:	02 97       	sbiw	r24, 0x02	; 2
     4e2:	18 f1       	brcs	.+70     	; 0x52a <__stack+0x2b>
     4e4:	80 91 47 01 	lds	r24, 0x0147
     4e8:	83 ff       	sbrs	r24, 3
     4ea:	1f c0       	rjmp	.+62     	; 0x52a <__stack+0x2b>
	{
		// Increment cycles after timeout and don't increment at timeout again
		// unless flowmeter is active again
		FLOW_indicator.incrementcyclesflag = 0;
     4ec:	87 7f       	andi	r24, 0xF7	; 247
     4ee:	80 93 47 01 	sts	0x0147, r24
		FLOW_idlecount_mins = 0;
     4f2:	10 92 62 01 	sts	0x0162, r1
     4f6:	10 92 61 01 	sts	0x0161, r1
		FLOW_DIcycles ++;
     4fa:	80 91 3b 01 	lds	r24, 0x013B
     4fe:	90 91 3c 01 	lds	r25, 0x013C
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	90 93 3c 01 	sts	0x013C, r25
     508:	80 93 3b 01 	sts	0x013B, r24
		FLOW_KYcycles ++;
     50c:	80 91 41 01 	lds	r24, 0x0141
     510:	90 91 42 01 	lds	r25, 0x0142
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	90 93 42 01 	sts	0x0142, r25
     51a:	80 93 41 01 	sts	0x0141, r24
		// Save cycles and gallons variables at cycle increment
		eePROMsave(CYCLES);
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 b6 04 	call	0x96c	; 0x96c <eePROMsave>
		eePROMsave(GALS);
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	0e 94 b6 04 	call	0x96c	; 0x96c <eePROMsave>
     52a:	08 95       	ret

0000052c <__vector_3>:
	}
	
}

ISR(PCINT0_vect)
{ 
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	0f 92       	push	r0
     534:	11 24       	eor	r1, r1
     536:	8f 93       	push	r24
     538:	9f 93       	push	r25
	if(FLOWSIG_RD)
     53a:	18 9b       	sbis	0x03, 0	; 3
     53c:	09 c0       	rjmp	.+18     	; 0x550 <__vector_3+0x24>
	{
		// If the interrupt is triggered and the Flow meter signal is 
		// high then one period has occurred
		FLOW_pcount++;
     53e:	80 91 5b 01 	lds	r24, 0x015B
     542:	90 91 5c 01 	lds	r25, 0x015C
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	90 93 5c 01 	sts	0x015C, r25
     54c:	80 93 5b 01 	sts	0x015B, r24
	}
}
     550:	9f 91       	pop	r25
     552:	8f 91       	pop	r24
     554:	0f 90       	pop	r0
     556:	0f be       	out	0x3f, r0	; 63
     558:	0f 90       	pop	r0
     55a:	1f 90       	pop	r1
     55c:	18 95       	reti

0000055e <__vector_11>:

ISR(TIMER1_COMPA_vect) 
{
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	0f 92       	push	r0
     566:	11 24       	eor	r1, r1
     568:	2f 93       	push	r18
     56a:	3f 93       	push	r19
     56c:	4f 93       	push	r20
     56e:	5f 93       	push	r21
     570:	6f 93       	push	r22
     572:	7f 93       	push	r23
     574:	8f 93       	push	r24
     576:	9f 93       	push	r25
     578:	af 93       	push	r26
     57a:	bf 93       	push	r27
     57c:	ef 93       	push	r30
     57e:	ff 93       	push	r31
	// The OCIE1A interrupt should be activated once every second
	// This is to determine how many pulses have occurred from the
	// flow meter every second, essentially calculating the frequency
	// in hertz (pulses/second)
	
	FLOW_freq = FLOW_pcount;
     580:	80 91 5b 01 	lds	r24, 0x015B
     584:	90 91 5c 01 	lds	r25, 0x015C
     588:	90 93 52 01 	sts	0x0152, r25
     58c:	80 93 51 01 	sts	0x0151, r24
	FLOW_indicator.active_toggle1s ^=1;
     590:	80 91 47 01 	lds	r24, 0x0147
     594:	81 fb       	bst	r24, 1
     596:	22 27       	eor	r18, r18
     598:	20 f9       	bld	r18, 0
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	92 27       	eor	r25, r18
     59e:	90 fb       	bst	r25, 0
     5a0:	81 f9       	bld	r24, 1
     5a2:	80 93 47 01 	sts	0x0147, r24
	// do not divide by zero
	if(FLOW_freq>0)
     5a6:	80 91 51 01 	lds	r24, 0x0151
     5aa:	90 91 52 01 	lds	r25, 0x0152
     5ae:	89 2b       	or	r24, r25
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <__vector_11+0x56>
     5b2:	4c c0       	rjmp	.+152    	; 0x64c <__vector_11+0xee>
	{
		FLOW_DIgals += ((float)FLOW_freq/K_FACTOR);
     5b4:	60 91 51 01 	lds	r22, 0x0151
     5b8:	70 91 52 01 	lds	r23, 0x0152
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatunsisf>
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e8       	ldi	r19, 0x80	; 128
     5c8:	49 e0       	ldi	r20, 0x09	; 9
     5ca:	54 e4       	ldi	r21, 0x44	; 68
     5cc:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__divsf3>
     5d0:	9b 01       	movw	r18, r22
     5d2:	ac 01       	movw	r20, r24
     5d4:	60 91 3d 01 	lds	r22, 0x013D
     5d8:	70 91 3e 01 	lds	r23, 0x013E
     5dc:	80 91 3f 01 	lds	r24, 0x013F
     5e0:	90 91 40 01 	lds	r25, 0x0140
     5e4:	0e 94 5f 0b 	call	0x16be	; 0x16be <__addsf3>
     5e8:	60 93 3d 01 	sts	0x013D, r22
     5ec:	70 93 3e 01 	sts	0x013E, r23
     5f0:	80 93 3f 01 	sts	0x013F, r24
     5f4:	90 93 40 01 	sts	0x0140, r25
		FLOW_KYgals += ((float)FLOW_freq/K_FACTOR);
     5f8:	60 91 51 01 	lds	r22, 0x0151
     5fc:	70 91 52 01 	lds	r23, 0x0152
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatunsisf>
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e8       	ldi	r19, 0x80	; 128
     60c:	49 e0       	ldi	r20, 0x09	; 9
     60e:	54 e4       	ldi	r21, 0x44	; 68
     610:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__divsf3>
     614:	9b 01       	movw	r18, r22
     616:	ac 01       	movw	r20, r24
     618:	60 91 57 01 	lds	r22, 0x0157
     61c:	70 91 58 01 	lds	r23, 0x0158
     620:	80 91 59 01 	lds	r24, 0x0159
     624:	90 91 5a 01 	lds	r25, 0x015A
     628:	0e 94 5f 0b 	call	0x16be	; 0x16be <__addsf3>
     62c:	60 93 57 01 	sts	0x0157, r22
     630:	70 93 58 01 	sts	0x0158, r23
     634:	80 93 59 01 	sts	0x0159, r24
     638:	90 93 5a 01 	sts	0x015A, r25
		FLOW_idlecount = 0;
     63c:	10 92 4d 01 	sts	0x014D, r1
		FLOW_indicator.state = ACTIVE;
     640:	80 91 47 01 	lds	r24, 0x0147
     644:	84 60       	ori	r24, 0x04	; 4
     646:	80 93 47 01 	sts	0x0147, r24
     64a:	0a c0       	rjmp	.+20     	; 0x660 <__vector_11+0x102>
	}
	else
	{
		// Flow meter is idle
		FLOW_idlecount ++;
     64c:	80 91 4d 01 	lds	r24, 0x014D
     650:	8f 5f       	subi	r24, 0xFF	; 255
     652:	80 93 4d 01 	sts	0x014D, r24
		FLOW_indicator.state = INACTIVE;
     656:	80 91 47 01 	lds	r24, 0x0147
     65a:	8b 7f       	andi	r24, 0xFB	; 251
     65c:	80 93 47 01 	sts	0x0147, r24
	}
	// reset the pulse counter.
	FLOW_pcount = 0;
     660:	10 92 5c 01 	sts	0x015C, r1
     664:	10 92 5b 01 	sts	0x015B, r1
	 
     668:	ff 91       	pop	r31
     66a:	ef 91       	pop	r30
     66c:	bf 91       	pop	r27
     66e:	af 91       	pop	r26
     670:	9f 91       	pop	r25
     672:	8f 91       	pop	r24
     674:	7f 91       	pop	r23
     676:	6f 91       	pop	r22
     678:	5f 91       	pop	r21
     67a:	4f 91       	pop	r20
     67c:	3f 91       	pop	r19
     67e:	2f 91       	pop	r18
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <check_SW_State>:
 
 void check_SW_State(void)
 {
	 // pull up resistors are activated on buttons, they are active low
	 // 1ms debounce
	 swFlags.tactswON = ((!BUTTON_RD) && (t.time1ms)) ?	1 : 0;
     68a:	4b 99       	sbic	0x09, 3	; 9
     68c:	05 c0       	rjmp	.+10     	; 0x698 <check_SW_State+0xe>
     68e:	40 91 38 01 	lds	r20, 0x0138
     692:	24 2f       	mov	r18, r20
     694:	21 70       	andi	r18, 0x01	; 1
     696:	02 c0       	rjmp	.+4      	; 0x69c <check_SW_State+0x12>
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	30 91 56 01 	lds	r19, 0x0156
     6a0:	20 fb       	bst	r18, 0
     6a2:	30 f9       	bld	r19, 0
     6a4:	30 93 56 01 	sts	0x0156, r19
	 swFlags.encswON  = ((!ENC_SW_RD) && (t.time1ms)) ? 1 : 0;
     6a8:	48 99       	sbic	0x09, 0	; 9
     6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <check_SW_State+0x2c>
     6ac:	20 91 38 01 	lds	r18, 0x0138
     6b0:	82 2f       	mov	r24, r18
     6b2:	81 70       	andi	r24, 0x01	; 1
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <check_SW_State+0x30>
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	90 91 56 01 	lds	r25, 0x0156
     6be:	80 fb       	bst	r24, 0
     6c0:	92 f9       	bld	r25, 2
     6c2:	90 93 56 01 	sts	0x0156, r25
	
	if(swFlags.encswON && t.time1sec)
     6c6:	92 ff       	sbrs	r25, 2
     6c8:	09 c0       	rjmp	.+18     	; 0x6dc <check_SW_State+0x52>
     6ca:	80 91 38 01 	lds	r24, 0x0138
     6ce:	83 ff       	sbrs	r24, 3
     6d0:	0a c0       	rjmp	.+20     	; 0x6e6 <check_SW_State+0x5c>
	{
		swFlags.enchold = 1;
     6d2:	89 2f       	mov	r24, r25
     6d4:	88 60       	ori	r24, 0x08	; 8
     6d6:	80 93 56 01 	sts	0x0156, r24
     6da:	05 c0       	rjmp	.+10     	; 0x6e6 <check_SW_State+0x5c>
	}
	else if(!swFlags.encswON)
	{
		swFlags.enchold = 0;
     6dc:	80 91 56 01 	lds	r24, 0x0156
     6e0:	87 7f       	andi	r24, 0xF7	; 247
     6e2:	80 93 56 01 	sts	0x0156, r24
	}
	
	if(swFlags.tactswON && t.time1sec)
     6e6:	80 91 56 01 	lds	r24, 0x0156
     6ea:	80 ff       	sbrs	r24, 0
     6ec:	0a c0       	rjmp	.+20     	; 0x702 <check_SW_State+0x78>
     6ee:	80 91 38 01 	lds	r24, 0x0138
     6f2:	83 ff       	sbrs	r24, 3
     6f4:	0b c0       	rjmp	.+22     	; 0x70c <check_SW_State+0x82>
	{
		swFlags.tacthold = 1;
     6f6:	80 91 56 01 	lds	r24, 0x0156
     6fa:	82 60       	ori	r24, 0x02	; 2
     6fc:	80 93 56 01 	sts	0x0156, r24
     700:	08 95       	ret
	}
	else if(!swFlags.tactswON)
	{
		swFlags.tacthold = 0;
     702:	80 91 56 01 	lds	r24, 0x0156
     706:	8d 7f       	andi	r24, 0xFD	; 253
     708:	80 93 56 01 	sts	0x0156, r24
     70c:	08 95       	ret

0000070e <check_timers>:
 
 void check_timers(void)
 {
	 // check the base counter and set or clear the respective
	 // bits in the bit field
	 t.time1ms	= (timeBaseCount >= 1)		? 1 : 0;
     70e:	80 91 4e 01 	lds	r24, 0x014E
     712:	90 91 4f 01 	lds	r25, 0x014F
     716:	21 e0       	ldi	r18, 0x01	; 1
     718:	89 2b       	or	r24, r25
     71a:	09 f4       	brne	.+2      	; 0x71e <check_timers+0x10>
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	80 91 38 01 	lds	r24, 0x0138
     722:	20 fb       	bst	r18, 0
     724:	80 f9       	bld	r24, 0
     726:	80 93 38 01 	sts	0x0138, r24
	 t.time5ms	= (timeBaseCount >= 5)		? 1 : 0;
     72a:	80 91 4e 01 	lds	r24, 0x014E
     72e:	90 91 4f 01 	lds	r25, 0x014F
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	05 97       	sbiw	r24, 0x05	; 5
     736:	08 f4       	brcc	.+2      	; 0x73a <check_timers+0x2c>
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	80 91 38 01 	lds	r24, 0x0138
     73e:	20 fb       	bst	r18, 0
     740:	81 f9       	bld	r24, 1
     742:	80 93 38 01 	sts	0x0138, r24
	 t.time10ms	= (timeBaseCount >= 10)		? 1 : 0;
     746:	80 91 4e 01 	lds	r24, 0x014E
     74a:	90 91 4f 01 	lds	r25, 0x014F
     74e:	21 e0       	ldi	r18, 0x01	; 1
     750:	0a 97       	sbiw	r24, 0x0a	; 10
     752:	08 f4       	brcc	.+2      	; 0x756 <check_timers+0x48>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	80 91 38 01 	lds	r24, 0x0138
     75a:	20 fb       	bst	r18, 0
     75c:	82 f9       	bld	r24, 2
     75e:	80 93 38 01 	sts	0x0138, r24
	 t.time1sec	= (timeBaseCount >= 1000)	? 1 : 0;
     762:	80 91 4e 01 	lds	r24, 0x014E
     766:	90 91 4f 01 	lds	r25, 0x014F
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	88 3e       	cpi	r24, 0xE8	; 232
     76e:	93 40       	sbci	r25, 0x03	; 3
     770:	08 f4       	brcc	.+2      	; 0x774 <check_timers+0x66>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	80 91 38 01 	lds	r24, 0x0138
     778:	20 fb       	bst	r18, 0
     77a:	83 f9       	bld	r24, 3
     77c:	80 93 38 01 	sts	0x0138, r24
	 
	 // check the LED counter and set or clear the respective
	 // bits in the bit field
	 LED.time1ms	= (timeLEDcount>= 1)		? 1 : 0;
     780:	80 91 53 01 	lds	r24, 0x0153
     784:	90 91 54 01 	lds	r25, 0x0154
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	89 2b       	or	r24, r25
     78c:	09 f4       	brne	.+2      	; 0x790 <check_timers+0x82>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	80 91 55 01 	lds	r24, 0x0155
     794:	20 fb       	bst	r18, 0
     796:	80 f9       	bld	r24, 0
     798:	80 93 55 01 	sts	0x0155, r24
	 LED.time5ms	= (timeLEDcount >= 5)		? 1 : 0;
     79c:	80 91 53 01 	lds	r24, 0x0153
     7a0:	90 91 54 01 	lds	r25, 0x0154
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	05 97       	sbiw	r24, 0x05	; 5
     7a8:	08 f4       	brcc	.+2      	; 0x7ac <check_timers+0x9e>
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	80 91 55 01 	lds	r24, 0x0155
     7b0:	20 fb       	bst	r18, 0
     7b2:	81 f9       	bld	r24, 1
     7b4:	80 93 55 01 	sts	0x0155, r24
	 LED.time10ms	= (timeLEDcount >= 10)		? 1 : 0;
     7b8:	80 91 53 01 	lds	r24, 0x0153
     7bc:	90 91 54 01 	lds	r25, 0x0154
     7c0:	21 e0       	ldi	r18, 0x01	; 1
     7c2:	0a 97       	sbiw	r24, 0x0a	; 10
     7c4:	08 f4       	brcc	.+2      	; 0x7c8 <check_timers+0xba>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	80 91 55 01 	lds	r24, 0x0155
     7cc:	20 fb       	bst	r18, 0
     7ce:	82 f9       	bld	r24, 2
     7d0:	80 93 55 01 	sts	0x0155, r24
	 LED.time1sec	= (timeLEDcount >= 1000)	? 1 : 0;
     7d4:	80 91 53 01 	lds	r24, 0x0153
     7d8:	90 91 54 01 	lds	r25, 0x0154
     7dc:	21 e0       	ldi	r18, 0x01	; 1
     7de:	88 3e       	cpi	r24, 0xE8	; 232
     7e0:	93 40       	sbci	r25, 0x03	; 3
     7e2:	08 f4       	brcc	.+2      	; 0x7e6 <check_timers+0xd8>
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	80 91 55 01 	lds	r24, 0x0155
     7ea:	20 fb       	bst	r18, 0
     7ec:	83 f9       	bld	r24, 3
     7ee:	80 93 55 01 	sts	0x0155, r24
	 
	 if (LED.time1sec)
     7f2:	83 ff       	sbrs	r24, 3
     7f4:	03 c0       	rjmp	.+6      	; 0x7fc <check_timers+0xee>
	 {
		 LED.oneSecflg = 1;
     7f6:	80 61       	ori	r24, 0x10	; 16
     7f8:	80 93 55 01 	sts	0x0155, r24
	 }
	 // if the base counter is above 1000 (1sec) then clear it
	 // as it is useless at that point
	 if(timeBaseCount>=1000)
     7fc:	80 91 4e 01 	lds	r24, 0x014E
     800:	90 91 4f 01 	lds	r25, 0x014F
     804:	88 3e       	cpi	r24, 0xE8	; 232
     806:	93 40       	sbci	r25, 0x03	; 3
     808:	48 f0       	brcs	.+18     	; 0x81c <check_timers+0x10e>
	 {
		 timeBaseCount = 0;
     80a:	10 92 4f 01 	sts	0x014F, r1
     80e:	10 92 4e 01 	sts	0x014E, r1
		 t.oneSecflg = 1;
     812:	80 91 38 01 	lds	r24, 0x0138
     816:	80 61       	ori	r24, 0x10	; 16
     818:	80 93 38 01 	sts	0x0138, r24
	 }
	 if(timeLEDcount>=1000)
     81c:	80 91 53 01 	lds	r24, 0x0153
     820:	90 91 54 01 	lds	r25, 0x0154
     824:	88 3e       	cpi	r24, 0xE8	; 232
     826:	93 40       	sbci	r25, 0x03	; 3
     828:	48 f0       	brcs	.+18     	; 0x83c <check_timers+0x12e>
	 {
		 LED.oneSecflg = 1;
     82a:	80 91 55 01 	lds	r24, 0x0155
     82e:	80 61       	ori	r24, 0x10	; 16
     830:	80 93 55 01 	sts	0x0155, r24
		 timeLEDcount = 0;
     834:	10 92 54 01 	sts	0x0154, r1
     838:	10 92 53 01 	sts	0x0153, r1
     83c:	08 95       	ret

0000083e <check_Alarm>:
{	
	uint8_t LEDseconds;
	
	
	
	if (LED.oneSecflg && (state == STATE_mainmenu))
     83e:	80 91 55 01 	lds	r24, 0x0155
     842:	84 ff       	sbrs	r24, 4
     844:	0a c0       	rjmp	.+20     	; 0x85a <check_Alarm+0x1c>
     846:	80 91 48 01 	lds	r24, 0x0148
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	31 f4       	brne	.+12     	; 0x85a <check_Alarm+0x1c>
	{
		Display_Tank_Alert(DItank);
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	0e 94 fd 08 	call	0x11fa	; 0x11fa <Display_Tank_Alert>
		Display_Tank_Alert(KYtank);
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	0e 94 fd 08 	call	0x11fa	; 0x11fa <Display_Tank_Alert>
	}

	
	if(FLOW_indicator.threshold_met)
     85a:	80 91 47 01 	lds	r24, 0x0147
     85e:	80 ff       	sbrs	r24, 0
     860:	0c c0       	rjmp	.+24     	; 0x87a <check_Alarm+0x3c>
	{
		// threshold has been met
		if(LED.oneSecflg)
     862:	80 91 55 01 	lds	r24, 0x0155
     866:	84 ff       	sbrs	r24, 4
     868:	0d c0       	rjmp	.+26     	; 0x884 <check_Alarm+0x46>
		{
			// toggle led on one second flag 
			LEDseconds ++;
			LED.oneSecflg = 0;
     86a:	8f 7e       	andi	r24, 0xEF	; 239
     86c:	80 93 55 01 	sts	0x0155, r24
			S_LED_TOG;
     870:	9b b1       	in	r25, 0x0b	; 11
     872:	80 e1       	ldi	r24, 0x10	; 16
     874:	89 27       	eor	r24, r25
     876:	8b b9       	out	0x0b, r24	; 11
     878:	08 95       	ret
		}
	}
	
	
	else if (state == STATE_mainmenu)
     87a:	80 91 48 01 	lds	r24, 0x0148
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	09 f4       	brne	.+2      	; 0x884 <check_Alarm+0x46>
	{
		LEDseconds = 0;
		S_LED_OFF;
     882:	5c 98       	cbi	0x0b, 4	; 11
     884:	08 95       	ret

00000886 <eePROMinit>:
}


void eePROMinit(void)
{
	FLOW_DIcycles = eeprom_read_byte((uint8_t*)DIcyclesLOC);
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__eerd_byte_m168pa>
     88e:	80 93 3b 01 	sts	0x013B, r24
     892:	10 92 3c 01 	sts	0x013C, r1
	FLOW_KYcycles = eeprom_read_byte((uint8_t*)KYcyclesLOC);
     896:	88 e0       	ldi	r24, 0x08	; 8
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__eerd_byte_m168pa>
     89e:	80 93 41 01 	sts	0x0141, r24
     8a2:	10 92 42 01 	sts	0x0142, r1
	
	FLOW_DIgals = eeprom_read_float((float*)DIgalLOC);
     8a6:	80 e1       	ldi	r24, 0x10	; 16
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__eerd_dword_m168pa>
     8ae:	60 93 3d 01 	sts	0x013D, r22
     8b2:	70 93 3e 01 	sts	0x013E, r23
     8b6:	80 93 3f 01 	sts	0x013F, r24
     8ba:	90 93 40 01 	sts	0x0140, r25
	FLOW_KYgals = eeprom_read_float((float*)KYgalLOC);
     8be:	80 e3       	ldi	r24, 0x30	; 48
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__eerd_dword_m168pa>
     8c6:	60 93 57 01 	sts	0x0157, r22
     8ca:	70 93 58 01 	sts	0x0158, r23
     8ce:	80 93 59 01 	sts	0x0159, r24
     8d2:	90 93 5a 01 	sts	0x015A, r25
	
	FLOW_DIgalThreshold = eeprom_read_float((float*)DIthreshLOC);
     8d6:	80 e5       	ldi	r24, 0x50	; 80
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__eerd_dword_m168pa>
     8de:	60 93 43 01 	sts	0x0143, r22
     8e2:	70 93 44 01 	sts	0x0144, r23
     8e6:	80 93 45 01 	sts	0x0145, r24
     8ea:	90 93 46 01 	sts	0x0146, r25
	FLOW_KYgalThreshold = eeprom_read_float((float*)KYthreshLOC);
     8ee:	80 e7       	ldi	r24, 0x70	; 112
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__eerd_dword_m168pa>
     8f6:	60 93 34 01 	sts	0x0134, r22
     8fa:	70 93 35 01 	sts	0x0135, r23
     8fe:	80 93 36 01 	sts	0x0136, r24
     902:	90 93 37 01 	sts	0x0137, r25
     906:	08 95       	ret

00000908 <init>:


 void init(void)
 {
	 // Initialize Flags Variables
	 swFlags.tactswON = 0;
     908:	80 91 56 01 	lds	r24, 0x0156
	 swFlags.tacthold = 0;
	 swFlags.encswON  = 0;
	 swFlags.enchold  = 0;
     90c:	88 7f       	andi	r24, 0xF8	; 248
     90e:	87 7f       	andi	r24, 0xF7	; 247
     910:	80 93 56 01 	sts	0x0156, r24
	 // Initialize timer flags
	 t.time1ms	= 0;
     914:	80 91 38 01 	lds	r24, 0x0138
	 t.time5ms	= 0;
	 t.time10ms	= 0;
	 t.time1sec = 0;
	 t.oneSecflg = 0;
     918:	80 7f       	andi	r24, 0xF0	; 240
     91a:	8f 7e       	andi	r24, 0xEF	; 239
     91c:	80 93 38 01 	sts	0x0138, r24
	 
	 LED.time1ms	= 0;
     920:	80 91 55 01 	lds	r24, 0x0155
	 LED.time5ms	= 0;
	 LED.time10ms	= 0;
	 LED.time1sec	= 0;
	 LED.oneSecflg  = 0;
     924:	80 7f       	andi	r24, 0xF0	; 240
     926:	8f 7e       	andi	r24, 0xEF	; 239
     928:	80 93 55 01 	sts	0x0155, r24
	 
	 
	 timeBaseCount = 0;
     92c:	10 92 4f 01 	sts	0x014F, r1
     930:	10 92 4e 01 	sts	0x014E, r1
 	// Set Directions For Interface pins
 	// PORT D OTUPUTS
 	DDRD = (1<<STATUS_LED);
     934:	80 e1       	ldi	r24, 0x10	; 16
     936:	8a b9       	out	0x0a, r24	; 10
	// Activate Pull-up for tactile switch, making it active low
	PORTD |= (1<<BUTTON) ;
     938:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Pin Change Interrupt Enable 2
	PCICR |= (1<<PCIE2);
     93a:	e8 e6       	ldi	r30, 0x68	; 104
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	90 81       	ld	r25, Z
     940:	94 60       	ori	r25, 0x04	; 4
     942:	90 83       	st	Z, r25
	// Pin Change Enable Mask
	PCMSK2 |= (1<<PCINT16) | (1<<PCINT19);
     944:	ed e6       	ldi	r30, 0x6D	; 109
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	90 81       	ld	r25, Z
     94a:	99 60       	ori	r25, 0x09	; 9
     94c:	90 83       	st	Z, r25
	
	// Enable and configure a counter for button hold time
	// CTC mode clock divided by 1024
	// 16Mhz/1024 = 15.63kHz -> period: 64us
	TCCR0A |= (1<<WGM01) ;
     94e:	94 b5       	in	r25, 0x24	; 36
     950:	92 60       	ori	r25, 0x02	; 2
     952:	94 bd       	out	0x24, r25	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00);
     954:	95 b5       	in	r25, 0x25	; 37
     956:	95 60       	ori	r25, 0x05	; 5
     958:	95 bd       	out	0x25, r25	; 37
	// Counter0 output compare match A Interrupt Enabled
	TIMSK0 |= (1<<OCIE0A);
     95a:	ee e6       	ldi	r30, 0x6E	; 110
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	90 81       	ld	r25, Z
     960:	92 60       	ori	r25, 0x02	; 2
     962:	90 83       	st	Z, r25
	// Compare Interrupt should activate every 1ms
	OCR0A = 16;
     964:	87 bd       	out	0x27, r24	; 39
	
	eePROMinit();
     966:	0e 94 43 04 	call	0x886	; 0x886 <eePROMinit>
     96a:	08 95       	ret

0000096c <eePROMsave>:
	FLOW_KYgalThreshold = eeprom_read_float((float*)KYthreshLOC);
	
}

void eePROMsave(uint8_t choice)
{
     96c:	cf 93       	push	r28
     96e:	c8 2f       	mov	r28, r24
	if((choice == CYCLES) || (choice == ALL))
     970:	81 30       	cpi	r24, 0x01	; 1
     972:	d1 f1       	breq	.+116    	; 0x9e8 <eePROMsave+0x7c>
     974:	84 30       	cpi	r24, 0x04	; 4
     976:	a9 f5       	brne	.+106    	; 0x9e2 <eePROMsave+0x76>
     978:	44 c0       	rjmp	.+136    	; 0xa02 <eePROMsave+0x96>
		eeprom_update_byte((uint8_t*)KYcyclesLOC, FLOW_KYcycles);
	}
	
	if((choice == GALS) || (choice == ALL))
	{
		eeprom_update_float((float*)DIgalLOC, FLOW_DIgals);
     97a:	40 91 3d 01 	lds	r20, 0x013D
     97e:	50 91 3e 01 	lds	r21, 0x013E
     982:	60 91 3f 01 	lds	r22, 0x013F
     986:	70 91 40 01 	lds	r23, 0x0140
     98a:	80 e1       	ldi	r24, 0x10	; 16
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 88 12 	call	0x2510	; 0x2510 <__eeupd_dword_m168pa>
		eeprom_update_float((float*)KYgalLOC, FLOW_KYgals);
     992:	40 91 57 01 	lds	r20, 0x0157
     996:	50 91 58 01 	lds	r21, 0x0158
     99a:	60 91 59 01 	lds	r22, 0x0159
     99e:	70 91 5a 01 	lds	r23, 0x015A
     9a2:	80 e3       	ldi	r24, 0x30	; 48
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 88 12 	call	0x2510	; 0x2510 <__eeupd_dword_m168pa>
	}
	
	if ((choice == THRESH) || (choice == ALL))
     9aa:	c3 50       	subi	r28, 0x03	; 3
     9ac:	c2 30       	cpi	r28, 0x02	; 2
     9ae:	b0 f5       	brcc	.+108    	; 0xa1c <eePROMsave+0xb0>
	{
		eeprom_update_float((float*)DIthreshLOC, FLOW_DIgalThreshold);
     9b0:	40 91 43 01 	lds	r20, 0x0143
     9b4:	50 91 44 01 	lds	r21, 0x0144
     9b8:	60 91 45 01 	lds	r22, 0x0145
     9bc:	70 91 46 01 	lds	r23, 0x0146
     9c0:	80 e5       	ldi	r24, 0x50	; 80
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 88 12 	call	0x2510	; 0x2510 <__eeupd_dword_m168pa>
		eeprom_update_float((float*)KYthreshLOC, FLOW_KYgalThreshold);
     9c8:	40 91 34 01 	lds	r20, 0x0134
     9cc:	50 91 35 01 	lds	r21, 0x0135
     9d0:	60 91 36 01 	lds	r22, 0x0136
     9d4:	70 91 37 01 	lds	r23, 0x0137
     9d8:	80 e7       	ldi	r24, 0x70	; 112
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 88 12 	call	0x2510	; 0x2510 <__eeupd_dword_m168pa>
     9e0:	1d c0       	rjmp	.+58     	; 0xa1c <eePROMsave+0xb0>
	{
		eeprom_update_byte((uint8_t*)DIcyclesLOC,FLOW_DIcycles);
		eeprom_update_byte((uint8_t*)KYcyclesLOC, FLOW_KYcycles);
	}
	
	if((choice == GALS) || (choice == ALL))
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	11 f7       	brne	.-60     	; 0x9aa <eePROMsave+0x3e>
     9e6:	c9 cf       	rjmp	.-110    	; 0x97a <eePROMsave+0xe>

void eePROMsave(uint8_t choice)
{
	if((choice == CYCLES) || (choice == ALL))
	{
		eeprom_update_byte((uint8_t*)DIcyclesLOC,FLOW_DIcycles);
     9e8:	60 91 3b 01 	lds	r22, 0x013B
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 76 12 	call	0x24ec	; 0x24ec <__eeupd_byte_m168pa>
		eeprom_update_byte((uint8_t*)KYcyclesLOC, FLOW_KYcycles);
     9f4:	60 91 41 01 	lds	r22, 0x0141
     9f8:	88 e0       	ldi	r24, 0x08	; 8
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 76 12 	call	0x24ec	; 0x24ec <__eeupd_byte_m168pa>
     a00:	d4 cf       	rjmp	.-88     	; 0x9aa <eePROMsave+0x3e>

void eePROMsave(uint8_t choice)
{
	if((choice == CYCLES) || (choice == ALL))
	{
		eeprom_update_byte((uint8_t*)DIcyclesLOC,FLOW_DIcycles);
     a02:	60 91 3b 01 	lds	r22, 0x013B
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 76 12 	call	0x24ec	; 0x24ec <__eeupd_byte_m168pa>
		eeprom_update_byte((uint8_t*)KYcyclesLOC, FLOW_KYcycles);
     a0e:	60 91 41 01 	lds	r22, 0x0141
     a12:	88 e0       	ldi	r24, 0x08	; 8
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 76 12 	call	0x24ec	; 0x24ec <__eeupd_byte_m168pa>
     a1a:	af cf       	rjmp	.-162    	; 0x97a <eePROMsave+0xe>
	{
		eeprom_update_float((float*)DIthreshLOC, FLOW_DIgalThreshold);
		eeprom_update_float((float*)KYthreshLOC, FLOW_KYgalThreshold);
	}

}
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <__vector_5>:
 * PD2 (PCINT18, INT0)	: ENC_CH_A
 * PD3 (PCINT19)		: BUTTON
 */

ISR(PCINT2_vect)
{
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
	// Reset timer if activity is sensed on either button
	TCNT0 = 0;
     a2a:	16 bc       	out	0x26, r1	; 38
}
     a2c:	0f 90       	pop	r0
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	0f 90       	pop	r0
     a32:	1f 90       	pop	r1
     a34:	18 95       	reti

00000a36 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
     a36:	1f 92       	push	r1
     a38:	0f 92       	push	r0
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	0f 92       	push	r0
     a3e:	11 24       	eor	r1, r1
     a40:	8f 93       	push	r24
     a42:	9f 93       	push	r25
	// OCR0A is 16, Interrupt should activate every 1ms
	// If either button is active then increment base counter
	// else clear it
	if((!BUTTON_RD) || (!ENC_SW_RD))
     a44:	4b 9b       	sbis	0x09, 3	; 9
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <__vector_14+0x16>
     a48:	48 99       	sbic	0x09, 0	; 9
     a4a:	0a c0       	rjmp	.+20     	; 0xa60 <__vector_14+0x2a>
		timeBaseCount ++;
     a4c:	80 91 4e 01 	lds	r24, 0x014E
     a50:	90 91 4f 01 	lds	r25, 0x014F
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	90 93 4f 01 	sts	0x014F, r25
     a5a:	80 93 4e 01 	sts	0x014E, r24
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__vector_14+0x32>
	else
		timeBaseCount = 0;
     a60:	10 92 4f 01 	sts	0x014F, r1
     a64:	10 92 4e 01 	sts	0x014E, r1
		
	timeLEDcount ++;
     a68:	80 91 53 01 	lds	r24, 0x0153
     a6c:	90 91 54 01 	lds	r25, 0x0154
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	90 93 54 01 	sts	0x0154, r25
     a76:	80 93 53 01 	sts	0x0153, r24
     a7a:	9f 91       	pop	r25
     a7c:	8f 91       	pop	r24
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	0f 90       	pop	r0
     a84:	1f 90       	pop	r1
     a86:	18 95       	reti

00000a88 <delay1s>:
	0b00000000
};

//delay 1s
void delay1s(void)
{
     a88:	84 e6       	ldi	r24, 0x64	; 100
     a8a:	ef e3       	ldi	r30, 0x3F	; 63
     a8c:	fc e9       	ldi	r31, 0x9C	; 156
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <delay1s+0x6>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <delay1s+0xc>
     a94:	00 00       	nop
     a96:	81 50       	subi	r24, 0x01	; 1
	uint8_t i;
	for(i=0;i<100;i++)
     a98:	c1 f7       	brne	.-16     	; 0xa8a <delay1s+0x2>
	{
		_delay_ms(10);
	}
}
     a9a:	08 95       	ret

00000a9c <progress>:
//demonstration of progress bar
void progress(void)
{
     a9c:	cf 93       	push	r28
	delay1s();
     a9e:	0e 94 44 05 	call	0xa88	; 0xa88 <delay1s>
	CopyStringtoLCD(LCDprogress, 6, 2);
     aa2:	42 e0       	ldi	r20, 0x02	; 2
     aa4:	66 e0       	ldi	r22, 0x06	; 6
     aa6:	85 eb       	ldi	r24, 0xB5	; 181
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 c3 09 	call	0x1386	; 0x1386 <CopyStringtoLCD>
	for(uint8_t i=0;i<255;i++)
     aae:	c0 e0       	ldi	r28, 0x00	; 0
     ab0:	8f e3       	ldi	r24, 0x3F	; 63
     ab2:	9c e9       	ldi	r25, 0x9C	; 156
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <progress+0x18>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <progress+0x1e>
     aba:	00 00       	nop
	{
		_delay_ms(10);
		LCDGotoXY(1, 3);
     abc:	63 e0       	ldi	r22, 0x03	; 3
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDprogressBar(i, 255, 16);
     ac4:	40 e1       	ldi	r20, 0x10	; 16
     ac6:	6f ef       	ldi	r22, 0xFF	; 255
     ac8:	8c 2f       	mov	r24, r28
     aca:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <LCDprogressBar>
//demonstration of progress bar
void progress(void)
{
	delay1s();
	CopyStringtoLCD(LCDprogress, 6, 2);
	for(uint8_t i=0;i<255;i++)
     ace:	cf 5f       	subi	r28, 0xFF	; 255
     ad0:	cf 3f       	cpi	r28, 0xFF	; 255
     ad2:	71 f7       	brne	.-36     	; 0xab0 <progress+0x14>
	{
		_delay_ms(10);
		LCDGotoXY(1, 3);
		LCDprogressBar(i, 255, 16);
	}
}
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <demoanimation>:
//demonstration of animation
void demoanimation(uint8_t* incrementflag)
{
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	ec 01       	movw	r28, r24
	uint8_t xcoord,ycoord;
	xcoord = 1;
	ycoord = 1;
	LCDdefinechar(backslash,0);
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	88 e6       	ldi	r24, 0x68	; 104
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <LCDdefinechar>
	LCDGotoXY(xcoord,ycoord);
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
	
	switch (*incrementflag)
     af0:	88 81       	ld	r24, Y
     af2:	85 30       	cpi	r24, 0x05	; 5
     af4:	21 f1       	breq	.+72     	; 0xb3e <demoanimation+0x66>
     af6:	58 f4       	brcc	.+22     	; 0xb0e <demoanimation+0x36>
     af8:	82 30       	cpi	r24, 0x02	; 2
     afa:	a9 f0       	breq	.+42     	; 0xb26 <demoanimation+0x4e>
     afc:	18 f4       	brcc	.+6      	; 0xb04 <demoanimation+0x2c>
     afe:	81 30       	cpi	r24, 0x01	; 1
     b00:	a1 f5       	brne	.+104    	; 0xb6a <demoanimation+0x92>
     b02:	0d c0       	rjmp	.+26     	; 0xb1e <demoanimation+0x46>
     b04:	83 30       	cpi	r24, 0x03	; 3
     b06:	99 f0       	breq	.+38     	; 0xb2e <demoanimation+0x56>
     b08:	84 30       	cpi	r24, 0x04	; 4
     b0a:	79 f5       	brne	.+94     	; 0xb6a <demoanimation+0x92>
     b0c:	14 c0       	rjmp	.+40     	; 0xb36 <demoanimation+0x5e>
     b0e:	87 30       	cpi	r24, 0x07	; 7
     b10:	f1 f0       	breq	.+60     	; 0xb4e <demoanimation+0x76>
     b12:	c8 f0       	brcs	.+50     	; 0xb46 <demoanimation+0x6e>
     b14:	88 30       	cpi	r24, 0x08	; 8
     b16:	f9 f0       	breq	.+62     	; 0xb56 <demoanimation+0x7e>
     b18:	8a 30       	cpi	r24, 0x0A	; 10
     b1a:	39 f5       	brne	.+78     	; 0xb6a <demoanimation+0x92>
     b1c:	22 c0       	rjmp	.+68     	; 0xb62 <demoanimation+0x8a>
	{
		case 1:
			LCDsendChar('-');
     b1e:	8d e2       	ldi	r24, 0x2D	; 45
     b20:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
			break;
     b24:	25 c0       	rjmp	.+74     	; 0xb70 <demoanimation+0x98>
		case 2:
			LCDsendChar('/');
     b26:	8f e2       	ldi	r24, 0x2F	; 47
     b28:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
			break;
     b2c:	21 c0       	rjmp	.+66     	; 0xb70 <demoanimation+0x98>
		case 3:
			LCDsendChar('|');
     b2e:	8c e7       	ldi	r24, 0x7C	; 124
     b30:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
			break;
     b34:	1d c0       	rjmp	.+58     	; 0xb70 <demoanimation+0x98>
		case 4:
			LCDsendChar(8);// backslash
     b36:	88 e0       	ldi	r24, 0x08	; 8
     b38:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
			break;
     b3c:	19 c0       	rjmp	.+50     	; 0xb70 <demoanimation+0x98>
		case 5:
			LCDsendChar('-');
     b3e:	8d e2       	ldi	r24, 0x2D	; 45
     b40:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
			break;
     b44:	15 c0       	rjmp	.+42     	; 0xb70 <demoanimation+0x98>
		case 6:
			LCDsendChar('/');
     b46:	8f e2       	ldi	r24, 0x2F	; 47
     b48:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
			break;
     b4c:	11 c0       	rjmp	.+34     	; 0xb70 <demoanimation+0x98>
		case 7:
			LCDsendChar('|');
     b4e:	8c e7       	ldi	r24, 0x7C	; 124
     b50:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
			break;
     b54:	0d c0       	rjmp	.+26     	; 0xb70 <demoanimation+0x98>
		case 8:
			LCDsendChar(8);
     b56:	88 e0       	ldi	r24, 0x08	; 8
     b58:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
			*incrementflag = 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	88 83       	st	Y, r24
			break;
     b60:	07 c0       	rjmp	.+14     	; 0xb70 <demoanimation+0x98>
		case 10:
			LCDsendChar(' ');
     b62:	80 e2       	ldi	r24, 0x20	; 32
     b64:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
			break;
     b68:	03 c0       	rjmp	.+6      	; 0xb70 <demoanimation+0x98>
		default:
			LCDsendChar('/');
     b6a:	8f e2       	ldi	r24, 0x2F	; 47
     b6c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
			break;
		
	}
	

}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <WelcomeMessage>:

void WelcomeMessage (void)
{
	LCDclr();
     b76:	0e 94 96 09 	call	0x132c	; 0x132c <LCDclr>
	CopyStringtoLCD(Welcome,0,0);
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	81 ea       	ldi	r24, 0xA1	; 161
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 c3 09 	call	0x1386	; 0x1386 <CopyStringtoLCD>
	progress();
     b86:	0e 94 4e 05 	call	0xa9c	; 0xa9c <progress>
	LCDclr();
     b8a:	0e 94 96 09 	call	0x132c	; 0x132c <LCDclr>
     b8e:	08 95       	ret

00000b90 <MainDisplay>:
}

void MainDisplay (void)
{
	CopyStringtoLCD(Welcome,0,0);
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	81 ea       	ldi	r24, 0xA1	; 161
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 c3 09 	call	0x1386	; 0x1386 <CopyStringtoLCD>
	CopyStringtoLCD(MsrmntHeader,8,1);
     b9c:	41 e0       	ldi	r20, 0x01	; 1
     b9e:	68 e0       	ldi	r22, 0x08	; 8
     ba0:	87 e8       	ldi	r24, 0x87	; 135
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 c3 09 	call	0x1386	; 0x1386 <CopyStringtoLCD>
	CopyStringtoLCD(Tank1Title,1,2);
     ba8:	42 e0       	ldi	r20, 0x02	; 2
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	8a e9       	ldi	r24, 0x9A	; 154
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 c3 09 	call	0x1386	; 0x1386 <CopyStringtoLCD>
	CopyStringtoLCD(Tank2Title,1,3);
     bb4:	43 e0       	ldi	r20, 0x03	; 3
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	83 e9       	ldi	r24, 0x93	; 147
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 c3 09 	call	0x1386	; 0x1386 <CopyStringtoLCD>
     bc0:	08 95       	ret

00000bc2 <InfoDisplay>:
}

void InfoDisplay(	int8_t count_cycleDI, int8_t count_cycleKZN,
					float count_galnsDI,  float count_galnsKZN)
{
     bc2:	4f 92       	push	r4
     bc4:	5f 92       	push	r5
     bc6:	6f 92       	push	r6
     bc8:	7f 92       	push	r7
     bca:	8f 92       	push	r8
     bcc:	9f 92       	push	r9
     bce:	af 92       	push	r10
     bd0:	bf 92       	push	r11
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	2e 97       	sbiw	r28, 0x0e	; 14
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	88 2e       	mov	r8, r24
     bf4:	96 2e       	mov	r9, r22
		char DIgals[7] = {};
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	cc 24       	eor	r12, r12
     bfa:	c3 94       	inc	r12
     bfc:	d1 2c       	mov	r13, r1
     bfe:	cc 0e       	add	r12, r28
     c00:	dd 1e       	adc	r13, r29
     c02:	f6 01       	movw	r30, r12
     c04:	98 2f       	mov	r25, r24
     c06:	11 92       	st	Z+, r1
     c08:	9a 95       	dec	r25
     c0a:	e9 f7       	brne	.-6      	; 0xc06 <InfoDisplay+0x44>
		char KYgals[7] = {};
     c0c:	3e 01       	movw	r6, r28
     c0e:	e8 e0       	ldi	r30, 0x08	; 8
     c10:	6e 0e       	add	r6, r30
     c12:	71 1c       	adc	r7, r1
     c14:	f3 01       	movw	r30, r6
     c16:	11 92       	st	Z+, r1
     c18:	8a 95       	dec	r24
     c1a:	e9 f7       	brne	.-6      	; 0xc16 <InfoDisplay+0x54>
			
			If this is not done sprintf will not work with float types. You will 
			most likely see a question mark on the LCD screen where you thought 
			a floating point number should be
		*/
		sprintf(DIgals,"%7.1f",count_galnsDI);
     c1c:	5f 93       	push	r21
     c1e:	4f 93       	push	r20
     c20:	3f 93       	push	r19
     c22:	2f 93       	push	r18
     c24:	0f 2e       	mov	r0, r31
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	af 2e       	mov	r10, r31
     c2a:	f1 e0       	ldi	r31, 0x01	; 1
     c2c:	bf 2e       	mov	r11, r31
     c2e:	f0 2d       	mov	r31, r0
     c30:	bf 92       	push	r11
     c32:	af 92       	push	r10
     c34:	df 92       	push	r13
     c36:	cf 92       	push	r12
     c38:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <sprintf>
		sprintf(KYgals,"%7.1f",count_galnsKZN);
     c3c:	1f 93       	push	r17
     c3e:	0f 93       	push	r16
     c40:	ff 92       	push	r15
     c42:	ef 92       	push	r14
     c44:	bf 92       	push	r11
     c46:	af 92       	push	r10
     c48:	7f 92       	push	r7
     c4a:	6f 92       	push	r6
     c4c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <sprintf>
		
		
		// Display Tank1 cycle count thousandths
		LCDGotoXY(8,2);
     c50:	62 e0       	ldi	r22, 0x02	; 2
     c52:	88 e0       	ldi	r24, 0x08	; 8
     c54:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(((char)(int)'0'+(count_cycleDI%10000/1000)));
     c58:	e8 2c       	mov	r14, r8
     c5a:	ff 24       	eor	r15, r15
     c5c:	e7 fc       	sbrc	r14, 7
     c5e:	f0 94       	com	r15
     c60:	0f 2e       	mov	r0, r31
     c62:	f0 e1       	ldi	r31, 0x10	; 16
     c64:	af 2e       	mov	r10, r31
     c66:	f7 e2       	ldi	r31, 0x27	; 39
     c68:	bf 2e       	mov	r11, r31
     c6a:	f0 2d       	mov	r31, r0
     c6c:	c7 01       	movw	r24, r14
     c6e:	b5 01       	movw	r22, r10
     c70:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__divmodhi4>
     c74:	08 ee       	ldi	r16, 0xE8	; 232
     c76:	13 e0       	ldi	r17, 0x03	; 3
     c78:	b8 01       	movw	r22, r16
     c7a:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__divmodhi4>
     c7e:	86 2f       	mov	r24, r22
     c80:	80 5d       	subi	r24, 0xD0	; 208
     c82:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
		// Display Tank1 cycle count hundredths
		LCDGotoXY(9,2);
     c86:	62 e0       	ldi	r22, 0x02	; 2
     c88:	89 e0       	ldi	r24, 0x09	; 9
     c8a:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(((char)(int)'0'+(count_cycleDI%1000/100)));
     c8e:	c7 01       	movw	r24, r14
     c90:	b8 01       	movw	r22, r16
     c92:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__divmodhi4>
     c96:	0f 2e       	mov	r0, r31
     c98:	f4 e6       	ldi	r31, 0x64	; 100
     c9a:	ef 2e       	mov	r14, r31
     c9c:	f1 2c       	mov	r15, r1
     c9e:	f0 2d       	mov	r31, r0
     ca0:	b7 01       	movw	r22, r14
     ca2:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__divmodhi4>
     ca6:	86 2f       	mov	r24, r22
     ca8:	80 5d       	subi	r24, 0xD0	; 208
     caa:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
		// Display Tank1 cycle count tens
		LCDGotoXY(10,2);
     cae:	62 e0       	ldi	r22, 0x02	; 2
     cb0:	8a e0       	ldi	r24, 0x0A	; 10
     cb2:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(((char)(int)'0'+(count_cycleDI%100/10)));
     cb6:	f8 2d       	mov	r31, r8
     cb8:	29 e2       	ldi	r18, 0x29	; 41
     cba:	f2 02       	muls	r31, r18
     cbc:	81 2d       	mov	r24, r1
     cbe:	11 24       	eor	r1, r1
     cc0:	85 95       	asr	r24
     cc2:	85 95       	asr	r24
     cc4:	85 95       	asr	r24
     cc6:	85 95       	asr	r24
     cc8:	48 2c       	mov	r4, r8
     cca:	44 0c       	add	r4, r4
     ccc:	44 08       	sbc	r4, r4
     cce:	84 19       	sub	r24, r4
     cd0:	0f 2e       	mov	r0, r31
     cd2:	f4 e6       	ldi	r31, 0x64	; 100
     cd4:	5f 2e       	mov	r5, r31
     cd6:	f0 2d       	mov	r31, r0
     cd8:	98 2d       	mov	r25, r8
     cda:	85 9d       	mul	r24, r5
     cdc:	90 19       	sub	r25, r0
     cde:	11 24       	eor	r1, r1
     ce0:	e7 e6       	ldi	r30, 0x67	; 103
     ce2:	9e 02       	muls	r25, r30
     ce4:	81 2d       	mov	r24, r1
     ce6:	11 24       	eor	r1, r1
     ce8:	85 95       	asr	r24
     cea:	85 95       	asr	r24
     cec:	97 fd       	sbrc	r25, 7
     cee:	83 95       	inc	r24
     cf0:	80 5d       	subi	r24, 0xD0	; 208
     cf2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
		// Display Tank1 cycle count ones
		LCDGotoXY(11,2);
     cf6:	62 e0       	ldi	r22, 0x02	; 2
     cf8:	8b e0       	ldi	r24, 0x0B	; 11
     cfa:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(((char)(int)'0'+(count_cycleDI%10)));
     cfe:	f8 2d       	mov	r31, r8
     d00:	27 e6       	ldi	r18, 0x67	; 103
     d02:	f2 02       	muls	r31, r18
     d04:	81 2d       	mov	r24, r1
     d06:	11 24       	eor	r1, r1
     d08:	85 95       	asr	r24
     d0a:	85 95       	asr	r24
     d0c:	84 19       	sub	r24, r4
     d0e:	88 0f       	add	r24, r24
     d10:	98 2f       	mov	r25, r24
     d12:	99 0f       	add	r25, r25
     d14:	99 0f       	add	r25, r25
     d16:	89 0f       	add	r24, r25
     d18:	88 1a       	sub	r8, r24
     d1a:	88 2d       	mov	r24, r8
     d1c:	80 5d       	subi	r24, 0xD0	; 208
     d1e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
		
		// Display DI tank floating point gallon count 
		LCDGotoXY(13,2);
     d22:	62 e0       	ldi	r22, 0x02	; 2
     d24:	8d e0       	ldi	r24, 0x0D	; 13
     d26:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDstring(DIgals,7);
     d2a:	67 e0       	ldi	r22, 0x07	; 7
     d2c:	c6 01       	movw	r24, r12
     d2e:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCDstring>
		
		// Display Tank2 cycle count thousandths
		LCDGotoXY(8,3);
     d32:	63 e0       	ldi	r22, 0x03	; 3
     d34:	88 e0       	ldi	r24, 0x08	; 8
     d36:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(((char)(int)'0'+(count_cycleKZN%10000/1000)));
     d3a:	c9 2c       	mov	r12, r9
     d3c:	dd 24       	eor	r13, r13
     d3e:	c7 fc       	sbrc	r12, 7
     d40:	d0 94       	com	r13
     d42:	c6 01       	movw	r24, r12
     d44:	b5 01       	movw	r22, r10
     d46:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__divmodhi4>
     d4a:	b8 01       	movw	r22, r16
     d4c:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__divmodhi4>
     d50:	86 2f       	mov	r24, r22
     d52:	80 5d       	subi	r24, 0xD0	; 208
     d54:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
		// Display Tank2 cycle count hundredths
		LCDGotoXY(9,3);
     d58:	63 e0       	ldi	r22, 0x03	; 3
     d5a:	89 e0       	ldi	r24, 0x09	; 9
     d5c:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(((char)(int)'0'+(count_cycleKZN%1000/100)));
     d60:	c6 01       	movw	r24, r12
     d62:	b8 01       	movw	r22, r16
     d64:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__divmodhi4>
     d68:	b7 01       	movw	r22, r14
     d6a:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__divmodhi4>
     d6e:	86 2f       	mov	r24, r22
     d70:	80 5d       	subi	r24, 0xD0	; 208
     d72:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
		// Display Tank2 cycle count tens
		LCDGotoXY(10,3);
     d76:	63 e0       	ldi	r22, 0x03	; 3
     d78:	8a e0       	ldi	r24, 0x0A	; 10
     d7a:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(((char)(int)'0'+(count_cycleKZN%100/10)));
     d7e:	99 2d       	mov	r25, r9
     d80:	e9 e2       	ldi	r30, 0x29	; 41
     d82:	9e 02       	muls	r25, r30
     d84:	81 2d       	mov	r24, r1
     d86:	11 24       	eor	r1, r1
     d88:	85 95       	asr	r24
     d8a:	85 95       	asr	r24
     d8c:	85 95       	asr	r24
     d8e:	85 95       	asr	r24
     d90:	19 2d       	mov	r17, r9
     d92:	11 0f       	add	r17, r17
     d94:	11 0b       	sbc	r17, r17
     d96:	81 1b       	sub	r24, r17
     d98:	85 9d       	mul	r24, r5
     d9a:	90 19       	sub	r25, r0
     d9c:	11 24       	eor	r1, r1
     d9e:	f7 e6       	ldi	r31, 0x67	; 103
     da0:	9f 02       	muls	r25, r31
     da2:	81 2d       	mov	r24, r1
     da4:	11 24       	eor	r1, r1
     da6:	85 95       	asr	r24
     da8:	85 95       	asr	r24
     daa:	97 fd       	sbrc	r25, 7
     dac:	83 95       	inc	r24
     dae:	80 5d       	subi	r24, 0xD0	; 208
     db0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
		// Display Tank2 cycle count ones
		LCDGotoXY(11,3);
     db4:	63 e0       	ldi	r22, 0x03	; 3
     db6:	8b e0       	ldi	r24, 0x0B	; 11
     db8:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(((char)(int)'0'+(count_cycleKZN%10)));
     dbc:	29 2d       	mov	r18, r9
     dbe:	97 e6       	ldi	r25, 0x67	; 103
     dc0:	29 02       	muls	r18, r25
     dc2:	81 2d       	mov	r24, r1
     dc4:	11 24       	eor	r1, r1
     dc6:	85 95       	asr	r24
     dc8:	85 95       	asr	r24
     dca:	81 1b       	sub	r24, r17
     dcc:	88 0f       	add	r24, r24
     dce:	98 2f       	mov	r25, r24
     dd0:	99 0f       	add	r25, r25
     dd2:	99 0f       	add	r25, r25
     dd4:	89 0f       	add	r24, r25
     dd6:	98 1a       	sub	r9, r24
     dd8:	89 2d       	mov	r24, r9
     dda:	80 5d       	subi	r24, 0xD0	; 208
     ddc:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>

		// Display Kyzen tank floating point gallon count
		LCDGotoXY(13,3);
     de0:	63 e0       	ldi	r22, 0x03	; 3
     de2:	8d e0       	ldi	r24, 0x0D	; 13
     de4:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDstring(KYgals,7);
     de8:	67 e0       	ldi	r22, 0x07	; 7
     dea:	c3 01       	movw	r24, r6
     dec:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCDstring>
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
}
     dfa:	2e 96       	adiw	r28, 0x0e	; 14
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	df 90       	pop	r13
     e14:	cf 90       	pop	r12
     e16:	bf 90       	pop	r11
     e18:	af 90       	pop	r10
     e1a:	9f 90       	pop	r9
     e1c:	8f 90       	pop	r8
     e1e:	7f 90       	pop	r7
     e20:	6f 90       	pop	r6
     e22:	5f 90       	pop	r5
     e24:	4f 90       	pop	r4
     e26:	08 95       	ret

00000e28 <ThresholdSelectDisplay>:
	LCDstring(localstring,1);
	
}

void ThresholdSelectDisplay(void)
{
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	a6 97       	sbiw	r28, 0x26	; 38
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
	static uint8_t tank;
	char DIThreshstring[18] = {};
     e48:	fe 01       	movw	r30, r28
     e4a:	31 96       	adiw	r30, 0x01	; 1
     e4c:	82 e1       	ldi	r24, 0x12	; 18
     e4e:	df 01       	movw	r26, r30
     e50:	1d 92       	st	X+, r1
     e52:	8a 95       	dec	r24
     e54:	e9 f7       	brne	.-6      	; 0xe50 <ThresholdSelectDisplay+0x28>
	char KYThreshstring[20] = {};
     e56:	fe 01       	movw	r30, r28
     e58:	73 96       	adiw	r30, 0x13	; 19
     e5a:	84 e1       	ldi	r24, 0x14	; 20
     e5c:	df 01       	movw	r26, r30
     e5e:	1d 92       	st	X+, r1
     e60:	8a 95       	dec	r24
     e62:	e9 f7       	brne	.-6      	; 0xe5e <ThresholdSelectDisplay+0x36>
	
	if(ENC.turnRight)
     e64:	80 91 3a 01 	lds	r24, 0x013A
     e68:	80 ff       	sbrs	r24, 0
     e6a:	38 c0       	rjmp	.+112    	; 0xedc <ThresholdSelectDisplay+0xb4>
	{
		// clear turn right flag
		ENC.turnRight = 0;
     e6c:	8e 7f       	andi	r24, 0xFE	; 254
     e6e:	80 93 3a 01 	sts	0x013A, r24
		if(tank == DItank)
     e72:	80 91 2e 01 	lds	r24, 0x012E
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	b9 f4       	brne	.+46     	; 0xea8 <ThresholdSelectDisplay+0x80>
		{
			FLOW_DIgalThreshold ++;
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e8       	ldi	r20, 0x80	; 128
     e80:	5f e3       	ldi	r21, 0x3F	; 63
     e82:	60 91 43 01 	lds	r22, 0x0143
     e86:	70 91 44 01 	lds	r23, 0x0144
     e8a:	80 91 45 01 	lds	r24, 0x0145
     e8e:	90 91 46 01 	lds	r25, 0x0146
     e92:	0e 94 5f 0b 	call	0x16be	; 0x16be <__addsf3>
     e96:	60 93 43 01 	sts	0x0143, r22
     e9a:	70 93 44 01 	sts	0x0144, r23
     e9e:	80 93 45 01 	sts	0x0145, r24
     ea2:	90 93 46 01 	sts	0x0146, r25
     ea6:	7e c0       	rjmp	.+252    	; 0xfa4 <ThresholdSelectDisplay+0x17c>
		}
		
		else if(tank == KYtank)
     ea8:	83 30       	cpi	r24, 0x03	; 3
     eaa:	09 f0       	breq	.+2      	; 0xeae <ThresholdSelectDisplay+0x86>
     eac:	7b c0       	rjmp	.+246    	; 0xfa4 <ThresholdSelectDisplay+0x17c>
		{
			FLOW_KYgalThreshold ++;
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e8       	ldi	r20, 0x80	; 128
     eb4:	5f e3       	ldi	r21, 0x3F	; 63
     eb6:	60 91 34 01 	lds	r22, 0x0134
     eba:	70 91 35 01 	lds	r23, 0x0135
     ebe:	80 91 36 01 	lds	r24, 0x0136
     ec2:	90 91 37 01 	lds	r25, 0x0137
     ec6:	0e 94 5f 0b 	call	0x16be	; 0x16be <__addsf3>
     eca:	60 93 34 01 	sts	0x0134, r22
     ece:	70 93 35 01 	sts	0x0135, r23
     ed2:	80 93 36 01 	sts	0x0136, r24
     ed6:	90 93 37 01 	sts	0x0137, r25
     eda:	64 c0       	rjmp	.+200    	; 0xfa4 <ThresholdSelectDisplay+0x17c>
		}
	}
	
	else if(ENC.turnLeft)
     edc:	81 ff       	sbrs	r24, 1
     ede:	62 c0       	rjmp	.+196    	; 0xfa4 <ThresholdSelectDisplay+0x17c>
	{
		// clear turn Left flag
		ENC.turnLeft = 0;
     ee0:	80 91 3a 01 	lds	r24, 0x013A
     ee4:	8d 7f       	andi	r24, 0xFD	; 253
     ee6:	80 93 3a 01 	sts	0x013A, r24
		if(tank == DItank)
     eea:	80 91 2e 01 	lds	r24, 0x012E
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	61 f5       	brne	.+88     	; 0xf4a <ThresholdSelectDisplay+0x122>
		{
			if (FLOW_DIgalThreshold >= 1)
     ef2:	c0 90 43 01 	lds	r12, 0x0143
     ef6:	d0 90 44 01 	lds	r13, 0x0144
     efa:	e0 90 45 01 	lds	r14, 0x0145
     efe:	f0 90 46 01 	lds	r15, 0x0146
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e8       	ldi	r20, 0x80	; 128
     f08:	5f e3       	ldi	r21, 0x3F	; 63
     f0a:	c7 01       	movw	r24, r14
     f0c:	b6 01       	movw	r22, r12
     f0e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__gesf2>
     f12:	88 23       	and	r24, r24
     f14:	8c f0       	brlt	.+34     	; 0xf38 <ThresholdSelectDisplay+0x110>
			{
				FLOW_DIgalThreshold --;
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e8       	ldi	r20, 0x80	; 128
     f1c:	5f e3       	ldi	r21, 0x3F	; 63
     f1e:	c7 01       	movw	r24, r14
     f20:	b6 01       	movw	r22, r12
     f22:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__subsf3>
     f26:	60 93 43 01 	sts	0x0143, r22
     f2a:	70 93 44 01 	sts	0x0144, r23
     f2e:	80 93 45 01 	sts	0x0145, r24
     f32:	90 93 46 01 	sts	0x0146, r25
     f36:	36 c0       	rjmp	.+108    	; 0xfa4 <ThresholdSelectDisplay+0x17c>
			}
			else
			{
				FLOW_DIgalThreshold = 0;
     f38:	10 92 43 01 	sts	0x0143, r1
     f3c:	10 92 44 01 	sts	0x0144, r1
     f40:	10 92 45 01 	sts	0x0145, r1
     f44:	10 92 46 01 	sts	0x0146, r1
     f48:	2d c0       	rjmp	.+90     	; 0xfa4 <ThresholdSelectDisplay+0x17c>
			}
			
		}
		
		else if(tank == KYtank)
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	59 f5       	brne	.+86     	; 0xfa4 <ThresholdSelectDisplay+0x17c>
		{
			if (FLOW_KYgalThreshold >= 1)
     f4e:	c0 90 34 01 	lds	r12, 0x0134
     f52:	d0 90 35 01 	lds	r13, 0x0135
     f56:	e0 90 36 01 	lds	r14, 0x0136
     f5a:	f0 90 37 01 	lds	r15, 0x0137
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	5f e3       	ldi	r21, 0x3F	; 63
     f66:	c7 01       	movw	r24, r14
     f68:	b6 01       	movw	r22, r12
     f6a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__gesf2>
     f6e:	88 23       	and	r24, r24
     f70:	8c f0       	brlt	.+34     	; 0xf94 <ThresholdSelectDisplay+0x16c>
			{
				FLOW_KYgalThreshold --;
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e8       	ldi	r20, 0x80	; 128
     f78:	5f e3       	ldi	r21, 0x3F	; 63
     f7a:	c7 01       	movw	r24, r14
     f7c:	b6 01       	movw	r22, r12
     f7e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__subsf3>
     f82:	60 93 34 01 	sts	0x0134, r22
     f86:	70 93 35 01 	sts	0x0135, r23
     f8a:	80 93 36 01 	sts	0x0136, r24
     f8e:	90 93 37 01 	sts	0x0137, r25
     f92:	08 c0       	rjmp	.+16     	; 0xfa4 <ThresholdSelectDisplay+0x17c>
			}
			else
			{
				FLOW_KYgalThreshold = 0;
     f94:	10 92 34 01 	sts	0x0134, r1
     f98:	10 92 35 01 	sts	0x0135, r1
     f9c:	10 92 36 01 	sts	0x0136, r1
     fa0:	10 92 37 01 	sts	0x0137, r1
			}
			
		}
	}
	
	if (swFlags.encswON && t.oneSecflg)
     fa4:	80 91 56 01 	lds	r24, 0x0156
     fa8:	82 ff       	sbrs	r24, 2
     faa:	10 c0       	rjmp	.+32     	; 0xfcc <ThresholdSelectDisplay+0x1a4>
     fac:	80 91 38 01 	lds	r24, 0x0138
     fb0:	84 ff       	sbrs	r24, 4
     fb2:	0c c0       	rjmp	.+24     	; 0xfcc <ThresholdSelectDisplay+0x1a4>
	{
		t.oneSecflg = 0;
     fb4:	8f 7e       	andi	r24, 0xEF	; 239
     fb6:	80 93 38 01 	sts	0x0138, r24
		tank = (tank == DItank)?KYtank:DItank;
     fba:	80 91 2e 01 	lds	r24, 0x012E
     fbe:	82 30       	cpi	r24, 0x02	; 2
     fc0:	11 f4       	brne	.+4      	; 0xfc6 <ThresholdSelectDisplay+0x19e>
     fc2:	83 e0       	ldi	r24, 0x03	; 3
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <ThresholdSelectDisplay+0x1a0>
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	80 93 2e 01 	sts	0x012E, r24
	}
	
	if ((tank == KYtank) && (state == STATE_thresholdmenu))
     fcc:	80 91 2e 01 	lds	r24, 0x012E
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	99 f4       	brne	.+38     	; 0xffa <ThresholdSelectDisplay+0x1d2>
     fd4:	80 91 48 01 	lds	r24, 0x0148
     fd8:	82 30       	cpi	r24, 0x02	; 2
     fda:	19 f5       	brne	.+70     	; 0x1022 <ThresholdSelectDisplay+0x1fa>
	{
		LCDGotoXY(0,2);
     fdc:	62 e0       	ldi	r22, 0x02	; 2
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(' ');
     fe4:	80 e2       	ldi	r24, 0x20	; 32
     fe6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
		LCDGotoXY(0,3);
     fea:	63 e0       	ldi	r22, 0x03	; 3
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(0b01111110);
     ff2:	8e e7       	ldi	r24, 0x7E	; 126
     ff4:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
     ff8:	14 c0       	rjmp	.+40     	; 0x1022 <ThresholdSelectDisplay+0x1fa>
		
	}
	else if ((tank == DItank) && (state == STATE_thresholdmenu))
     ffa:	82 30       	cpi	r24, 0x02	; 2
     ffc:	91 f4       	brne	.+36     	; 0x1022 <ThresholdSelectDisplay+0x1fa>
     ffe:	80 91 48 01 	lds	r24, 0x0148
    1002:	82 30       	cpi	r24, 0x02	; 2
    1004:	71 f4       	brne	.+28     	; 0x1022 <ThresholdSelectDisplay+0x1fa>
	{
		LCDGotoXY(0,2);
    1006:	62 e0       	ldi	r22, 0x02	; 2
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(0b01111110);
    100e:	8e e7       	ldi	r24, 0x7E	; 126
    1010:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
		LCDGotoXY(0,3);
    1014:	63 e0       	ldi	r22, 0x03	; 3
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(' ');
    101c:	80 e2       	ldi	r24, 0x20	; 32
    101e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
	}
	
	
	sprintf(DIThreshstring,"DI:%7.1f Gals.",FLOW_DIgalThreshold);
    1022:	80 91 46 01 	lds	r24, 0x0146
    1026:	8f 93       	push	r24
    1028:	80 91 45 01 	lds	r24, 0x0145
    102c:	8f 93       	push	r24
    102e:	80 91 44 01 	lds	r24, 0x0144
    1032:	8f 93       	push	r24
    1034:	80 91 43 01 	lds	r24, 0x0143
    1038:	8f 93       	push	r24
    103a:	8d e0       	ldi	r24, 0x0D	; 13
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	9f 93       	push	r25
    1040:	8f 93       	push	r24
    1042:	8e 01       	movw	r16, r28
    1044:	0f 5f       	subi	r16, 0xFF	; 255
    1046:	1f 4f       	sbci	r17, 0xFF	; 255
    1048:	1f 93       	push	r17
    104a:	0f 93       	push	r16
    104c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <sprintf>
	sprintf(KYThreshstring,"Kyzen:%7.1f Gals.",FLOW_KYgalThreshold);
    1050:	80 91 37 01 	lds	r24, 0x0137
    1054:	8f 93       	push	r24
    1056:	80 91 36 01 	lds	r24, 0x0136
    105a:	8f 93       	push	r24
    105c:	80 91 35 01 	lds	r24, 0x0135
    1060:	8f 93       	push	r24
    1062:	80 91 34 01 	lds	r24, 0x0134
    1066:	8f 93       	push	r24
    1068:	8c e1       	ldi	r24, 0x1C	; 28
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	9f 93       	push	r25
    106e:	8f 93       	push	r24
    1070:	7e 01       	movw	r14, r28
    1072:	b3 e1       	ldi	r27, 0x13	; 19
    1074:	eb 0e       	add	r14, r27
    1076:	f1 1c       	adc	r15, r1
    1078:	ff 92       	push	r15
    107a:	ef 92       	push	r14
    107c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <sprintf>
	CopyStringtoLCD(ThresholdSel,0,0);
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	86 e7       	ldi	r24, 0x76	; 118
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 c3 09 	call	0x1386	; 0x1386 <CopyStringtoLCD>
	CopyStringtoLCD(Menu,0,1);
    108c:	41 e0       	ldi	r20, 0x01	; 1
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	80 e7       	ldi	r24, 0x70	; 112
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 c3 09 	call	0x1386	; 0x1386 <CopyStringtoLCD>
	LCDGotoXY(4,2);
    1098:	62 e0       	ldi	r22, 0x02	; 2
    109a:	84 e0       	ldi	r24, 0x04	; 4
    109c:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
	LCDstring(DIThreshstring,16);
    10a0:	60 e1       	ldi	r22, 0x10	; 16
    10a2:	c8 01       	movw	r24, r16
    10a4:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCDstring>
	LCDGotoXY(1,3);
    10a8:	63 e0       	ldi	r22, 0x03	; 3
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
	LCDstring(KYThreshstring,19);
    10b0:	63 e1       	ldi	r22, 0x13	; 19
    10b2:	c7 01       	movw	r24, r14
    10b4:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCDstring>
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
	
}
    10c2:	a6 96       	adiw	r28, 0x26	; 38
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	df 90       	pop	r13
    10dc:	cf 90       	pop	r12
    10de:	08 95       	ret

000010e0 <Display_flow_animation>:

void Display_flow_animation(uint8_t activity)
{
	static uint8_t animation_increment;
	
	if (activity == ACTIVE)
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	b1 f4       	brne	.+44     	; 0x1110 <Display_flow_animation+0x30>
	{
		if(FLOW_indicator.active_toggle1s)
    10e4:	80 91 47 01 	lds	r24, 0x0147
    10e8:	81 ff       	sbrs	r24, 1
    10ea:	0a c0       	rjmp	.+20     	; 0x1100 <Display_flow_animation+0x20>
		{
			animation_increment = (animation_increment >= 8) ? 1 : animation_increment + 1;
    10ec:	80 91 2f 01 	lds	r24, 0x012F
    10f0:	88 30       	cpi	r24, 0x08	; 8
    10f2:	10 f4       	brcc	.+4      	; 0x10f8 <Display_flow_animation+0x18>
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <Display_flow_animation+0x1a>
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	80 93 2f 01 	sts	0x012F, r24
    10fe:	0d c0       	rjmp	.+26     	; 0x111a <Display_flow_animation+0x3a>
		}
		else
		{
			animation_increment = (animation_increment >= 8) ? 1 : animation_increment;
    1100:	80 91 2f 01 	lds	r24, 0x012F
    1104:	88 30       	cpi	r24, 0x08	; 8
    1106:	08 f0       	brcs	.+2      	; 0x110a <Display_flow_animation+0x2a>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	80 93 2f 01 	sts	0x012F, r24
    110e:	05 c0       	rjmp	.+10     	; 0x111a <Display_flow_animation+0x3a>
		}
		
	}
	else if(activity == INACTIVE)
    1110:	81 11       	cpse	r24, r1
    1112:	03 c0       	rjmp	.+6      	; 0x111a <Display_flow_animation+0x3a>
	{
		animation_increment = 10;
    1114:	8a e0       	ldi	r24, 0x0A	; 10
    1116:	80 93 2f 01 	sts	0x012F, r24
	}
	demoanimation(&animation_increment);
    111a:	8f e2       	ldi	r24, 0x2F	; 47
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	0e 94 6c 05 	call	0xad8	; 0xad8 <demoanimation>
    1122:	08 95       	ret

00001124 <Display_Tank_selector>:
}

void Display_Tank_selector(uint8_t activity)
{
	static uint8_t xcoord,ycoordA,ycoordB,tank;
	xcoord = 0;
    1124:	10 92 30 01 	sts	0x0130, r1
	if(ENC.turnRight || ENC.turnLeft)
    1128:	90 91 3a 01 	lds	r25, 0x013A
    112c:	93 70       	andi	r25, 0x03	; 3
    112e:	d9 f0       	breq	.+54     	; 0x1166 <Display_Tank_selector+0x42>
	{
		// If the encoder turns either way reset the flag
		// and switch the y coordinate between the lines the 
		// two tanks are on
		ENC.turnLeft = 0;
    1130:	90 91 3a 01 	lds	r25, 0x013A
		ENC.turnRight = 0;
    1134:	9d 7f       	andi	r25, 0xFD	; 253
    1136:	9e 7f       	andi	r25, 0xFE	; 254
    1138:	90 93 3a 01 	sts	0x013A, r25
		if (ycoordA == 2)
    113c:	90 91 31 01 	lds	r25, 0x0131
    1140:	92 30       	cpi	r25, 0x02	; 2
    1142:	49 f4       	brne	.+18     	; 0x1156 <Display_Tank_selector+0x32>
		{
			ycoordA = 3;
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	90 93 31 01 	sts	0x0131, r25
			ycoordB = 2;
    114a:	22 e0       	ldi	r18, 0x02	; 2
    114c:	20 93 32 01 	sts	0x0132, r18
			tank = KYtank;
    1150:	90 93 33 01 	sts	0x0133, r25
    1154:	08 c0       	rjmp	.+16     	; 0x1166 <Display_Tank_selector+0x42>
		}
		else
		{
			ycoordA = 2;
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	90 93 31 01 	sts	0x0131, r25
			ycoordB = 3;
    115c:	23 e0       	ldi	r18, 0x03	; 3
    115e:	20 93 32 01 	sts	0x0132, r18
			tank = DItank;
    1162:	90 93 33 01 	sts	0x0133, r25
		}
	}

	if (activity == ACTIVE)
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	a9 f5       	brne	.+106    	; 0x11d4 <Display_Tank_selector+0xb0>
	{
		LCDGotoXY(xcoord,ycoordA);
    116a:	60 91 31 01 	lds	r22, 0x0131
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(0b01111110);
    1174:	8e e7       	ldi	r24, 0x7E	; 126
    1176:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
		LCDGotoXY(xcoord,ycoordB);
    117a:	60 91 32 01 	lds	r22, 0x0132
    117e:	80 91 30 01 	lds	r24, 0x0130
    1182:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(' ');
    1186:	80 e2       	ldi	r24, 0x20	; 32
    1188:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
		// If encoder switch is pressed clear the selected
		// tank gallon counter
		if(swFlags.encswON)
    118c:	80 91 56 01 	lds	r24, 0x0156
    1190:	82 ff       	sbrs	r24, 2
    1192:	32 c0       	rjmp	.+100    	; 0x11f8 <Display_Tank_selector+0xd4>
		{
			if(tank == DItank)
    1194:	80 91 33 01 	lds	r24, 0x0133
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	69 f4       	brne	.+26     	; 0x11b6 <Display_Tank_selector+0x92>
			{
				FLOW_DIgals = 0;
    119c:	10 92 3d 01 	sts	0x013D, r1
    11a0:	10 92 3e 01 	sts	0x013E, r1
    11a4:	10 92 3f 01 	sts	0x013F, r1
    11a8:	10 92 40 01 	sts	0x0140, r1
				FLOW_DIcycles = 0;
    11ac:	10 92 3c 01 	sts	0x013C, r1
    11b0:	10 92 3b 01 	sts	0x013B, r1
    11b4:	08 95       	ret
			}
			else if (tank == KYtank)
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	f9 f4       	brne	.+62     	; 0x11f8 <Display_Tank_selector+0xd4>
			{
				FLOW_KYgals = 0;
    11ba:	10 92 57 01 	sts	0x0157, r1
    11be:	10 92 58 01 	sts	0x0158, r1
    11c2:	10 92 59 01 	sts	0x0159, r1
    11c6:	10 92 5a 01 	sts	0x015A, r1
				FLOW_KYcycles = 0;
    11ca:	10 92 42 01 	sts	0x0142, r1
    11ce:	10 92 41 01 	sts	0x0141, r1
    11d2:	08 95       	ret
			}
		}
	}

	else if (activity == INACTIVE)
    11d4:	81 11       	cpse	r24, r1
    11d6:	10 c0       	rjmp	.+32     	; 0x11f8 <Display_Tank_selector+0xd4>
	{
		LCDGotoXY(xcoord,ycoordA);
    11d8:	60 91 31 01 	lds	r22, 0x0131
    11dc:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(' ');
    11e0:	80 e2       	ldi	r24, 0x20	; 32
    11e2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
		LCDGotoXY(xcoord,ycoordB);
    11e6:	60 91 32 01 	lds	r22, 0x0132
    11ea:	80 91 30 01 	lds	r24, 0x0130
    11ee:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
		LCDsendChar(' ');
    11f2:	80 e2       	ldi	r24, 0x20	; 32
    11f4:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
    11f8:	08 95       	ret

000011fa <Display_Tank_Alert>:
{
	uint8_t DIxcoord = 12;
	uint8_t DIycoord = 2;
	uint8_t KYxcoord = 12;
	uint8_t KYycoord = 3;
	if (Tank == DItank)
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	21 f5       	brne	.+72     	; 0x1246 <Display_Tank_Alert+0x4c>
	{
		if (FLOW_DIgals >= FLOW_DIgalThreshold)
    11fe:	20 91 43 01 	lds	r18, 0x0143
    1202:	30 91 44 01 	lds	r19, 0x0144
    1206:	40 91 45 01 	lds	r20, 0x0145
    120a:	50 91 46 01 	lds	r21, 0x0146
    120e:	60 91 3d 01 	lds	r22, 0x013D
    1212:	70 91 3e 01 	lds	r23, 0x013E
    1216:	80 91 3f 01 	lds	r24, 0x013F
    121a:	90 91 40 01 	lds	r25, 0x0140
    121e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__gesf2>
    1222:	88 23       	and	r24, r24
    1224:	44 f0       	brlt	.+16     	; 0x1236 <Display_Tank_Alert+0x3c>
		{
			LCDGotoXY(DIxcoord,DIycoord);
    1226:	62 e0       	ldi	r22, 0x02	; 2
    1228:	8c e0       	ldi	r24, 0x0C	; 12
    122a:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
			LCDsendChar('!');
    122e:	81 e2       	ldi	r24, 0x21	; 33
    1230:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
    1234:	08 95       	ret
		}
		else 
		{
			LCDGotoXY(DIxcoord,DIycoord);
    1236:	62 e0       	ldi	r22, 0x02	; 2
    1238:	8c e0       	ldi	r24, 0x0C	; 12
    123a:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
			LCDsendChar(' ');
    123e:	80 e2       	ldi	r24, 0x20	; 32
    1240:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
    1244:	08 95       	ret
		}
		
	}
	if (Tank == KYtank)
    1246:	83 30       	cpi	r24, 0x03	; 3
    1248:	19 f5       	brne	.+70     	; 0x1290 <Display_Tank_Alert+0x96>
	{
		if (FLOW_KYgals >= FLOW_KYgalThreshold)
    124a:	20 91 34 01 	lds	r18, 0x0134
    124e:	30 91 35 01 	lds	r19, 0x0135
    1252:	40 91 36 01 	lds	r20, 0x0136
    1256:	50 91 37 01 	lds	r21, 0x0137
    125a:	60 91 57 01 	lds	r22, 0x0157
    125e:	70 91 58 01 	lds	r23, 0x0158
    1262:	80 91 59 01 	lds	r24, 0x0159
    1266:	90 91 5a 01 	lds	r25, 0x015A
    126a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__gesf2>
    126e:	88 23       	and	r24, r24
    1270:	44 f0       	brlt	.+16     	; 0x1282 <Display_Tank_Alert+0x88>
		{
			LCDGotoXY(KYxcoord,KYycoord);
    1272:	63 e0       	ldi	r22, 0x03	; 3
    1274:	8c e0       	ldi	r24, 0x0C	; 12
    1276:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
			LCDsendChar('!');
    127a:	81 e2       	ldi	r24, 0x21	; 33
    127c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
    1280:	08 95       	ret
		}
		else
		{
			LCDGotoXY(KYxcoord,KYycoord);
    1282:	63 e0       	ldi	r22, 0x03	; 3
    1284:	8c e0       	ldi	r24, 0x0C	; 12
    1286:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
			LCDsendChar(' ');
    128a:	80 e2       	ldi	r24, 0x20	; 32
    128c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
    1290:	08 95       	ret

00001292 <LCDMix_8Bit>:
}
#endif
#ifdef LCD_8BIT_M
static void LCDMix_8Bit(uint8_t data)
{
  if((data)&(0b10000000)) LDPD7 |=1<<LCD_D7;
    1292:	88 23       	and	r24, r24
    1294:	14 f4       	brge	.+4      	; 0x129a <LCDMix_8Bit+0x8>
    1296:	45 9a       	sbi	0x08, 5	; 8
    1298:	01 c0       	rjmp	.+2      	; 0x129c <LCDMix_8Bit+0xa>
    else LDPD7 &=~(1<<LCD_D7);
    129a:	45 98       	cbi	0x08, 5	; 8
  if((data)&(0b01000000)) LDPD6 |=1<<LCD_D6;
    129c:	86 ff       	sbrs	r24, 6
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <LCDMix_8Bit+0x12>
    12a0:	44 9a       	sbi	0x08, 4	; 8
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <LCDMix_8Bit+0x14>
    else LDPD6 &=~(1<<LCD_D6);
    12a4:	44 98       	cbi	0x08, 4	; 8
  if((data)&(0b00100000)) LDPD5 |=1<<LCD_D5;
    12a6:	85 ff       	sbrs	r24, 5
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <LCDMix_8Bit+0x1c>
    12aa:	43 9a       	sbi	0x08, 3	; 8
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <LCDMix_8Bit+0x1e>
    else LDPD5&=~(1<<LCD_D5);
    12ae:	43 98       	cbi	0x08, 3	; 8
  if((data)&(0b00010000)) LDPD4 |=1<<LCD_D4;
    12b0:	84 ff       	sbrs	r24, 4
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <LCDMix_8Bit+0x26>
    12b4:	42 9a       	sbi	0x08, 2	; 8
    12b6:	01 c0       	rjmp	.+2      	; 0x12ba <LCDMix_8Bit+0x28>
    else LDPD4 &=~(1<<LCD_D4);		
    12b8:	42 98       	cbi	0x08, 2	; 8
  if((data)&(0b00001000)) LDPD3 |=1<<LCD_D3;
    12ba:	83 ff       	sbrs	r24, 3
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <LCDMix_8Bit+0x30>
    12be:	41 9a       	sbi	0x08, 1	; 8
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <LCDMix_8Bit+0x32>
    else LDPD3 &=~(1<<LCD_D3);
    12c2:	41 98       	cbi	0x08, 1	; 8
  if((data)&(0b00000100)) LDPD2 |=1<<LCD_D2;
    12c4:	82 ff       	sbrs	r24, 2
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <LCDMix_8Bit+0x3a>
    12c8:	40 9a       	sbi	0x08, 0	; 8
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <LCDMix_8Bit+0x3c>
    else LDPD2 &=~(1<<LCD_D2);
    12cc:	40 98       	cbi	0x08, 0	; 8
  if((data)&(0b00000010)) LDPD1 |=1<<LCD_D1;
    12ce:	81 ff       	sbrs	r24, 1
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <LCDMix_8Bit+0x44>
    12d2:	5d 9a       	sbi	0x0b, 5	; 11
    12d4:	01 c0       	rjmp	.+2      	; 0x12d8 <LCDMix_8Bit+0x46>
    else LDPD1&=~(1<<LCD_D1);
    12d6:	5d 98       	cbi	0x0b, 5	; 11
  if((data)&(0b00000001)) LDPD0 |=1<<LCD_D0;
    12d8:	80 ff       	sbrs	r24, 0
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <LCDMix_8Bit+0x4e>
    12dc:	5e 9a       	sbi	0x0b, 6	; 11
    12de:	08 95       	ret
    else LDPD0 &=~(1<<LCD_D0);			
    12e0:	5e 98       	cbi	0x0b, 6	; 11
    12e2:	08 95       	ret

000012e4 <LCDsendChar>:
	LDPE &=~(1<<LCD_E);
	LDPRS &=~(1<<LCD_RS);
	_delay_ms(1);
#endif
#ifdef LCD_8BIT_M
	LCDMix_8Bit(ch);
    12e4:	0e 94 49 09 	call	0x1292	; 0x1292 <LCDMix_8Bit>
	LDPRS |=1<<LCD_RS;
    12e8:	2a 9a       	sbi	0x05, 2	; 5
	LDPE |=1<<LCD_E;		
    12ea:	5f 9a       	sbi	0x0b, 7	; 11
    12ec:	8f e9       	ldi	r24, 0x9F	; 159
    12ee:	9f e0       	ldi	r25, 0x0F	; 15
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <LCDsendChar+0xc>
    12f4:	00 c0       	rjmp	.+0      	; 0x12f6 <LCDsendChar+0x12>
    12f6:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
    12f8:	5f 98       	cbi	0x0b, 7	; 11
	LDPRS &=~(1<<LCD_RS);
    12fa:	2a 98       	cbi	0x05, 2	; 5
    12fc:	8f e9       	ldi	r24, 0x9F	; 159
    12fe:	9f e0       	ldi	r25, 0x0F	; 15
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <LCDsendChar+0x1c>
    1304:	00 c0       	rjmp	.+0      	; 0x1306 <LCDsendChar+0x22>
    1306:	00 00       	nop
    1308:	08 95       	ret

0000130a <LCDsendCommand>:
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
	_delay_ms(1);
#endif
#ifdef LCD_8BIT_M
	LCDMix_8Bit(cmd);
    130a:	0e 94 49 09 	call	0x1292	; 0x1292 <LCDMix_8Bit>
	LDPE |=1<<LCD_E;		
    130e:	5f 9a       	sbi	0x0b, 7	; 11
    1310:	8f e9       	ldi	r24, 0x9F	; 159
    1312:	9f e0       	ldi	r25, 0x0F	; 15
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <LCDsendCommand+0xa>
    1318:	00 c0       	rjmp	.+0      	; 0x131a <LCDsendCommand+0x10>
    131a:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
    131c:	5f 98       	cbi	0x0b, 7	; 11
    131e:	8f e9       	ldi	r24, 0x9F	; 159
    1320:	9f e0       	ldi	r25, 0x0F	; 15
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <LCDsendCommand+0x18>
    1326:	00 c0       	rjmp	.+0      	; 0x1328 <LCDsendCommand+0x1e>
    1328:	00 00       	nop
    132a:	08 95       	ret

0000132c <LCDclr>:
	_delay_ms(1);	
#endif
}		
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	0e 94 85 09 	call	0x130a	; 0x130a <LCDsendCommand>
    1332:	08 95       	ret

00001334 <LCDstring>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	79 f0       	breq	.+30     	; 0x135e <LCDstring+0x2a>

	// print data
	for(i=0; i<nBytes; i++)
    1340:	66 23       	and	r22, r22
    1342:	69 f0       	breq	.+26     	; 0x135e <LCDstring+0x2a>
    1344:	ec 01       	movw	r28, r24
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
    1346:	8c 01       	movw	r16, r24
    1348:	0f 5f       	subi	r16, 0xFF	; 255
    134a:	1f 4f       	sbci	r17, 0xFF	; 255
    134c:	61 50       	subi	r22, 0x01	; 1
    134e:	06 0f       	add	r16, r22
    1350:	11 1d       	adc	r17, r1
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    1352:	89 91       	ld	r24, Y+
    1354:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1358:	c0 17       	cp	r28, r16
    135a:	d1 07       	cpc	r29, r17
    135c:	d1 f7       	brne	.-12     	; 0x1352 <LCDstring+0x1e>
	{
		LCDsendChar(data[i]);
	}
}
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	08 95       	ret

00001368 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1368:	62 30       	cpi	r22, 0x02	; 2
    136a:	31 f0       	breq	.+12     	; 0x1378 <LCDGotoXY+0x10>
    136c:	63 30       	cpi	r22, 0x03	; 3
    136e:	31 f0       	breq	.+12     	; 0x137c <LCDGotoXY+0x14>
    1370:	61 30       	cpi	r22, 0x01	; 1
    1372:	29 f4       	brne	.+10     	; 0x137e <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1374:	80 5c       	subi	r24, 0xC0	; 192
    1376:	03 c0       	rjmp	.+6      	; 0x137e <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1378:	8c 5e       	subi	r24, 0xEC	; 236
    137a:	01 c0       	rjmp	.+2      	; 0x137e <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    137c:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    137e:	80 68       	ori	r24, 0x80	; 128
    1380:	0e 94 85 09 	call	0x130a	; 0x130a <LCDsendCommand>
    1384:	08 95       	ret

00001386 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	ec 01       	movw	r28, r24
    138e:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    1390:	64 2f       	mov	r22, r20
    1392:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1396:	9e 01       	movw	r18, r28
    1398:	fe 01       	movw	r30, r28
    139a:	84 91       	lpm	r24, Z
    139c:	88 23       	and	r24, r24
    139e:	69 f0       	breq	.+26     	; 0x13ba <CopyStringtoLCD+0x34>
    13a0:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    13a2:	f9 01       	movw	r30, r18
    13a4:	84 91       	lpm	r24, Z
    13a6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    13aa:	1f 5f       	subi	r17, 0xFF	; 255
    13ac:	9e 01       	movw	r18, r28
    13ae:	21 0f       	add	r18, r17
    13b0:	31 1d       	adc	r19, r1
    13b2:	f9 01       	movw	r30, r18
    13b4:	84 91       	lpm	r24, Z
    13b6:	81 11       	cpse	r24, r1
    13b8:	f4 cf       	rjmp	.-24     	; 0x13a2 <CopyStringtoLCD+0x1c>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	08 95       	ret

000013c2 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    13d0:	66 0f       	add	r22, r22
    13d2:	66 0f       	add	r22, r22
    13d4:	66 0f       	add	r22, r22
    13d6:	68 94       	set
    13d8:	ee 24       	eor	r14, r14
    13da:	e6 f8       	bld	r14, 6
    13dc:	e6 2a       	or	r14, r22
	for (i=0; i<8; i++){
    13de:	c0 e0       	ldi	r28, 0x00	; 0
    13e0:	d0 e0       	ldi	r29, 0x00	; 0
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    13e2:	f8 01       	movw	r30, r16
    13e4:	ec 0f       	add	r30, r28
    13e6:	fd 1f       	adc	r31, r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    13e8:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
    13ea:	8c 2f       	mov	r24, r28
    13ec:	8e 0d       	add	r24, r14
    13ee:	0e 94 85 09 	call	0x130a	; 0x130a <LCDsendCommand>
		LCDsendChar(pcc);
    13f2:	8f 2d       	mov	r24, r15
    13f4:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    13f8:	21 96       	adiw	r28, 0x01	; 1
    13fa:	c8 30       	cpi	r28, 0x08	; 8
    13fc:	d1 05       	cpc	r29, r1
    13fe:	89 f7       	brne	.-30     	; 0x13e2 <LCDdefinechar+0x20>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	08 95       	ret

0000140e <LCDinit>:
  if((data)&(0b00000001)) LDPD0 |=1<<LCD_D0;
    else LDPD0 &=~(1<<LCD_D0);			
}
#endif
void LCDinit(void)//Initializes LCD
{
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	8f e5       	ldi	r24, 0x5F	; 95
    1416:	9a ee       	ldi	r25, 0xEA	; 234
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <LCDinit+0xa>
    141c:	00 c0       	rjmp	.+0      	; 0x141e <LCDinit+0x10>
    141e:	00 00       	nop

#ifdef LCD_8BIT_M
	//8 mixed bits part
	_delay_ms(15);
	//zero to data pins
	LCDMix_8Bit(0b00000000);
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	0e 94 49 09 	call	0x1292	; 0x1292 <LCDMix_8Bit>
	//zero to control pins
	LDPRS &=~(1<<LCD_RS);
    1426:	2a 98       	cbi	0x05, 2	; 5
	LDPRW &=~(1<<LCD_RW);
    1428:	29 98       	cbi	0x05, 1	; 5
	LDPE &=~(1<<LCD_E);
    142a:	5f 98       	cbi	0x0b, 7	; 11
	//set data direction
	LDDD0 |=1<<LCD_D0;
    142c:	56 9a       	sbi	0x0a, 6	; 10
	LDDD1 |=1<<LCD_D1;
    142e:	55 9a       	sbi	0x0a, 5	; 10
	LDDD2 |=1<<LCD_D2;
    1430:	38 9a       	sbi	0x07, 0	; 7
	LDDD3 |=1<<LCD_D3;
    1432:	39 9a       	sbi	0x07, 1	; 7
	LDDD4 |=1<<LCD_D4;
    1434:	3a 9a       	sbi	0x07, 2	; 7
	LDDD5 |=1<<LCD_D5;
    1436:	3b 9a       	sbi	0x07, 3	; 7
	LDDD6 |=1<<LCD_D6;
    1438:	3c 9a       	sbi	0x07, 4	; 7
	LDDD7 |=1<<LCD_D7;
    143a:	3d 9a       	sbi	0x07, 5	; 7
	//control direction pins
	LDDRS |=1<<LCD_RS;
    143c:	22 9a       	sbi	0x04, 2	; 4
	LDDRW |=1<<LCD_RW;
    143e:	21 9a       	sbi	0x04, 1	; 4
	LDDE |=1<<LCD_E;
    1440:	57 9a       	sbi	0x0a, 7	; 10
   //---------one------
	LCDMix_8Bit(0b00110000);
    1442:	80 e3       	ldi	r24, 0x30	; 48
    1444:	0e 94 49 09 	call	0x1292	; 0x1292 <LCDMix_8Bit>
	/*LDPD4 |=1<<LCD_D4;
	LDPD5 |=1<<LCD_D5;*/
	LDPE |=1<<LCD_E;		
    1448:	5f 9a       	sbi	0x0b, 7	; 11
    144a:	8f e9       	ldi	r24, 0x9F	; 159
    144c:	9f e0       	ldi	r25, 0x0F	; 15
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <LCDinit+0x40>
    1452:	00 c0       	rjmp	.+0      	; 0x1454 <LCDinit+0x46>
    1454:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
    1456:	5f 98       	cbi	0x0b, 7	; 11
    1458:	8f e9       	ldi	r24, 0x9F	; 159
    145a:	9f e0       	ldi	r25, 0x0F	; 15
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <LCDinit+0x4e>
    1460:	00 c0       	rjmp	.+0      	; 0x1462 <LCDinit+0x54>
    1462:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDPE |=1<<LCD_E;		
    1464:	5f 9a       	sbi	0x0b, 7	; 11
    1466:	8f e9       	ldi	r24, 0x9F	; 159
    1468:	9f e0       	ldi	r25, 0x0F	; 15
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <LCDinit+0x5c>
    146e:	00 c0       	rjmp	.+0      	; 0x1470 <LCDinit+0x62>
    1470:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
    1472:	5f 98       	cbi	0x0b, 7	; 11
    1474:	8f e9       	ldi	r24, 0x9F	; 159
    1476:	9f e0       	ldi	r25, 0x0F	; 15
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <LCDinit+0x6a>
    147c:	00 c0       	rjmp	.+0      	; 0x147e <LCDinit+0x70>
    147e:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDPE |=1<<LCD_E;		
    1480:	5f 9a       	sbi	0x0b, 7	; 11
    1482:	8f e9       	ldi	r24, 0x9F	; 159
    1484:	9f e0       	ldi	r25, 0x0F	; 15
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <LCDinit+0x78>
    148a:	00 c0       	rjmp	.+0      	; 0x148c <LCDinit+0x7e>
    148c:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
    148e:	5f 98       	cbi	0x0b, 7	; 11
    1490:	8f e9       	ldi	r24, 0x9F	; 159
    1492:	9f e0       	ldi	r25, 0x0F	; 15
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <LCDinit+0x86>
    1498:	00 c0       	rjmp	.+0      	; 0x149a <LCDinit+0x8c>
    149a:	00 00       	nop
	_delay_ms(1);
	//--------8 bit dual line----------
	LCDsendCommand(0b00111000);
    149c:	88 e3       	ldi	r24, 0x38	; 56
    149e:	0e 94 85 09 	call	0x130a	; 0x130a <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    14a2:	8c e0       	ldi	r24, 0x0C	; 12
    14a4:	0e 94 85 09 	call	0x130a	; 0x130a <LCDsendCommand>
    14a8:	c0 ec       	ldi	r28, 0xC0	; 192
    14aa:	d0 e0       	ldi	r29, 0x00	; 0
#endif
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    14ac:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    14ae:	16 2f       	mov	r17, r22
    14b0:	1f 5f       	subi	r17, 0xFF	; 255
    14b2:	ce 01       	movw	r24, r28
    14b4:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <LCDdefinechar>
    14b8:	28 96       	adiw	r28, 0x08	; 8
    14ba:	61 2f       	mov	r22, r17
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
#endif
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    14bc:	18 30       	cpi	r17, 0x08	; 8
    14be:	b9 f7       	brne	.-18     	; 0x14ae <LCDinit+0xa0>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}
}	
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	08 95       	ret

000014c8 <LCDprogressBar>:
		LCDsendCommand(0x14);
	}
}
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    14c8:	bf 92       	push	r11
    14ca:	cf 92       	push	r12
    14cc:	df 92       	push	r13
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	f4 2e       	mov	r15, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    14dc:	24 2f       	mov	r18, r20
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	f9 01       	movw	r30, r18
    14e2:	ee 0f       	add	r30, r30
    14e4:	ff 1f       	adc	r31, r31
    14e6:	2e 0f       	add	r18, r30
    14e8:	3f 1f       	adc	r19, r31
    14ea:	22 0f       	add	r18, r18
    14ec:	33 1f       	adc	r19, r19
    14ee:	48 2f       	mov	r20, r24
    14f0:	42 9f       	mul	r20, r18
    14f2:	c0 01       	movw	r24, r0
    14f4:	43 9f       	mul	r20, r19
    14f6:	90 0d       	add	r25, r0
    14f8:	11 24       	eor	r1, r1
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__divmodhi4>
    1500:	e6 2f       	mov	r30, r22
    1502:	06 2f       	mov	r16, r22
    1504:	17 2f       	mov	r17, r23
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1506:	ff 20       	and	r15, r15
    1508:	71 f1       	breq	.+92     	; 0x1566 <LCDprogressBar+0x9e>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    150a:	26 2f       	mov	r18, r22
    150c:	37 2f       	mov	r19, r23
    150e:	ab ea       	ldi	r26, 0xAB	; 171
    1510:	ba ea       	ldi	r27, 0xAA	; 170
    1512:	0e 94 77 10 	call	0x20ee	; 0x20ee <__umulhisi3>
    1516:	96 95       	lsr	r25
    1518:	87 95       	ror	r24
    151a:	96 95       	lsr	r25
    151c:	87 95       	ror	r24
    151e:	ac 01       	movw	r20, r24
    1520:	44 0f       	add	r20, r20
    1522:	55 1f       	adc	r21, r21
    1524:	84 0f       	add	r24, r20
    1526:	95 1f       	adc	r25, r21
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	c0 e0       	ldi	r28, 0x00	; 0
    152e:	d0 e0       	ldi	r29, 0x00	; 0
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1530:	e1 2c       	mov	r14, r1
			}
		}
		else
		{
			// this is a full block
			c = 5;
    1532:	0f 2e       	mov	r0, r31
    1534:	f5 e0       	ldi	r31, 0x05	; 5
    1536:	df 2e       	mov	r13, r31
    1538:	f0 2d       	mov	r31, r0
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    153a:	be 2e       	mov	r11, r30
    153c:	b8 1a       	sub	r11, r24
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
    153e:	c1 2c       	mov	r12, r1
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1540:	ce 01       	movw	r24, r28
    1542:	05 96       	adiw	r24, 0x05	; 5
    1544:	08 17       	cp	r16, r24
    1546:	19 07       	cpc	r17, r25
    1548:	28 f4       	brcc	.+10     	; 0x1554 <LCDprogressBar+0x8c>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    154a:	0c 17       	cp	r16, r28
    154c:	1d 07       	cpc	r17, r29
    154e:	20 f4       	brcc	.+8      	; 0x1558 <LCDprogressBar+0x90>
			{
				// this is an empty block
				// use space character?
				c = 0;
    1550:	8c 2d       	mov	r24, r12
    1552:	03 c0       	rjmp	.+6      	; 0x155a <LCDprogressBar+0x92>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    1554:	8d 2d       	mov	r24, r13
    1556:	01 c0       	rjmp	.+2      	; 0x155a <LCDprogressBar+0x92>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    1558:	8b 2d       	mov	r24, r11
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    155a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    155e:	e3 94       	inc	r14
    1560:	26 96       	adiw	r28, 0x06	; 6
    1562:	ef 10       	cpse	r14, r15
    1564:	ed cf       	rjmp	.-38     	; 0x1540 <LCDprogressBar+0x78>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	bf 90       	pop	r11
    1578:	08 95       	ret

0000157a <main>:

#include "includes.h"

int main(void)
{
	init();				// Initialize general IO that is not otherwise contianed in its own lib
    157a:	0e 94 84 04 	call	0x908	; 0x908 <init>
	LCDinit();			// init LCD bit, dual line, cursor right
    157e:	0e 94 07 0a 	call	0x140e	; 0x140e <LCDinit>
	WelcomeMessage();	// Welcome Display
    1582:	0e 94 bb 05 	call	0xb76	; 0xb76 <WelcomeMessage>
	Encoder_init();		// init the encoder 
    1586:	0e 94 20 01 	call	0x240	; 0x240 <Encoder_init>
	FLOW_init();		// init the flow meter
    158a:	0e 94 a8 01 	call	0x350	; 0x350 <FLOW_init>
	statemachine_init();// init the statemachine 
    158e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <statemachine_init>
	LCDclr();			// clears LCD
    1592:	0e 94 96 09 	call	0x132c	; 0x132c <LCDclr>
	
	LCDclr();
    1596:	0e 94 96 09 	call	0x132c	; 0x132c <LCDclr>
	
	sei();
    159a:	78 94       	sei
	while(1)//loop demos
	{
		check_FLOW();
    159c:	0e 94 15 02 	call	0x42a	; 0x42a <check_FLOW>
		check_timers();
    15a0:	0e 94 87 03 	call	0x70e	; 0x70e <check_timers>
		check_SW_State();
    15a4:	0e 94 45 03 	call	0x68a	; 0x68a <check_SW_State>
		check_Alarm();
    15a8:	0e 94 1f 04 	call	0x83e	; 0x83e <check_Alarm>
		statemachine();
    15ac:	0e 94 4e 0b 	call	0x169c	; 0x169c <statemachine>
    15b0:	f5 cf       	rjmp	.-22     	; 0x159c <main+0x22>

000015b2 <statemachine_init>:


void statemachine_init(void)
{
	// Initialize the state
	state = STATE_mainmenu;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	80 93 48 01 	sts	0x0148, r24
    15b8:	08 95       	ret

000015ba <mainmenuState>:
			break;
	}
}

void mainmenuState(void)
{
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
	MainDisplay();
    15c2:	0e 94 c8 05 	call	0xb90	; 0xb90 <MainDisplay>
	InfoDisplay(FLOW_DIcycles,FLOW_KYcycles,FLOW_DIgals,FLOW_KYgals);
    15c6:	e0 90 57 01 	lds	r14, 0x0157
    15ca:	f0 90 58 01 	lds	r15, 0x0158
    15ce:	00 91 59 01 	lds	r16, 0x0159
    15d2:	10 91 5a 01 	lds	r17, 0x015A
    15d6:	20 91 3d 01 	lds	r18, 0x013D
    15da:	30 91 3e 01 	lds	r19, 0x013E
    15de:	40 91 3f 01 	lds	r20, 0x013F
    15e2:	50 91 40 01 	lds	r21, 0x0140
    15e6:	60 91 41 01 	lds	r22, 0x0141
    15ea:	80 91 3b 01 	lds	r24, 0x013B
    15ee:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <InfoDisplay>
	if ((FLOW_indicator.state == ACTIVE) && (FLOW_freq >= 10))
    15f2:	80 91 47 01 	lds	r24, 0x0147
    15f6:	82 ff       	sbrs	r24, 2
    15f8:	0a c0       	rjmp	.+20     	; 0x160e <mainmenuState+0x54>
    15fa:	80 91 51 01 	lds	r24, 0x0151
    15fe:	90 91 52 01 	lds	r25, 0x0152
    1602:	0a 97       	sbiw	r24, 0x0a	; 10
    1604:	20 f0       	brcs	.+8      	; 0x160e <mainmenuState+0x54>
	{
		// If the flow meter is active display the flow animation
		Display_flow_animation(ACTIVE);
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	0e 94 70 08 	call	0x10e0	; 0x10e0 <Display_flow_animation>
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <mainmenuState+0x5a>
	}
	else 
	{
		// If the flow meter is not active do not show animation
		Display_flow_animation(INACTIVE);
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	0e 94 70 08 	call	0x10e0	; 0x10e0 <Display_flow_animation>
	}
	
	// check hold state of tactile button to select and clear tank displays
	if (swFlags.tacthold)
    1614:	80 91 56 01 	lds	r24, 0x0156
    1618:	81 ff       	sbrs	r24, 1
    161a:	04 c0       	rjmp	.+8      	; 0x1624 <mainmenuState+0x6a>
	{
		Display_Tank_selector(ACTIVE);
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	0e 94 92 08 	call	0x1124	; 0x1124 <Display_Tank_selector>
    1622:	03 c0       	rjmp	.+6      	; 0x162a <mainmenuState+0x70>
	}
	else
	{
		Display_Tank_selector(INACTIVE);
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	0e 94 92 08 	call	0x1124	; 0x1124 <Display_Tank_selector>
	}

	// check hold state of encoder button to switch to threshold select display
	if(swFlags.enchold && !swFlags.tactswON)
    162a:	80 91 56 01 	lds	r24, 0x0156
    162e:	89 70       	andi	r24, 0x09	; 9
    1630:	88 30       	cpi	r24, 0x08	; 8
    1632:	99 f4       	brne	.+38     	; 0x165a <mainmenuState+0xa0>
	{
		// only encoder switch was held down
		state = STATE_thresholdmenu;
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	80 93 48 01 	sts	0x0148, r24
		S_LED_ON;
    163a:	5c 9a       	sbi	0x0b, 4	; 11
		// Initialize Encoder direction flags before going into Threshold display
		ENC.turnLeft = 0;
    163c:	80 91 3a 01 	lds	r24, 0x013A
		ENC.turnRight = 0;
    1640:	8d 7f       	andi	r24, 0xFD	; 253
    1642:	8e 7f       	andi	r24, 0xFE	; 254
    1644:	80 93 3a 01 	sts	0x013A, r24
		swFlags.tacthold = 0;
    1648:	80 91 56 01 	lds	r24, 0x0156
		swFlags.enchold = 0;
		swFlags.encswON = 0;
		swFlags.tactswON = 0;
    164c:	81 7f       	andi	r24, 0xF1	; 241
    164e:	8e 7f       	andi	r24, 0xFE	; 254
    1650:	80 93 56 01 	sts	0x0156, r24
		// clear lcd once before going to next display
		LCDclr();
    1654:	0e 94 96 09 	call	0x132c	; 0x132c <LCDclr>
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <mainmenuState+0xa6>
	}

	else
	{
		state = STATE_mainmenu;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	80 93 48 01 	sts	0x0148, r24
	}
}
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	ff 90       	pop	r15
    1666:	ef 90       	pop	r14
    1668:	08 95       	ret

0000166a <thresholdmenuState>:

void thresholdmenuState(void)
{
	ThresholdSelectDisplay();
    166a:	0e 94 14 07 	call	0xe28	; 0xe28 <ThresholdSelectDisplay>
	
	// Check hold state of tactile button to switch back to main display
	if(swFlags.tacthold)
    166e:	80 91 56 01 	lds	r24, 0x0156
    1672:	81 ff       	sbrs	r24, 1
    1674:	0f c0       	rjmp	.+30     	; 0x1694 <thresholdmenuState+0x2a>
	{
		eePROMsave(THRESH);
    1676:	83 e0       	ldi	r24, 0x03	; 3
    1678:	0e 94 b6 04 	call	0x96c	; 0x96c <eePROMsave>
		state = STATE_mainmenu;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 93 48 01 	sts	0x0148, r24
		// clear tact hold state so that it does not interfere with next state
		swFlags.tacthold = 0;
    1682:	80 91 56 01 	lds	r24, 0x0156
    1686:	8d 7f       	andi	r24, 0xFD	; 253
    1688:	80 93 56 01 	sts	0x0156, r24
		S_LED_OFF;
    168c:	5c 98       	cbi	0x0b, 4	; 11
		// clear once before transitioning to next display
		LCDclr();
    168e:	0e 94 96 09 	call	0x132c	; 0x132c <LCDclr>
    1692:	08 95       	ret
	}
	else
	{
		state = STATE_thresholdmenu;
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	80 93 48 01 	sts	0x0148, r24
    169a:	08 95       	ret

0000169c <statemachine>:
	state = STATE_mainmenu;
}

void statemachine (void)
{
	switch(state)
    169c:	80 91 48 01 	lds	r24, 0x0148
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	19 f0       	breq	.+6      	; 0x16aa <statemachine+0xe>
    16a4:	82 30       	cpi	r24, 0x02	; 2
    16a6:	39 f4       	brne	.+14     	; 0x16b6 <statemachine+0x1a>
    16a8:	03 c0       	rjmp	.+6      	; 0x16b0 <statemachine+0x14>
	{
		case(STATE_mainmenu):
			mainmenuState();
    16aa:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <mainmenuState>
			break;
    16ae:	08 95       	ret
		case(STATE_thresholdmenu):
			thresholdmenuState();
    16b0:	0e 94 35 0b 	call	0x166a	; 0x166a <thresholdmenuState>
			break;
    16b4:	08 95       	ret
		default:
			mainmenuState();
    16b6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <mainmenuState>
    16ba:	08 95       	ret

000016bc <__subsf3>:
    16bc:	50 58       	subi	r21, 0x80	; 128

000016be <__addsf3>:
    16be:	bb 27       	eor	r27, r27
    16c0:	aa 27       	eor	r26, r26
    16c2:	0e d0       	rcall	.+28     	; 0x16e0 <__addsf3x>
    16c4:	1c c1       	rjmp	.+568    	; 0x18fe <__fp_round>
    16c6:	0d d1       	rcall	.+538    	; 0x18e2 <__fp_pscA>
    16c8:	30 f0       	brcs	.+12     	; 0x16d6 <__addsf3+0x18>
    16ca:	12 d1       	rcall	.+548    	; 0x18f0 <__fp_pscB>
    16cc:	20 f0       	brcs	.+8      	; 0x16d6 <__addsf3+0x18>
    16ce:	31 f4       	brne	.+12     	; 0x16dc <__addsf3+0x1e>
    16d0:	9f 3f       	cpi	r25, 0xFF	; 255
    16d2:	11 f4       	brne	.+4      	; 0x16d8 <__addsf3+0x1a>
    16d4:	1e f4       	brtc	.+6      	; 0x16dc <__addsf3+0x1e>
    16d6:	02 c1       	rjmp	.+516    	; 0x18dc <__fp_nan>
    16d8:	0e f4       	brtc	.+2      	; 0x16dc <__addsf3+0x1e>
    16da:	e0 95       	com	r30
    16dc:	e7 fb       	bst	r30, 7
    16de:	f8 c0       	rjmp	.+496    	; 0x18d0 <__fp_inf>

000016e0 <__addsf3x>:
    16e0:	e9 2f       	mov	r30, r25
    16e2:	1e d1       	rcall	.+572    	; 0x1920 <__fp_split3>
    16e4:	80 f3       	brcs	.-32     	; 0x16c6 <__addsf3+0x8>
    16e6:	ba 17       	cp	r27, r26
    16e8:	62 07       	cpc	r22, r18
    16ea:	73 07       	cpc	r23, r19
    16ec:	84 07       	cpc	r24, r20
    16ee:	95 07       	cpc	r25, r21
    16f0:	18 f0       	brcs	.+6      	; 0x16f8 <__addsf3x+0x18>
    16f2:	71 f4       	brne	.+28     	; 0x1710 <__addsf3x+0x30>
    16f4:	9e f5       	brtc	.+102    	; 0x175c <__addsf3x+0x7c>
    16f6:	36 c1       	rjmp	.+620    	; 0x1964 <__fp_zero>
    16f8:	0e f4       	brtc	.+2      	; 0x16fc <__addsf3x+0x1c>
    16fa:	e0 95       	com	r30
    16fc:	0b 2e       	mov	r0, r27
    16fe:	ba 2f       	mov	r27, r26
    1700:	a0 2d       	mov	r26, r0
    1702:	0b 01       	movw	r0, r22
    1704:	b9 01       	movw	r22, r18
    1706:	90 01       	movw	r18, r0
    1708:	0c 01       	movw	r0, r24
    170a:	ca 01       	movw	r24, r20
    170c:	a0 01       	movw	r20, r0
    170e:	11 24       	eor	r1, r1
    1710:	ff 27       	eor	r31, r31
    1712:	59 1b       	sub	r21, r25
    1714:	99 f0       	breq	.+38     	; 0x173c <__addsf3x+0x5c>
    1716:	59 3f       	cpi	r21, 0xF9	; 249
    1718:	50 f4       	brcc	.+20     	; 0x172e <__addsf3x+0x4e>
    171a:	50 3e       	cpi	r21, 0xE0	; 224
    171c:	68 f1       	brcs	.+90     	; 0x1778 <__addsf3x+0x98>
    171e:	1a 16       	cp	r1, r26
    1720:	f0 40       	sbci	r31, 0x00	; 0
    1722:	a2 2f       	mov	r26, r18
    1724:	23 2f       	mov	r18, r19
    1726:	34 2f       	mov	r19, r20
    1728:	44 27       	eor	r20, r20
    172a:	58 5f       	subi	r21, 0xF8	; 248
    172c:	f3 cf       	rjmp	.-26     	; 0x1714 <__addsf3x+0x34>
    172e:	46 95       	lsr	r20
    1730:	37 95       	ror	r19
    1732:	27 95       	ror	r18
    1734:	a7 95       	ror	r26
    1736:	f0 40       	sbci	r31, 0x00	; 0
    1738:	53 95       	inc	r21
    173a:	c9 f7       	brne	.-14     	; 0x172e <__addsf3x+0x4e>
    173c:	7e f4       	brtc	.+30     	; 0x175c <__addsf3x+0x7c>
    173e:	1f 16       	cp	r1, r31
    1740:	ba 0b       	sbc	r27, r26
    1742:	62 0b       	sbc	r22, r18
    1744:	73 0b       	sbc	r23, r19
    1746:	84 0b       	sbc	r24, r20
    1748:	ba f0       	brmi	.+46     	; 0x1778 <__addsf3x+0x98>
    174a:	91 50       	subi	r25, 0x01	; 1
    174c:	a1 f0       	breq	.+40     	; 0x1776 <__addsf3x+0x96>
    174e:	ff 0f       	add	r31, r31
    1750:	bb 1f       	adc	r27, r27
    1752:	66 1f       	adc	r22, r22
    1754:	77 1f       	adc	r23, r23
    1756:	88 1f       	adc	r24, r24
    1758:	c2 f7       	brpl	.-16     	; 0x174a <__addsf3x+0x6a>
    175a:	0e c0       	rjmp	.+28     	; 0x1778 <__addsf3x+0x98>
    175c:	ba 0f       	add	r27, r26
    175e:	62 1f       	adc	r22, r18
    1760:	73 1f       	adc	r23, r19
    1762:	84 1f       	adc	r24, r20
    1764:	48 f4       	brcc	.+18     	; 0x1778 <__addsf3x+0x98>
    1766:	87 95       	ror	r24
    1768:	77 95       	ror	r23
    176a:	67 95       	ror	r22
    176c:	b7 95       	ror	r27
    176e:	f7 95       	ror	r31
    1770:	9e 3f       	cpi	r25, 0xFE	; 254
    1772:	08 f0       	brcs	.+2      	; 0x1776 <__addsf3x+0x96>
    1774:	b3 cf       	rjmp	.-154    	; 0x16dc <__addsf3+0x1e>
    1776:	93 95       	inc	r25
    1778:	88 0f       	add	r24, r24
    177a:	08 f0       	brcs	.+2      	; 0x177e <__addsf3x+0x9e>
    177c:	99 27       	eor	r25, r25
    177e:	ee 0f       	add	r30, r30
    1780:	97 95       	ror	r25
    1782:	87 95       	ror	r24
    1784:	08 95       	ret

00001786 <__divsf3>:
    1786:	0c d0       	rcall	.+24     	; 0x17a0 <__divsf3x>
    1788:	ba c0       	rjmp	.+372    	; 0x18fe <__fp_round>
    178a:	b2 d0       	rcall	.+356    	; 0x18f0 <__fp_pscB>
    178c:	40 f0       	brcs	.+16     	; 0x179e <__divsf3+0x18>
    178e:	a9 d0       	rcall	.+338    	; 0x18e2 <__fp_pscA>
    1790:	30 f0       	brcs	.+12     	; 0x179e <__divsf3+0x18>
    1792:	21 f4       	brne	.+8      	; 0x179c <__divsf3+0x16>
    1794:	5f 3f       	cpi	r21, 0xFF	; 255
    1796:	19 f0       	breq	.+6      	; 0x179e <__divsf3+0x18>
    1798:	9b c0       	rjmp	.+310    	; 0x18d0 <__fp_inf>
    179a:	51 11       	cpse	r21, r1
    179c:	e4 c0       	rjmp	.+456    	; 0x1966 <__fp_szero>
    179e:	9e c0       	rjmp	.+316    	; 0x18dc <__fp_nan>

000017a0 <__divsf3x>:
    17a0:	bf d0       	rcall	.+382    	; 0x1920 <__fp_split3>
    17a2:	98 f3       	brcs	.-26     	; 0x178a <__divsf3+0x4>

000017a4 <__divsf3_pse>:
    17a4:	99 23       	and	r25, r25
    17a6:	c9 f3       	breq	.-14     	; 0x179a <__divsf3+0x14>
    17a8:	55 23       	and	r21, r21
    17aa:	b1 f3       	breq	.-20     	; 0x1798 <__divsf3+0x12>
    17ac:	95 1b       	sub	r25, r21
    17ae:	55 0b       	sbc	r21, r21
    17b0:	bb 27       	eor	r27, r27
    17b2:	aa 27       	eor	r26, r26
    17b4:	62 17       	cp	r22, r18
    17b6:	73 07       	cpc	r23, r19
    17b8:	84 07       	cpc	r24, r20
    17ba:	38 f0       	brcs	.+14     	; 0x17ca <__divsf3_pse+0x26>
    17bc:	9f 5f       	subi	r25, 0xFF	; 255
    17be:	5f 4f       	sbci	r21, 0xFF	; 255
    17c0:	22 0f       	add	r18, r18
    17c2:	33 1f       	adc	r19, r19
    17c4:	44 1f       	adc	r20, r20
    17c6:	aa 1f       	adc	r26, r26
    17c8:	a9 f3       	breq	.-22     	; 0x17b4 <__divsf3_pse+0x10>
    17ca:	33 d0       	rcall	.+102    	; 0x1832 <__divsf3_pse+0x8e>
    17cc:	0e 2e       	mov	r0, r30
    17ce:	3a f0       	brmi	.+14     	; 0x17de <__divsf3_pse+0x3a>
    17d0:	e0 e8       	ldi	r30, 0x80	; 128
    17d2:	30 d0       	rcall	.+96     	; 0x1834 <__divsf3_pse+0x90>
    17d4:	91 50       	subi	r25, 0x01	; 1
    17d6:	50 40       	sbci	r21, 0x00	; 0
    17d8:	e6 95       	lsr	r30
    17da:	00 1c       	adc	r0, r0
    17dc:	ca f7       	brpl	.-14     	; 0x17d0 <__divsf3_pse+0x2c>
    17de:	29 d0       	rcall	.+82     	; 0x1832 <__divsf3_pse+0x8e>
    17e0:	fe 2f       	mov	r31, r30
    17e2:	27 d0       	rcall	.+78     	; 0x1832 <__divsf3_pse+0x8e>
    17e4:	66 0f       	add	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	88 1f       	adc	r24, r24
    17ea:	bb 1f       	adc	r27, r27
    17ec:	26 17       	cp	r18, r22
    17ee:	37 07       	cpc	r19, r23
    17f0:	48 07       	cpc	r20, r24
    17f2:	ab 07       	cpc	r26, r27
    17f4:	b0 e8       	ldi	r27, 0x80	; 128
    17f6:	09 f0       	breq	.+2      	; 0x17fa <__divsf3_pse+0x56>
    17f8:	bb 0b       	sbc	r27, r27
    17fa:	80 2d       	mov	r24, r0
    17fc:	bf 01       	movw	r22, r30
    17fe:	ff 27       	eor	r31, r31
    1800:	93 58       	subi	r25, 0x83	; 131
    1802:	5f 4f       	sbci	r21, 0xFF	; 255
    1804:	2a f0       	brmi	.+10     	; 0x1810 <__divsf3_pse+0x6c>
    1806:	9e 3f       	cpi	r25, 0xFE	; 254
    1808:	51 05       	cpc	r21, r1
    180a:	68 f0       	brcs	.+26     	; 0x1826 <__divsf3_pse+0x82>
    180c:	61 c0       	rjmp	.+194    	; 0x18d0 <__fp_inf>
    180e:	ab c0       	rjmp	.+342    	; 0x1966 <__fp_szero>
    1810:	5f 3f       	cpi	r21, 0xFF	; 255
    1812:	ec f3       	brlt	.-6      	; 0x180e <__divsf3_pse+0x6a>
    1814:	98 3e       	cpi	r25, 0xE8	; 232
    1816:	dc f3       	brlt	.-10     	; 0x180e <__divsf3_pse+0x6a>
    1818:	86 95       	lsr	r24
    181a:	77 95       	ror	r23
    181c:	67 95       	ror	r22
    181e:	b7 95       	ror	r27
    1820:	f7 95       	ror	r31
    1822:	9f 5f       	subi	r25, 0xFF	; 255
    1824:	c9 f7       	brne	.-14     	; 0x1818 <__divsf3_pse+0x74>
    1826:	88 0f       	add	r24, r24
    1828:	91 1d       	adc	r25, r1
    182a:	96 95       	lsr	r25
    182c:	87 95       	ror	r24
    182e:	97 f9       	bld	r25, 7
    1830:	08 95       	ret
    1832:	e1 e0       	ldi	r30, 0x01	; 1
    1834:	66 0f       	add	r22, r22
    1836:	77 1f       	adc	r23, r23
    1838:	88 1f       	adc	r24, r24
    183a:	bb 1f       	adc	r27, r27
    183c:	62 17       	cp	r22, r18
    183e:	73 07       	cpc	r23, r19
    1840:	84 07       	cpc	r24, r20
    1842:	ba 07       	cpc	r27, r26
    1844:	20 f0       	brcs	.+8      	; 0x184e <__divsf3_pse+0xaa>
    1846:	62 1b       	sub	r22, r18
    1848:	73 0b       	sbc	r23, r19
    184a:	84 0b       	sbc	r24, r20
    184c:	ba 0b       	sbc	r27, r26
    184e:	ee 1f       	adc	r30, r30
    1850:	88 f7       	brcc	.-30     	; 0x1834 <__divsf3_pse+0x90>
    1852:	e0 95       	com	r30
    1854:	08 95       	ret

00001856 <__floatunsisf>:
    1856:	e8 94       	clt
    1858:	09 c0       	rjmp	.+18     	; 0x186c <__floatsisf+0x12>

0000185a <__floatsisf>:
    185a:	97 fb       	bst	r25, 7
    185c:	3e f4       	brtc	.+14     	; 0x186c <__floatsisf+0x12>
    185e:	90 95       	com	r25
    1860:	80 95       	com	r24
    1862:	70 95       	com	r23
    1864:	61 95       	neg	r22
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	8f 4f       	sbci	r24, 0xFF	; 255
    186a:	9f 4f       	sbci	r25, 0xFF	; 255
    186c:	99 23       	and	r25, r25
    186e:	a9 f0       	breq	.+42     	; 0x189a <__floatsisf+0x40>
    1870:	f9 2f       	mov	r31, r25
    1872:	96 e9       	ldi	r25, 0x96	; 150
    1874:	bb 27       	eor	r27, r27
    1876:	93 95       	inc	r25
    1878:	f6 95       	lsr	r31
    187a:	87 95       	ror	r24
    187c:	77 95       	ror	r23
    187e:	67 95       	ror	r22
    1880:	b7 95       	ror	r27
    1882:	f1 11       	cpse	r31, r1
    1884:	f8 cf       	rjmp	.-16     	; 0x1876 <__floatsisf+0x1c>
    1886:	fa f4       	brpl	.+62     	; 0x18c6 <__floatsisf+0x6c>
    1888:	bb 0f       	add	r27, r27
    188a:	11 f4       	brne	.+4      	; 0x1890 <__floatsisf+0x36>
    188c:	60 ff       	sbrs	r22, 0
    188e:	1b c0       	rjmp	.+54     	; 0x18c6 <__floatsisf+0x6c>
    1890:	6f 5f       	subi	r22, 0xFF	; 255
    1892:	7f 4f       	sbci	r23, 0xFF	; 255
    1894:	8f 4f       	sbci	r24, 0xFF	; 255
    1896:	9f 4f       	sbci	r25, 0xFF	; 255
    1898:	16 c0       	rjmp	.+44     	; 0x18c6 <__floatsisf+0x6c>
    189a:	88 23       	and	r24, r24
    189c:	11 f0       	breq	.+4      	; 0x18a2 <__floatsisf+0x48>
    189e:	96 e9       	ldi	r25, 0x96	; 150
    18a0:	11 c0       	rjmp	.+34     	; 0x18c4 <__floatsisf+0x6a>
    18a2:	77 23       	and	r23, r23
    18a4:	21 f0       	breq	.+8      	; 0x18ae <__floatsisf+0x54>
    18a6:	9e e8       	ldi	r25, 0x8E	; 142
    18a8:	87 2f       	mov	r24, r23
    18aa:	76 2f       	mov	r23, r22
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <__floatsisf+0x5e>
    18ae:	66 23       	and	r22, r22
    18b0:	71 f0       	breq	.+28     	; 0x18ce <__floatsisf+0x74>
    18b2:	96 e8       	ldi	r25, 0x86	; 134
    18b4:	86 2f       	mov	r24, r22
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	2a f0       	brmi	.+10     	; 0x18c6 <__floatsisf+0x6c>
    18bc:	9a 95       	dec	r25
    18be:	66 0f       	add	r22, r22
    18c0:	77 1f       	adc	r23, r23
    18c2:	88 1f       	adc	r24, r24
    18c4:	da f7       	brpl	.-10     	; 0x18bc <__floatsisf+0x62>
    18c6:	88 0f       	add	r24, r24
    18c8:	96 95       	lsr	r25
    18ca:	87 95       	ror	r24
    18cc:	97 f9       	bld	r25, 7
    18ce:	08 95       	ret

000018d0 <__fp_inf>:
    18d0:	97 f9       	bld	r25, 7
    18d2:	9f 67       	ori	r25, 0x7F	; 127
    18d4:	80 e8       	ldi	r24, 0x80	; 128
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	08 95       	ret

000018dc <__fp_nan>:
    18dc:	9f ef       	ldi	r25, 0xFF	; 255
    18de:	80 ec       	ldi	r24, 0xC0	; 192
    18e0:	08 95       	ret

000018e2 <__fp_pscA>:
    18e2:	00 24       	eor	r0, r0
    18e4:	0a 94       	dec	r0
    18e6:	16 16       	cp	r1, r22
    18e8:	17 06       	cpc	r1, r23
    18ea:	18 06       	cpc	r1, r24
    18ec:	09 06       	cpc	r0, r25
    18ee:	08 95       	ret

000018f0 <__fp_pscB>:
    18f0:	00 24       	eor	r0, r0
    18f2:	0a 94       	dec	r0
    18f4:	12 16       	cp	r1, r18
    18f6:	13 06       	cpc	r1, r19
    18f8:	14 06       	cpc	r1, r20
    18fa:	05 06       	cpc	r0, r21
    18fc:	08 95       	ret

000018fe <__fp_round>:
    18fe:	09 2e       	mov	r0, r25
    1900:	03 94       	inc	r0
    1902:	00 0c       	add	r0, r0
    1904:	11 f4       	brne	.+4      	; 0x190a <__fp_round+0xc>
    1906:	88 23       	and	r24, r24
    1908:	52 f0       	brmi	.+20     	; 0x191e <__fp_round+0x20>
    190a:	bb 0f       	add	r27, r27
    190c:	40 f4       	brcc	.+16     	; 0x191e <__fp_round+0x20>
    190e:	bf 2b       	or	r27, r31
    1910:	11 f4       	brne	.+4      	; 0x1916 <__fp_round+0x18>
    1912:	60 ff       	sbrs	r22, 0
    1914:	04 c0       	rjmp	.+8      	; 0x191e <__fp_round+0x20>
    1916:	6f 5f       	subi	r22, 0xFF	; 255
    1918:	7f 4f       	sbci	r23, 0xFF	; 255
    191a:	8f 4f       	sbci	r24, 0xFF	; 255
    191c:	9f 4f       	sbci	r25, 0xFF	; 255
    191e:	08 95       	ret

00001920 <__fp_split3>:
    1920:	57 fd       	sbrc	r21, 7
    1922:	90 58       	subi	r25, 0x80	; 128
    1924:	44 0f       	add	r20, r20
    1926:	55 1f       	adc	r21, r21
    1928:	59 f0       	breq	.+22     	; 0x1940 <__fp_splitA+0x10>
    192a:	5f 3f       	cpi	r21, 0xFF	; 255
    192c:	71 f0       	breq	.+28     	; 0x194a <__fp_splitA+0x1a>
    192e:	47 95       	ror	r20

00001930 <__fp_splitA>:
    1930:	88 0f       	add	r24, r24
    1932:	97 fb       	bst	r25, 7
    1934:	99 1f       	adc	r25, r25
    1936:	61 f0       	breq	.+24     	; 0x1950 <__fp_splitA+0x20>
    1938:	9f 3f       	cpi	r25, 0xFF	; 255
    193a:	79 f0       	breq	.+30     	; 0x195a <__fp_splitA+0x2a>
    193c:	87 95       	ror	r24
    193e:	08 95       	ret
    1940:	12 16       	cp	r1, r18
    1942:	13 06       	cpc	r1, r19
    1944:	14 06       	cpc	r1, r20
    1946:	55 1f       	adc	r21, r21
    1948:	f2 cf       	rjmp	.-28     	; 0x192e <__fp_split3+0xe>
    194a:	46 95       	lsr	r20
    194c:	f1 df       	rcall	.-30     	; 0x1930 <__fp_splitA>
    194e:	08 c0       	rjmp	.+16     	; 0x1960 <__fp_splitA+0x30>
    1950:	16 16       	cp	r1, r22
    1952:	17 06       	cpc	r1, r23
    1954:	18 06       	cpc	r1, r24
    1956:	99 1f       	adc	r25, r25
    1958:	f1 cf       	rjmp	.-30     	; 0x193c <__fp_splitA+0xc>
    195a:	86 95       	lsr	r24
    195c:	71 05       	cpc	r23, r1
    195e:	61 05       	cpc	r22, r1
    1960:	08 94       	sec
    1962:	08 95       	ret

00001964 <__fp_zero>:
    1964:	e8 94       	clt

00001966 <__fp_szero>:
    1966:	bb 27       	eor	r27, r27
    1968:	66 27       	eor	r22, r22
    196a:	77 27       	eor	r23, r23
    196c:	cb 01       	movw	r24, r22
    196e:	97 f9       	bld	r25, 7
    1970:	08 95       	ret

00001972 <__gesf2>:
    1972:	03 d0       	rcall	.+6      	; 0x197a <__fp_cmp>
    1974:	08 f4       	brcc	.+2      	; 0x1978 <__gesf2+0x6>
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	08 95       	ret

0000197a <__fp_cmp>:
    197a:	99 0f       	add	r25, r25
    197c:	00 08       	sbc	r0, r0
    197e:	55 0f       	add	r21, r21
    1980:	aa 0b       	sbc	r26, r26
    1982:	e0 e8       	ldi	r30, 0x80	; 128
    1984:	fe ef       	ldi	r31, 0xFE	; 254
    1986:	16 16       	cp	r1, r22
    1988:	17 06       	cpc	r1, r23
    198a:	e8 07       	cpc	r30, r24
    198c:	f9 07       	cpc	r31, r25
    198e:	c0 f0       	brcs	.+48     	; 0x19c0 <__fp_cmp+0x46>
    1990:	12 16       	cp	r1, r18
    1992:	13 06       	cpc	r1, r19
    1994:	e4 07       	cpc	r30, r20
    1996:	f5 07       	cpc	r31, r21
    1998:	98 f0       	brcs	.+38     	; 0x19c0 <__fp_cmp+0x46>
    199a:	62 1b       	sub	r22, r18
    199c:	73 0b       	sbc	r23, r19
    199e:	84 0b       	sbc	r24, r20
    19a0:	95 0b       	sbc	r25, r21
    19a2:	39 f4       	brne	.+14     	; 0x19b2 <__fp_cmp+0x38>
    19a4:	0a 26       	eor	r0, r26
    19a6:	61 f0       	breq	.+24     	; 0x19c0 <__fp_cmp+0x46>
    19a8:	23 2b       	or	r18, r19
    19aa:	24 2b       	or	r18, r20
    19ac:	25 2b       	or	r18, r21
    19ae:	21 f4       	brne	.+8      	; 0x19b8 <__fp_cmp+0x3e>
    19b0:	08 95       	ret
    19b2:	0a 26       	eor	r0, r26
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <__fp_cmp+0x3e>
    19b6:	a1 40       	sbci	r26, 0x01	; 1
    19b8:	a6 95       	lsr	r26
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	81 1d       	adc	r24, r1
    19be:	81 1d       	adc	r24, r1
    19c0:	08 95       	ret

000019c2 <vfprintf>:
    19c2:	a2 e1       	ldi	r26, 0x12	; 18
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e7 ee       	ldi	r30, 0xE7	; 231
    19c8:	fc e0       	ldi	r31, 0x0C	; 12
    19ca:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__prologue_saves__>
    19ce:	7c 01       	movw	r14, r24
    19d0:	1b 01       	movw	r2, r22
    19d2:	6a 01       	movw	r12, r20
    19d4:	fc 01       	movw	r30, r24
    19d6:	17 82       	std	Z+7, r1	; 0x07
    19d8:	16 82       	std	Z+6, r1	; 0x06
    19da:	83 81       	ldd	r24, Z+3	; 0x03
    19dc:	81 fd       	sbrc	r24, 1
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <vfprintf+0x24>
    19e0:	6b c3       	rjmp	.+1750   	; 0x20b8 <vfprintf+0x6f6>
    19e2:	65 01       	movw	r12, r10
    19e4:	05 c0       	rjmp	.+10     	; 0x19f0 <vfprintf+0x2e>
    19e6:	88 24       	eor	r8, r8
    19e8:	83 94       	inc	r8
    19ea:	91 2c       	mov	r9, r1
    19ec:	8c 0e       	add	r8, r28
    19ee:	9d 1e       	adc	r9, r29
    19f0:	f7 01       	movw	r30, r14
    19f2:	93 81       	ldd	r25, Z+3	; 0x03
    19f4:	f1 01       	movw	r30, r2
    19f6:	93 fd       	sbrc	r25, 3
    19f8:	85 91       	lpm	r24, Z+
    19fa:	93 ff       	sbrs	r25, 3
    19fc:	81 91       	ld	r24, Z+
    19fe:	1f 01       	movw	r2, r30
    1a00:	88 23       	and	r24, r24
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <vfprintf+0x44>
    1a04:	55 c3       	rjmp	.+1706   	; 0x20b0 <vfprintf+0x6ee>
    1a06:	85 32       	cpi	r24, 0x25	; 37
    1a08:	39 f4       	brne	.+14     	; 0x1a18 <vfprintf+0x56>
    1a0a:	93 fd       	sbrc	r25, 3
    1a0c:	85 91       	lpm	r24, Z+
    1a0e:	93 ff       	sbrs	r25, 3
    1a10:	81 91       	ld	r24, Z+
    1a12:	1f 01       	movw	r2, r30
    1a14:	85 32       	cpi	r24, 0x25	; 37
    1a16:	31 f4       	brne	.+12     	; 0x1a24 <vfprintf+0x62>
    1a18:	b7 01       	movw	r22, r14
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1a20:	56 01       	movw	r10, r12
    1a22:	df cf       	rjmp	.-66     	; 0x19e2 <vfprintf+0x20>
    1a24:	71 2c       	mov	r7, r1
    1a26:	61 2c       	mov	r6, r1
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	20 32       	cpi	r18, 0x20	; 32
    1a2c:	a8 f4       	brcc	.+42     	; 0x1a58 <vfprintf+0x96>
    1a2e:	8b 32       	cpi	r24, 0x2B	; 43
    1a30:	61 f0       	breq	.+24     	; 0x1a4a <vfprintf+0x88>
    1a32:	28 f4       	brcc	.+10     	; 0x1a3e <vfprintf+0x7c>
    1a34:	80 32       	cpi	r24, 0x20	; 32
    1a36:	51 f0       	breq	.+20     	; 0x1a4c <vfprintf+0x8a>
    1a38:	83 32       	cpi	r24, 0x23	; 35
    1a3a:	71 f4       	brne	.+28     	; 0x1a58 <vfprintf+0x96>
    1a3c:	0b c0       	rjmp	.+22     	; 0x1a54 <vfprintf+0x92>
    1a3e:	8d 32       	cpi	r24, 0x2D	; 45
    1a40:	39 f0       	breq	.+14     	; 0x1a50 <vfprintf+0x8e>
    1a42:	80 33       	cpi	r24, 0x30	; 48
    1a44:	49 f4       	brne	.+18     	; 0x1a58 <vfprintf+0x96>
    1a46:	21 60       	ori	r18, 0x01	; 1
    1a48:	28 c0       	rjmp	.+80     	; 0x1a9a <vfprintf+0xd8>
    1a4a:	22 60       	ori	r18, 0x02	; 2
    1a4c:	24 60       	ori	r18, 0x04	; 4
    1a4e:	25 c0       	rjmp	.+74     	; 0x1a9a <vfprintf+0xd8>
    1a50:	28 60       	ori	r18, 0x08	; 8
    1a52:	23 c0       	rjmp	.+70     	; 0x1a9a <vfprintf+0xd8>
    1a54:	20 61       	ori	r18, 0x10	; 16
    1a56:	21 c0       	rjmp	.+66     	; 0x1a9a <vfprintf+0xd8>
    1a58:	27 fd       	sbrc	r18, 7
    1a5a:	27 c0       	rjmp	.+78     	; 0x1aaa <vfprintf+0xe8>
    1a5c:	38 2f       	mov	r19, r24
    1a5e:	30 53       	subi	r19, 0x30	; 48
    1a60:	3a 30       	cpi	r19, 0x0A	; 10
    1a62:	78 f4       	brcc	.+30     	; 0x1a82 <vfprintf+0xc0>
    1a64:	26 ff       	sbrs	r18, 6
    1a66:	06 c0       	rjmp	.+12     	; 0x1a74 <vfprintf+0xb2>
    1a68:	fa e0       	ldi	r31, 0x0A	; 10
    1a6a:	7f 9e       	mul	r7, r31
    1a6c:	30 0d       	add	r19, r0
    1a6e:	11 24       	eor	r1, r1
    1a70:	73 2e       	mov	r7, r19
    1a72:	13 c0       	rjmp	.+38     	; 0x1a9a <vfprintf+0xd8>
    1a74:	4a e0       	ldi	r20, 0x0A	; 10
    1a76:	64 9e       	mul	r6, r20
    1a78:	30 0d       	add	r19, r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	63 2e       	mov	r6, r19
    1a7e:	20 62       	ori	r18, 0x20	; 32
    1a80:	0c c0       	rjmp	.+24     	; 0x1a9a <vfprintf+0xd8>
    1a82:	8e 32       	cpi	r24, 0x2E	; 46
    1a84:	21 f4       	brne	.+8      	; 0x1a8e <vfprintf+0xcc>
    1a86:	26 fd       	sbrc	r18, 6
    1a88:	13 c3       	rjmp	.+1574   	; 0x20b0 <vfprintf+0x6ee>
    1a8a:	20 64       	ori	r18, 0x40	; 64
    1a8c:	06 c0       	rjmp	.+12     	; 0x1a9a <vfprintf+0xd8>
    1a8e:	8c 36       	cpi	r24, 0x6C	; 108
    1a90:	11 f4       	brne	.+4      	; 0x1a96 <vfprintf+0xd4>
    1a92:	20 68       	ori	r18, 0x80	; 128
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <vfprintf+0xd8>
    1a96:	88 36       	cpi	r24, 0x68	; 104
    1a98:	41 f4       	brne	.+16     	; 0x1aaa <vfprintf+0xe8>
    1a9a:	f1 01       	movw	r30, r2
    1a9c:	93 fd       	sbrc	r25, 3
    1a9e:	85 91       	lpm	r24, Z+
    1aa0:	93 ff       	sbrs	r25, 3
    1aa2:	81 91       	ld	r24, Z+
    1aa4:	1f 01       	movw	r2, r30
    1aa6:	81 11       	cpse	r24, r1
    1aa8:	c0 cf       	rjmp	.-128    	; 0x1a2a <vfprintf+0x68>
    1aaa:	98 2f       	mov	r25, r24
    1aac:	95 54       	subi	r25, 0x45	; 69
    1aae:	93 30       	cpi	r25, 0x03	; 3
    1ab0:	18 f4       	brcc	.+6      	; 0x1ab8 <vfprintf+0xf6>
    1ab2:	20 61       	ori	r18, 0x10	; 16
    1ab4:	80 5e       	subi	r24, 0xE0	; 224
    1ab6:	06 c0       	rjmp	.+12     	; 0x1ac4 <vfprintf+0x102>
    1ab8:	98 2f       	mov	r25, r24
    1aba:	95 56       	subi	r25, 0x65	; 101
    1abc:	93 30       	cpi	r25, 0x03	; 3
    1abe:	08 f0       	brcs	.+2      	; 0x1ac2 <vfprintf+0x100>
    1ac0:	a4 c1       	rjmp	.+840    	; 0x1e0a <vfprintf+0x448>
    1ac2:	2f 7e       	andi	r18, 0xEF	; 239
    1ac4:	26 fd       	sbrc	r18, 6
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <vfprintf+0x10a>
    1ac8:	16 e0       	ldi	r17, 0x06	; 6
    1aca:	71 2e       	mov	r7, r17
    1acc:	bf e3       	ldi	r27, 0x3F	; 63
    1ace:	5b 2e       	mov	r5, r27
    1ad0:	52 22       	and	r5, r18
    1ad2:	85 36       	cpi	r24, 0x65	; 101
    1ad4:	19 f4       	brne	.+6      	; 0x1adc <vfprintf+0x11a>
    1ad6:	f0 e4       	ldi	r31, 0x40	; 64
    1ad8:	5f 2a       	or	r5, r31
    1ada:	07 c0       	rjmp	.+14     	; 0x1aea <vfprintf+0x128>
    1adc:	86 36       	cpi	r24, 0x66	; 102
    1ade:	19 f4       	brne	.+6      	; 0x1ae6 <vfprintf+0x124>
    1ae0:	40 e8       	ldi	r20, 0x80	; 128
    1ae2:	54 2a       	or	r5, r20
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <vfprintf+0x128>
    1ae6:	71 10       	cpse	r7, r1
    1ae8:	7a 94       	dec	r7
    1aea:	57 fe       	sbrs	r5, 7
    1aec:	07 c0       	rjmp	.+14     	; 0x1afc <vfprintf+0x13a>
    1aee:	5b e3       	ldi	r21, 0x3B	; 59
    1af0:	57 15       	cp	r21, r7
    1af2:	48 f0       	brcs	.+18     	; 0x1b06 <vfprintf+0x144>
    1af4:	47 2c       	mov	r4, r7
    1af6:	43 94       	inc	r4
    1af8:	27 e0       	ldi	r18, 0x07	; 7
    1afa:	0d c0       	rjmp	.+26     	; 0x1b16 <vfprintf+0x154>
    1afc:	87 e0       	ldi	r24, 0x07	; 7
    1afe:	87 15       	cp	r24, r7
    1b00:	30 f0       	brcs	.+12     	; 0x1b0e <vfprintf+0x14c>
    1b02:	27 2d       	mov	r18, r7
    1b04:	07 c0       	rjmp	.+14     	; 0x1b14 <vfprintf+0x152>
    1b06:	27 e0       	ldi	r18, 0x07	; 7
    1b08:	ac e3       	ldi	r26, 0x3C	; 60
    1b0a:	4a 2e       	mov	r4, r26
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <vfprintf+0x154>
    1b0e:	27 e0       	ldi	r18, 0x07	; 7
    1b10:	f7 e0       	ldi	r31, 0x07	; 7
    1b12:	7f 2e       	mov	r7, r31
    1b14:	41 2c       	mov	r4, r1
    1b16:	56 01       	movw	r10, r12
    1b18:	94 e0       	ldi	r25, 0x04	; 4
    1b1a:	a9 0e       	add	r10, r25
    1b1c:	b1 1c       	adc	r11, r1
    1b1e:	f6 01       	movw	r30, r12
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	04 2d       	mov	r16, r4
    1b2a:	a4 01       	movw	r20, r8
    1b2c:	0e 94 ce 10 	call	0x219c	; 0x219c <__ftoa_engine>
    1b30:	8c 01       	movw	r16, r24
    1b32:	49 81       	ldd	r20, Y+1	; 0x01
    1b34:	4c 87       	std	Y+12, r20	; 0x0c
    1b36:	40 ff       	sbrs	r20, 0
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <vfprintf+0x17c>
    1b3a:	43 ff       	sbrs	r20, 3
    1b3c:	07 c0       	rjmp	.+14     	; 0x1b4c <vfprintf+0x18a>
    1b3e:	51 fc       	sbrc	r5, 1
    1b40:	08 c0       	rjmp	.+16     	; 0x1b52 <vfprintf+0x190>
    1b42:	52 fe       	sbrs	r5, 2
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <vfprintf+0x196>
    1b46:	e0 e2       	ldi	r30, 0x20	; 32
    1b48:	de 2e       	mov	r13, r30
    1b4a:	07 c0       	rjmp	.+14     	; 0x1b5a <vfprintf+0x198>
    1b4c:	7d e2       	ldi	r23, 0x2D	; 45
    1b4e:	d7 2e       	mov	r13, r23
    1b50:	04 c0       	rjmp	.+8      	; 0x1b5a <vfprintf+0x198>
    1b52:	6b e2       	ldi	r22, 0x2B	; 43
    1b54:	d6 2e       	mov	r13, r22
    1b56:	01 c0       	rjmp	.+2      	; 0x1b5a <vfprintf+0x198>
    1b58:	d1 2c       	mov	r13, r1
    1b5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b5c:	8c 70       	andi	r24, 0x0C	; 12
    1b5e:	a1 f1       	breq	.+104    	; 0x1bc8 <vfprintf+0x206>
    1b60:	dd 20       	and	r13, r13
    1b62:	11 f0       	breq	.+4      	; 0x1b68 <vfprintf+0x1a6>
    1b64:	84 e0       	ldi	r24, 0x04	; 4
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <vfprintf+0x1a8>
    1b68:	83 e0       	ldi	r24, 0x03	; 3
    1b6a:	86 15       	cp	r24, r6
    1b6c:	10 f0       	brcs	.+4      	; 0x1b72 <vfprintf+0x1b0>
    1b6e:	61 2c       	mov	r6, r1
    1b70:	0b c0       	rjmp	.+22     	; 0x1b88 <vfprintf+0x1c6>
    1b72:	68 1a       	sub	r6, r24
    1b74:	53 fc       	sbrc	r5, 3
    1b76:	08 c0       	rjmp	.+16     	; 0x1b88 <vfprintf+0x1c6>
    1b78:	b7 01       	movw	r22, r14
    1b7a:	80 e2       	ldi	r24, 0x20	; 32
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1b82:	6a 94       	dec	r6
    1b84:	c9 f7       	brne	.-14     	; 0x1b78 <vfprintf+0x1b6>
    1b86:	f3 cf       	rjmp	.-26     	; 0x1b6e <vfprintf+0x1ac>
    1b88:	dd 20       	and	r13, r13
    1b8a:	29 f0       	breq	.+10     	; 0x1b96 <vfprintf+0x1d4>
    1b8c:	b7 01       	movw	r22, r14
    1b8e:	8d 2d       	mov	r24, r13
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1b96:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b98:	53 fd       	sbrc	r21, 3
    1b9a:	03 c0       	rjmp	.+6      	; 0x1ba2 <vfprintf+0x1e0>
    1b9c:	04 e0       	ldi	r16, 0x04	; 4
    1b9e:	11 e0       	ldi	r17, 0x01	; 1
    1ba0:	0c c0       	rjmp	.+24     	; 0x1bba <vfprintf+0x1f8>
    1ba2:	00 e0       	ldi	r16, 0x00	; 0
    1ba4:	11 e0       	ldi	r17, 0x01	; 1
    1ba6:	09 c0       	rjmp	.+18     	; 0x1bba <vfprintf+0x1f8>
    1ba8:	51 10       	cpse	r5, r1
    1baa:	80 52       	subi	r24, 0x20	; 32
    1bac:	b7 01       	movw	r22, r14
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1bb4:	0f 5f       	subi	r16, 0xFF	; 255
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <vfprintf+0x1fc>
    1bba:	80 e1       	ldi	r24, 0x10	; 16
    1bbc:	58 22       	and	r5, r24
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	84 91       	lpm	r24, Z
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	f1 cf       	rjmp	.-30     	; 0x1ba8 <vfprintf+0x1e6>
    1bc6:	71 c2       	rjmp	.+1250   	; 0x20aa <vfprintf+0x6e8>
    1bc8:	57 fe       	sbrs	r5, 7
    1bca:	0e c0       	rjmp	.+28     	; 0x1be8 <vfprintf+0x226>
    1bcc:	40 0e       	add	r4, r16
    1bce:	4c 85       	ldd	r20, Y+12	; 0x0c
    1bd0:	44 ff       	sbrs	r20, 4
    1bd2:	04 c0       	rjmp	.+8      	; 0x1bdc <vfprintf+0x21a>
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	81 33       	cpi	r24, 0x31	; 49
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <vfprintf+0x21a>
    1bda:	4a 94       	dec	r4
    1bdc:	14 14       	cp	r1, r4
    1bde:	4c f5       	brge	.+82     	; 0x1c32 <vfprintf+0x270>
    1be0:	58 e0       	ldi	r21, 0x08	; 8
    1be2:	54 15       	cp	r21, r4
    1be4:	48 f1       	brcs	.+82     	; 0x1c38 <vfprintf+0x276>
    1be6:	2c c0       	rjmp	.+88     	; 0x1c40 <vfprintf+0x27e>
    1be8:	56 fc       	sbrc	r5, 6
    1bea:	2a c0       	rjmp	.+84     	; 0x1c40 <vfprintf+0x27e>
    1bec:	87 2d       	mov	r24, r7
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	80 17       	cp	r24, r16
    1bf2:	91 07       	cpc	r25, r17
    1bf4:	44 f0       	brlt	.+16     	; 0x1c06 <vfprintf+0x244>
    1bf6:	0c 3f       	cpi	r16, 0xFC	; 252
    1bf8:	8f ef       	ldi	r24, 0xFF	; 255
    1bfa:	18 07       	cpc	r17, r24
    1bfc:	24 f0       	brlt	.+8      	; 0x1c06 <vfprintf+0x244>
    1bfe:	90 e8       	ldi	r25, 0x80	; 128
    1c00:	59 2a       	or	r5, r25
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <vfprintf+0x244>
    1c04:	7a 94       	dec	r7
    1c06:	77 20       	and	r7, r7
    1c08:	49 f0       	breq	.+18     	; 0x1c1c <vfprintf+0x25a>
    1c0a:	e2 e0       	ldi	r30, 0x02	; 2
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	ec 0f       	add	r30, r28
    1c10:	fd 1f       	adc	r31, r29
    1c12:	e7 0d       	add	r30, r7
    1c14:	f1 1d       	adc	r31, r1
    1c16:	80 81       	ld	r24, Z
    1c18:	80 33       	cpi	r24, 0x30	; 48
    1c1a:	a1 f3       	breq	.-24     	; 0x1c04 <vfprintf+0x242>
    1c1c:	57 fe       	sbrs	r5, 7
    1c1e:	10 c0       	rjmp	.+32     	; 0x1c40 <vfprintf+0x27e>
    1c20:	47 2c       	mov	r4, r7
    1c22:	43 94       	inc	r4
    1c24:	87 2d       	mov	r24, r7
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	08 17       	cp	r16, r24
    1c2a:	19 07       	cpc	r17, r25
    1c2c:	44 f4       	brge	.+16     	; 0x1c3e <vfprintf+0x27c>
    1c2e:	70 1a       	sub	r7, r16
    1c30:	07 c0       	rjmp	.+14     	; 0x1c40 <vfprintf+0x27e>
    1c32:	44 24       	eor	r4, r4
    1c34:	43 94       	inc	r4
    1c36:	04 c0       	rjmp	.+8      	; 0x1c40 <vfprintf+0x27e>
    1c38:	58 e0       	ldi	r21, 0x08	; 8
    1c3a:	45 2e       	mov	r4, r21
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <vfprintf+0x27e>
    1c3e:	71 2c       	mov	r7, r1
    1c40:	57 fe       	sbrs	r5, 7
    1c42:	07 c0       	rjmp	.+14     	; 0x1c52 <vfprintf+0x290>
    1c44:	10 16       	cp	r1, r16
    1c46:	11 06       	cpc	r1, r17
    1c48:	3c f4       	brge	.+14     	; 0x1c58 <vfprintf+0x296>
    1c4a:	98 01       	movw	r18, r16
    1c4c:	2f 5f       	subi	r18, 0xFF	; 255
    1c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c50:	05 c0       	rjmp	.+10     	; 0x1c5c <vfprintf+0x29a>
    1c52:	25 e0       	ldi	r18, 0x05	; 5
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <vfprintf+0x29a>
    1c58:	21 e0       	ldi	r18, 0x01	; 1
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	dd 20       	and	r13, r13
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <vfprintf+0x2a2>
    1c60:	2f 5f       	subi	r18, 0xFF	; 255
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
    1c64:	77 20       	and	r7, r7
    1c66:	31 f0       	breq	.+12     	; 0x1c74 <vfprintf+0x2b2>
    1c68:	47 2d       	mov	r20, r7
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	4f 5f       	subi	r20, 0xFF	; 255
    1c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c70:	24 0f       	add	r18, r20
    1c72:	35 1f       	adc	r19, r21
    1c74:	46 2d       	mov	r20, r6
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	24 17       	cp	r18, r20
    1c7a:	35 07       	cpc	r19, r21
    1c7c:	14 f4       	brge	.+4      	; 0x1c82 <vfprintf+0x2c0>
    1c7e:	62 1a       	sub	r6, r18
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <vfprintf+0x2c2>
    1c82:	61 2c       	mov	r6, r1
    1c84:	85 2d       	mov	r24, r5
    1c86:	89 70       	andi	r24, 0x09	; 9
    1c88:	49 f4       	brne	.+18     	; 0x1c9c <vfprintf+0x2da>
    1c8a:	06 c0       	rjmp	.+12     	; 0x1c98 <vfprintf+0x2d6>
    1c8c:	b7 01       	movw	r22, r14
    1c8e:	80 e2       	ldi	r24, 0x20	; 32
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1c96:	6a 94       	dec	r6
    1c98:	61 10       	cpse	r6, r1
    1c9a:	f8 cf       	rjmp	.-16     	; 0x1c8c <vfprintf+0x2ca>
    1c9c:	dd 20       	and	r13, r13
    1c9e:	29 f0       	breq	.+10     	; 0x1caa <vfprintf+0x2e8>
    1ca0:	b7 01       	movw	r22, r14
    1ca2:	8d 2d       	mov	r24, r13
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1caa:	53 fc       	sbrc	r5, 3
    1cac:	09 c0       	rjmp	.+18     	; 0x1cc0 <vfprintf+0x2fe>
    1cae:	06 c0       	rjmp	.+12     	; 0x1cbc <vfprintf+0x2fa>
    1cb0:	b7 01       	movw	r22, r14
    1cb2:	80 e3       	ldi	r24, 0x30	; 48
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1cba:	6a 94       	dec	r6
    1cbc:	61 10       	cpse	r6, r1
    1cbe:	f8 cf       	rjmp	.-16     	; 0x1cb0 <vfprintf+0x2ee>
    1cc0:	57 fe       	sbrs	r5, 7
    1cc2:	56 c0       	rjmp	.+172    	; 0x1d70 <vfprintf+0x3ae>
    1cc4:	68 01       	movw	r12, r16
    1cc6:	17 ff       	sbrs	r17, 7
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <vfprintf+0x30c>
    1cca:	c1 2c       	mov	r12, r1
    1ccc:	d1 2c       	mov	r13, r1
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	a8 01       	movw	r20, r16
    1cd4:	44 19       	sub	r20, r4
    1cd6:	51 09       	sbc	r21, r1
    1cd8:	5e 87       	std	Y+14, r21	; 0x0e
    1cda:	4d 87       	std	Y+13, r20	; 0x0d
    1cdc:	28 01       	movw	r4, r16
    1cde:	4c 18       	sub	r4, r12
    1ce0:	5d 08       	sbc	r5, r13
    1ce2:	48 0c       	add	r4, r8
    1ce4:	59 1c       	adc	r5, r9
    1ce6:	87 2d       	mov	r24, r7
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	44 27       	eor	r20, r20
    1cec:	55 27       	eor	r21, r21
    1cee:	48 1b       	sub	r20, r24
    1cf0:	59 0b       	sbc	r21, r25
    1cf2:	58 8b       	std	Y+16, r21	; 0x10
    1cf4:	4f 87       	std	Y+15, r20	; 0x0f
    1cf6:	5f ef       	ldi	r21, 0xFF	; 255
    1cf8:	c5 16       	cp	r12, r21
    1cfa:	d5 06       	cpc	r13, r21
    1cfc:	49 f4       	brne	.+18     	; 0x1d10 <vfprintf+0x34e>
    1cfe:	b7 01       	movw	r22, r14
    1d00:	8e e2       	ldi	r24, 0x2E	; 46
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	2a 8b       	std	Y+18, r18	; 0x12
    1d06:	39 8b       	std	Y+17, r19	; 0x11
    1d08:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1d0c:	39 89       	ldd	r19, Y+17	; 0x11
    1d0e:	2a 89       	ldd	r18, Y+18	; 0x12
    1d10:	0c 15       	cp	r16, r12
    1d12:	1d 05       	cpc	r17, r13
    1d14:	54 f0       	brlt	.+20     	; 0x1d2a <vfprintf+0x368>
    1d16:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d18:	5e 85       	ldd	r21, Y+14	; 0x0e
    1d1a:	4c 15       	cp	r20, r12
    1d1c:	5d 05       	cpc	r21, r13
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <vfprintf+0x368>
    1d20:	f2 01       	movw	r30, r4
    1d22:	e2 0f       	add	r30, r18
    1d24:	f3 1f       	adc	r31, r19
    1d26:	81 81       	ldd	r24, Z+1	; 0x01
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <vfprintf+0x36a>
    1d2a:	80 e3       	ldi	r24, 0x30	; 48
    1d2c:	51 e0       	ldi	r21, 0x01	; 1
    1d2e:	c5 1a       	sub	r12, r21
    1d30:	d1 08       	sbc	r13, r1
    1d32:	2f 5f       	subi	r18, 0xFF	; 255
    1d34:	3f 4f       	sbci	r19, 0xFF	; 255
    1d36:	4f 85       	ldd	r20, Y+15	; 0x0f
    1d38:	58 89       	ldd	r21, Y+16	; 0x10
    1d3a:	c4 16       	cp	r12, r20
    1d3c:	d5 06       	cpc	r13, r21
    1d3e:	4c f0       	brlt	.+18     	; 0x1d52 <vfprintf+0x390>
    1d40:	b7 01       	movw	r22, r14
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	2a 8b       	std	Y+18, r18	; 0x12
    1d46:	39 8b       	std	Y+17, r19	; 0x11
    1d48:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1d4c:	2a 89       	ldd	r18, Y+18	; 0x12
    1d4e:	39 89       	ldd	r19, Y+17	; 0x11
    1d50:	d2 cf       	rjmp	.-92     	; 0x1cf6 <vfprintf+0x334>
    1d52:	c0 16       	cp	r12, r16
    1d54:	d1 06       	cpc	r13, r17
    1d56:	49 f4       	brne	.+18     	; 0x1d6a <vfprintf+0x3a8>
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	96 33       	cpi	r25, 0x36	; 54
    1d5c:	28 f4       	brcc	.+10     	; 0x1d68 <vfprintf+0x3a6>
    1d5e:	95 33       	cpi	r25, 0x35	; 53
    1d60:	21 f4       	brne	.+8      	; 0x1d6a <vfprintf+0x3a8>
    1d62:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d64:	54 fd       	sbrc	r21, 4
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <vfprintf+0x3a8>
    1d68:	81 e3       	ldi	r24, 0x31	; 49
    1d6a:	b7 01       	movw	r22, r14
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	4a c0       	rjmp	.+148    	; 0x1e04 <vfprintf+0x442>
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	81 33       	cpi	r24, 0x31	; 49
    1d74:	19 f0       	breq	.+6      	; 0x1d7c <vfprintf+0x3ba>
    1d76:	4c 85       	ldd	r20, Y+12	; 0x0c
    1d78:	4f 7e       	andi	r20, 0xEF	; 239
    1d7a:	4c 87       	std	Y+12, r20	; 0x0c
    1d7c:	b7 01       	movw	r22, r14
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1d84:	71 10       	cpse	r7, r1
    1d86:	05 c0       	rjmp	.+10     	; 0x1d92 <vfprintf+0x3d0>
    1d88:	54 fe       	sbrs	r5, 4
    1d8a:	16 c0       	rjmp	.+44     	; 0x1db8 <vfprintf+0x3f6>
    1d8c:	85 e4       	ldi	r24, 0x45	; 69
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	15 c0       	rjmp	.+42     	; 0x1dbc <vfprintf+0x3fa>
    1d92:	b7 01       	movw	r22, r14
    1d94:	8e e2       	ldi	r24, 0x2E	; 46
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1d9c:	42 e0       	ldi	r20, 0x02	; 2
    1d9e:	d4 2e       	mov	r13, r20
    1da0:	f4 01       	movw	r30, r8
    1da2:	ed 0d       	add	r30, r13
    1da4:	f1 1d       	adc	r31, r1
    1da6:	d3 94       	inc	r13
    1da8:	b7 01       	movw	r22, r14
    1daa:	80 81       	ld	r24, Z
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1db2:	7a 94       	dec	r7
    1db4:	a9 f7       	brne	.-22     	; 0x1da0 <vfprintf+0x3de>
    1db6:	e8 cf       	rjmp	.-48     	; 0x1d88 <vfprintf+0x3c6>
    1db8:	85 e6       	ldi	r24, 0x65	; 101
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	b7 01       	movw	r22, r14
    1dbe:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1dc2:	17 fd       	sbrc	r17, 7
    1dc4:	06 c0       	rjmp	.+12     	; 0x1dd2 <vfprintf+0x410>
    1dc6:	01 15       	cp	r16, r1
    1dc8:	11 05       	cpc	r17, r1
    1dca:	41 f4       	brne	.+16     	; 0x1ddc <vfprintf+0x41a>
    1dcc:	5c 85       	ldd	r21, Y+12	; 0x0c
    1dce:	54 ff       	sbrs	r21, 4
    1dd0:	05 c0       	rjmp	.+10     	; 0x1ddc <vfprintf+0x41a>
    1dd2:	11 95       	neg	r17
    1dd4:	01 95       	neg	r16
    1dd6:	11 09       	sbc	r17, r1
    1dd8:	8d e2       	ldi	r24, 0x2D	; 45
    1dda:	01 c0       	rjmp	.+2      	; 0x1dde <vfprintf+0x41c>
    1ddc:	8b e2       	ldi	r24, 0x2B	; 43
    1dde:	b7 01       	movw	r22, r14
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1de6:	80 e3       	ldi	r24, 0x30	; 48
    1de8:	03 c0       	rjmp	.+6      	; 0x1df0 <vfprintf+0x42e>
    1dea:	8f 5f       	subi	r24, 0xFF	; 255
    1dec:	0a 50       	subi	r16, 0x0A	; 10
    1dee:	11 09       	sbc	r17, r1
    1df0:	0a 30       	cpi	r16, 0x0A	; 10
    1df2:	11 05       	cpc	r17, r1
    1df4:	d4 f7       	brge	.-12     	; 0x1dea <vfprintf+0x428>
    1df6:	b7 01       	movw	r22, r14
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1dfe:	b7 01       	movw	r22, r14
    1e00:	c8 01       	movw	r24, r16
    1e02:	c0 96       	adiw	r24, 0x30	; 48
    1e04:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1e08:	50 c1       	rjmp	.+672    	; 0x20aa <vfprintf+0x6e8>
    1e0a:	83 36       	cpi	r24, 0x63	; 99
    1e0c:	31 f0       	breq	.+12     	; 0x1e1a <vfprintf+0x458>
    1e0e:	83 37       	cpi	r24, 0x73	; 115
    1e10:	81 f0       	breq	.+32     	; 0x1e32 <vfprintf+0x470>
    1e12:	83 35       	cpi	r24, 0x53	; 83
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <vfprintf+0x456>
    1e16:	5e c0       	rjmp	.+188    	; 0x1ed4 <vfprintf+0x512>
    1e18:	24 c0       	rjmp	.+72     	; 0x1e62 <vfprintf+0x4a0>
    1e1a:	56 01       	movw	r10, r12
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	a8 0e       	add	r10, r24
    1e20:	b1 1c       	adc	r11, r1
    1e22:	f6 01       	movw	r30, r12
    1e24:	80 81       	ld	r24, Z
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	cc 24       	eor	r12, r12
    1e2a:	c3 94       	inc	r12
    1e2c:	d1 2c       	mov	r13, r1
    1e2e:	84 01       	movw	r16, r8
    1e30:	14 c0       	rjmp	.+40     	; 0x1e5a <vfprintf+0x498>
    1e32:	56 01       	movw	r10, r12
    1e34:	f2 e0       	ldi	r31, 0x02	; 2
    1e36:	af 0e       	add	r10, r31
    1e38:	b1 1c       	adc	r11, r1
    1e3a:	f6 01       	movw	r30, r12
    1e3c:	00 81       	ld	r16, Z
    1e3e:	11 81       	ldd	r17, Z+1	; 0x01
    1e40:	26 ff       	sbrs	r18, 6
    1e42:	03 c0       	rjmp	.+6      	; 0x1e4a <vfprintf+0x488>
    1e44:	67 2d       	mov	r22, r7
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <vfprintf+0x48c>
    1e4a:	6f ef       	ldi	r22, 0xFF	; 255
    1e4c:	7f ef       	ldi	r23, 0xFF	; 255
    1e4e:	c8 01       	movw	r24, r16
    1e50:	2a 8b       	std	Y+18, r18	; 0x12
    1e52:	0e 94 b1 11 	call	0x2362	; 0x2362 <strnlen>
    1e56:	6c 01       	movw	r12, r24
    1e58:	2a 89       	ldd	r18, Y+18	; 0x12
    1e5a:	9f e7       	ldi	r25, 0x7F	; 127
    1e5c:	59 2e       	mov	r5, r25
    1e5e:	52 22       	and	r5, r18
    1e60:	17 c0       	rjmp	.+46     	; 0x1e90 <vfprintf+0x4ce>
    1e62:	56 01       	movw	r10, r12
    1e64:	f2 e0       	ldi	r31, 0x02	; 2
    1e66:	af 0e       	add	r10, r31
    1e68:	b1 1c       	adc	r11, r1
    1e6a:	f6 01       	movw	r30, r12
    1e6c:	00 81       	ld	r16, Z
    1e6e:	11 81       	ldd	r17, Z+1	; 0x01
    1e70:	26 ff       	sbrs	r18, 6
    1e72:	03 c0       	rjmp	.+6      	; 0x1e7a <vfprintf+0x4b8>
    1e74:	67 2d       	mov	r22, r7
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <vfprintf+0x4bc>
    1e7a:	6f ef       	ldi	r22, 0xFF	; 255
    1e7c:	7f ef       	ldi	r23, 0xFF	; 255
    1e7e:	c8 01       	movw	r24, r16
    1e80:	2a 8b       	std	Y+18, r18	; 0x12
    1e82:	0e 94 a6 11 	call	0x234c	; 0x234c <strnlen_P>
    1e86:	6c 01       	movw	r12, r24
    1e88:	2a 89       	ldd	r18, Y+18	; 0x12
    1e8a:	80 e8       	ldi	r24, 0x80	; 128
    1e8c:	58 2e       	mov	r5, r24
    1e8e:	52 2a       	or	r5, r18
    1e90:	53 fc       	sbrc	r5, 3
    1e92:	1c c0       	rjmp	.+56     	; 0x1ecc <vfprintf+0x50a>
    1e94:	06 c0       	rjmp	.+12     	; 0x1ea2 <vfprintf+0x4e0>
    1e96:	b7 01       	movw	r22, r14
    1e98:	80 e2       	ldi	r24, 0x20	; 32
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1ea0:	6a 94       	dec	r6
    1ea2:	86 2d       	mov	r24, r6
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	c8 16       	cp	r12, r24
    1ea8:	d9 06       	cpc	r13, r25
    1eaa:	a8 f3       	brcs	.-22     	; 0x1e96 <vfprintf+0x4d4>
    1eac:	0f c0       	rjmp	.+30     	; 0x1ecc <vfprintf+0x50a>
    1eae:	f8 01       	movw	r30, r16
    1eb0:	57 fc       	sbrc	r5, 7
    1eb2:	85 91       	lpm	r24, Z+
    1eb4:	57 fe       	sbrs	r5, 7
    1eb6:	81 91       	ld	r24, Z+
    1eb8:	8f 01       	movw	r16, r30
    1eba:	b7 01       	movw	r22, r14
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1ec2:	61 10       	cpse	r6, r1
    1ec4:	6a 94       	dec	r6
    1ec6:	f1 e0       	ldi	r31, 0x01	; 1
    1ec8:	cf 1a       	sub	r12, r31
    1eca:	d1 08       	sbc	r13, r1
    1ecc:	c1 14       	cp	r12, r1
    1ece:	d1 04       	cpc	r13, r1
    1ed0:	71 f7       	brne	.-36     	; 0x1eae <vfprintf+0x4ec>
    1ed2:	eb c0       	rjmp	.+470    	; 0x20aa <vfprintf+0x6e8>
    1ed4:	84 36       	cpi	r24, 0x64	; 100
    1ed6:	11 f0       	breq	.+4      	; 0x1edc <vfprintf+0x51a>
    1ed8:	89 36       	cpi	r24, 0x69	; 105
    1eda:	51 f5       	brne	.+84     	; 0x1f30 <vfprintf+0x56e>
    1edc:	56 01       	movw	r10, r12
    1ede:	27 ff       	sbrs	r18, 7
    1ee0:	09 c0       	rjmp	.+18     	; 0x1ef4 <vfprintf+0x532>
    1ee2:	44 e0       	ldi	r20, 0x04	; 4
    1ee4:	a4 0e       	add	r10, r20
    1ee6:	b1 1c       	adc	r11, r1
    1ee8:	f6 01       	movw	r30, r12
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	0a c0       	rjmp	.+20     	; 0x1f08 <vfprintf+0x546>
    1ef4:	f2 e0       	ldi	r31, 0x02	; 2
    1ef6:	af 0e       	add	r10, r31
    1ef8:	b1 1c       	adc	r11, r1
    1efa:	f6 01       	movw	r30, r12
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	88 27       	eor	r24, r24
    1f02:	77 fd       	sbrc	r23, 7
    1f04:	80 95       	com	r24
    1f06:	98 2f       	mov	r25, r24
    1f08:	12 2f       	mov	r17, r18
    1f0a:	1f 76       	andi	r17, 0x6F	; 111
    1f0c:	97 ff       	sbrs	r25, 7
    1f0e:	08 c0       	rjmp	.+16     	; 0x1f20 <vfprintf+0x55e>
    1f10:	90 95       	com	r25
    1f12:	80 95       	com	r24
    1f14:	70 95       	com	r23
    1f16:	61 95       	neg	r22
    1f18:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1e:	10 68       	ori	r17, 0x80	; 128
    1f20:	2a e0       	ldi	r18, 0x0A	; 10
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	a4 01       	movw	r20, r8
    1f26:	0e 94 0a 12 	call	0x2414	; 0x2414 <__ultoa_invert>
    1f2a:	d8 2e       	mov	r13, r24
    1f2c:	d8 18       	sub	r13, r8
    1f2e:	40 c0       	rjmp	.+128    	; 0x1fb0 <vfprintf+0x5ee>
    1f30:	12 2f       	mov	r17, r18
    1f32:	85 37       	cpi	r24, 0x75	; 117
    1f34:	21 f4       	brne	.+8      	; 0x1f3e <vfprintf+0x57c>
    1f36:	1f 7e       	andi	r17, 0xEF	; 239
    1f38:	2a e0       	ldi	r18, 0x0A	; 10
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	1f c0       	rjmp	.+62     	; 0x1f7c <vfprintf+0x5ba>
    1f3e:	19 7f       	andi	r17, 0xF9	; 249
    1f40:	8f 36       	cpi	r24, 0x6F	; 111
    1f42:	a1 f0       	breq	.+40     	; 0x1f6c <vfprintf+0x5aa>
    1f44:	20 f4       	brcc	.+8      	; 0x1f4e <vfprintf+0x58c>
    1f46:	88 35       	cpi	r24, 0x58	; 88
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <vfprintf+0x58a>
    1f4a:	b2 c0       	rjmp	.+356    	; 0x20b0 <vfprintf+0x6ee>
    1f4c:	0b c0       	rjmp	.+22     	; 0x1f64 <vfprintf+0x5a2>
    1f4e:	80 37       	cpi	r24, 0x70	; 112
    1f50:	21 f0       	breq	.+8      	; 0x1f5a <vfprintf+0x598>
    1f52:	88 37       	cpi	r24, 0x78	; 120
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <vfprintf+0x596>
    1f56:	ac c0       	rjmp	.+344    	; 0x20b0 <vfprintf+0x6ee>
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <vfprintf+0x59a>
    1f5a:	10 61       	ori	r17, 0x10	; 16
    1f5c:	14 ff       	sbrs	r17, 4
    1f5e:	09 c0       	rjmp	.+18     	; 0x1f72 <vfprintf+0x5b0>
    1f60:	14 60       	ori	r17, 0x04	; 4
    1f62:	07 c0       	rjmp	.+14     	; 0x1f72 <vfprintf+0x5b0>
    1f64:	24 ff       	sbrs	r18, 4
    1f66:	08 c0       	rjmp	.+16     	; 0x1f78 <vfprintf+0x5b6>
    1f68:	16 60       	ori	r17, 0x06	; 6
    1f6a:	06 c0       	rjmp	.+12     	; 0x1f78 <vfprintf+0x5b6>
    1f6c:	28 e0       	ldi	r18, 0x08	; 8
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	05 c0       	rjmp	.+10     	; 0x1f7c <vfprintf+0x5ba>
    1f72:	20 e1       	ldi	r18, 0x10	; 16
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <vfprintf+0x5ba>
    1f78:	20 e1       	ldi	r18, 0x10	; 16
    1f7a:	32 e0       	ldi	r19, 0x02	; 2
    1f7c:	56 01       	movw	r10, r12
    1f7e:	17 ff       	sbrs	r17, 7
    1f80:	09 c0       	rjmp	.+18     	; 0x1f94 <vfprintf+0x5d2>
    1f82:	f4 e0       	ldi	r31, 0x04	; 4
    1f84:	af 0e       	add	r10, r31
    1f86:	b1 1c       	adc	r11, r1
    1f88:	f6 01       	movw	r30, r12
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	08 c0       	rjmp	.+16     	; 0x1fa4 <vfprintf+0x5e2>
    1f94:	f2 e0       	ldi	r31, 0x02	; 2
    1f96:	af 0e       	add	r10, r31
    1f98:	b1 1c       	adc	r11, r1
    1f9a:	f6 01       	movw	r30, r12
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	a4 01       	movw	r20, r8
    1fa6:	0e 94 0a 12 	call	0x2414	; 0x2414 <__ultoa_invert>
    1faa:	d8 2e       	mov	r13, r24
    1fac:	d8 18       	sub	r13, r8
    1fae:	1f 77       	andi	r17, 0x7F	; 127
    1fb0:	16 ff       	sbrs	r17, 6
    1fb2:	0b c0       	rjmp	.+22     	; 0x1fca <vfprintf+0x608>
    1fb4:	21 2f       	mov	r18, r17
    1fb6:	2e 7f       	andi	r18, 0xFE	; 254
    1fb8:	d7 14       	cp	r13, r7
    1fba:	50 f4       	brcc	.+20     	; 0x1fd0 <vfprintf+0x60e>
    1fbc:	14 ff       	sbrs	r17, 4
    1fbe:	0a c0       	rjmp	.+20     	; 0x1fd4 <vfprintf+0x612>
    1fc0:	12 fd       	sbrc	r17, 2
    1fc2:	08 c0       	rjmp	.+16     	; 0x1fd4 <vfprintf+0x612>
    1fc4:	21 2f       	mov	r18, r17
    1fc6:	2e 7e       	andi	r18, 0xEE	; 238
    1fc8:	05 c0       	rjmp	.+10     	; 0x1fd4 <vfprintf+0x612>
    1fca:	0d 2d       	mov	r16, r13
    1fcc:	21 2f       	mov	r18, r17
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <vfprintf+0x614>
    1fd0:	0d 2d       	mov	r16, r13
    1fd2:	01 c0       	rjmp	.+2      	; 0x1fd6 <vfprintf+0x614>
    1fd4:	07 2d       	mov	r16, r7
    1fd6:	24 ff       	sbrs	r18, 4
    1fd8:	0c c0       	rjmp	.+24     	; 0x1ff2 <vfprintf+0x630>
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ed 0d       	add	r30, r13
    1fde:	f1 1d       	adc	r31, r1
    1fe0:	80 81       	ld	r24, Z
    1fe2:	80 33       	cpi	r24, 0x30	; 48
    1fe4:	11 f4       	brne	.+4      	; 0x1fea <vfprintf+0x628>
    1fe6:	29 7e       	andi	r18, 0xE9	; 233
    1fe8:	08 c0       	rjmp	.+16     	; 0x1ffa <vfprintf+0x638>
    1fea:	22 ff       	sbrs	r18, 2
    1fec:	05 c0       	rjmp	.+10     	; 0x1ff8 <vfprintf+0x636>
    1fee:	0e 5f       	subi	r16, 0xFE	; 254
    1ff0:	04 c0       	rjmp	.+8      	; 0x1ffa <vfprintf+0x638>
    1ff2:	82 2f       	mov	r24, r18
    1ff4:	86 78       	andi	r24, 0x86	; 134
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <vfprintf+0x638>
    1ff8:	0f 5f       	subi	r16, 0xFF	; 255
    1ffa:	23 fd       	sbrc	r18, 3
    1ffc:	14 c0       	rjmp	.+40     	; 0x2026 <vfprintf+0x664>
    1ffe:	20 ff       	sbrs	r18, 0
    2000:	0f c0       	rjmp	.+30     	; 0x2020 <vfprintf+0x65e>
    2002:	7d 2c       	mov	r7, r13
    2004:	06 15       	cp	r16, r6
    2006:	60 f4       	brcc	.+24     	; 0x2020 <vfprintf+0x65e>
    2008:	76 0c       	add	r7, r6
    200a:	70 1a       	sub	r7, r16
    200c:	06 2d       	mov	r16, r6
    200e:	08 c0       	rjmp	.+16     	; 0x2020 <vfprintf+0x65e>
    2010:	b7 01       	movw	r22, r14
    2012:	80 e2       	ldi	r24, 0x20	; 32
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	2a 8b       	std	Y+18, r18	; 0x12
    2018:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    201c:	0f 5f       	subi	r16, 0xFF	; 255
    201e:	2a 89       	ldd	r18, Y+18	; 0x12
    2020:	06 15       	cp	r16, r6
    2022:	b0 f3       	brcs	.-20     	; 0x2010 <vfprintf+0x64e>
    2024:	04 c0       	rjmp	.+8      	; 0x202e <vfprintf+0x66c>
    2026:	06 15       	cp	r16, r6
    2028:	10 f4       	brcc	.+4      	; 0x202e <vfprintf+0x66c>
    202a:	60 1a       	sub	r6, r16
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <vfprintf+0x66e>
    202e:	61 2c       	mov	r6, r1
    2030:	24 ff       	sbrs	r18, 4
    2032:	12 c0       	rjmp	.+36     	; 0x2058 <vfprintf+0x696>
    2034:	b7 01       	movw	r22, r14
    2036:	80 e3       	ldi	r24, 0x30	; 48
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	2a 8b       	std	Y+18, r18	; 0x12
    203c:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    2040:	2a 89       	ldd	r18, Y+18	; 0x12
    2042:	22 ff       	sbrs	r18, 2
    2044:	1e c0       	rjmp	.+60     	; 0x2082 <vfprintf+0x6c0>
    2046:	21 ff       	sbrs	r18, 1
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <vfprintf+0x68e>
    204a:	88 e5       	ldi	r24, 0x58	; 88
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <vfprintf+0x692>
    2050:	88 e7       	ldi	r24, 0x78	; 120
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	b7 01       	movw	r22, r14
    2056:	0c c0       	rjmp	.+24     	; 0x2070 <vfprintf+0x6ae>
    2058:	82 2f       	mov	r24, r18
    205a:	86 78       	andi	r24, 0x86	; 134
    205c:	91 f0       	breq	.+36     	; 0x2082 <vfprintf+0x6c0>
    205e:	21 fd       	sbrc	r18, 1
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <vfprintf+0x6a4>
    2062:	80 e2       	ldi	r24, 0x20	; 32
    2064:	01 c0       	rjmp	.+2      	; 0x2068 <vfprintf+0x6a6>
    2066:	8b e2       	ldi	r24, 0x2B	; 43
    2068:	27 fd       	sbrc	r18, 7
    206a:	8d e2       	ldi	r24, 0x2D	; 45
    206c:	b7 01       	movw	r22, r14
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    2074:	06 c0       	rjmp	.+12     	; 0x2082 <vfprintf+0x6c0>
    2076:	b7 01       	movw	r22, r14
    2078:	80 e3       	ldi	r24, 0x30	; 48
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    2080:	7a 94       	dec	r7
    2082:	d7 14       	cp	r13, r7
    2084:	c0 f3       	brcs	.-16     	; 0x2076 <vfprintf+0x6b4>
    2086:	da 94       	dec	r13
    2088:	f4 01       	movw	r30, r8
    208a:	ed 0d       	add	r30, r13
    208c:	f1 1d       	adc	r31, r1
    208e:	b7 01       	movw	r22, r14
    2090:	80 81       	ld	r24, Z
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    2098:	d1 10       	cpse	r13, r1
    209a:	f5 cf       	rjmp	.-22     	; 0x2086 <vfprintf+0x6c4>
    209c:	06 c0       	rjmp	.+12     	; 0x20aa <vfprintf+0x6e8>
    209e:	b7 01       	movw	r22, r14
    20a0:	80 e2       	ldi	r24, 0x20	; 32
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    20a8:	6a 94       	dec	r6
    20aa:	61 10       	cpse	r6, r1
    20ac:	f8 cf       	rjmp	.-16     	; 0x209e <vfprintf+0x6dc>
    20ae:	99 cc       	rjmp	.-1742   	; 0x19e2 <vfprintf+0x20>
    20b0:	f7 01       	movw	r30, r14
    20b2:	26 81       	ldd	r18, Z+6	; 0x06
    20b4:	37 81       	ldd	r19, Z+7	; 0x07
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <vfprintf+0x6fa>
    20b8:	2f ef       	ldi	r18, 0xFF	; 255
    20ba:	3f ef       	ldi	r19, 0xFF	; 255
    20bc:	c9 01       	movw	r24, r18
    20be:	62 96       	adiw	r28, 0x12	; 18
    20c0:	e2 e1       	ldi	r30, 0x12	; 18
    20c2:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__epilogue_restores__>

000020c6 <__divmodhi4>:
    20c6:	97 fb       	bst	r25, 7
    20c8:	07 2e       	mov	r0, r23
    20ca:	16 f4       	brtc	.+4      	; 0x20d0 <__divmodhi4+0xa>
    20cc:	00 94       	com	r0
    20ce:	07 d0       	rcall	.+14     	; 0x20de <__divmodhi4_neg1>
    20d0:	77 fd       	sbrc	r23, 7
    20d2:	09 d0       	rcall	.+18     	; 0x20e6 <__divmodhi4_neg2>
    20d4:	0e 94 ba 10 	call	0x2174	; 0x2174 <__udivmodhi4>
    20d8:	07 fc       	sbrc	r0, 7
    20da:	05 d0       	rcall	.+10     	; 0x20e6 <__divmodhi4_neg2>
    20dc:	3e f4       	brtc	.+14     	; 0x20ec <__divmodhi4_exit>

000020de <__divmodhi4_neg1>:
    20de:	90 95       	com	r25
    20e0:	81 95       	neg	r24
    20e2:	9f 4f       	sbci	r25, 0xFF	; 255
    20e4:	08 95       	ret

000020e6 <__divmodhi4_neg2>:
    20e6:	70 95       	com	r23
    20e8:	61 95       	neg	r22
    20ea:	7f 4f       	sbci	r23, 0xFF	; 255

000020ec <__divmodhi4_exit>:
    20ec:	08 95       	ret

000020ee <__umulhisi3>:
    20ee:	a2 9f       	mul	r26, r18
    20f0:	b0 01       	movw	r22, r0
    20f2:	b3 9f       	mul	r27, r19
    20f4:	c0 01       	movw	r24, r0
    20f6:	a3 9f       	mul	r26, r19
    20f8:	01 d0       	rcall	.+2      	; 0x20fc <__umulhisi3+0xe>
    20fa:	b2 9f       	mul	r27, r18
    20fc:	70 0d       	add	r23, r0
    20fe:	81 1d       	adc	r24, r1
    2100:	11 24       	eor	r1, r1
    2102:	91 1d       	adc	r25, r1
    2104:	08 95       	ret

00002106 <__prologue_saves__>:
    2106:	2f 92       	push	r2
    2108:	3f 92       	push	r3
    210a:	4f 92       	push	r4
    210c:	5f 92       	push	r5
    210e:	6f 92       	push	r6
    2110:	7f 92       	push	r7
    2112:	8f 92       	push	r8
    2114:	9f 92       	push	r9
    2116:	af 92       	push	r10
    2118:	bf 92       	push	r11
    211a:	cf 92       	push	r12
    211c:	df 92       	push	r13
    211e:	ef 92       	push	r14
    2120:	ff 92       	push	r15
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	ca 1b       	sub	r28, r26
    2130:	db 0b       	sbc	r29, r27
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	09 94       	ijmp

0000213e <__epilogue_restores__>:
    213e:	2a 88       	ldd	r2, Y+18	; 0x12
    2140:	39 88       	ldd	r3, Y+17	; 0x11
    2142:	48 88       	ldd	r4, Y+16	; 0x10
    2144:	5f 84       	ldd	r5, Y+15	; 0x0f
    2146:	6e 84       	ldd	r6, Y+14	; 0x0e
    2148:	7d 84       	ldd	r7, Y+13	; 0x0d
    214a:	8c 84       	ldd	r8, Y+12	; 0x0c
    214c:	9b 84       	ldd	r9, Y+11	; 0x0b
    214e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2150:	b9 84       	ldd	r11, Y+9	; 0x09
    2152:	c8 84       	ldd	r12, Y+8	; 0x08
    2154:	df 80       	ldd	r13, Y+7	; 0x07
    2156:	ee 80       	ldd	r14, Y+6	; 0x06
    2158:	fd 80       	ldd	r15, Y+5	; 0x05
    215a:	0c 81       	ldd	r16, Y+4	; 0x04
    215c:	1b 81       	ldd	r17, Y+3	; 0x03
    215e:	aa 81       	ldd	r26, Y+2	; 0x02
    2160:	b9 81       	ldd	r27, Y+1	; 0x01
    2162:	ce 0f       	add	r28, r30
    2164:	d1 1d       	adc	r29, r1
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	ed 01       	movw	r28, r26
    2172:	08 95       	ret

00002174 <__udivmodhi4>:
    2174:	aa 1b       	sub	r26, r26
    2176:	bb 1b       	sub	r27, r27
    2178:	51 e1       	ldi	r21, 0x11	; 17
    217a:	07 c0       	rjmp	.+14     	; 0x218a <__udivmodhi4_ep>

0000217c <__udivmodhi4_loop>:
    217c:	aa 1f       	adc	r26, r26
    217e:	bb 1f       	adc	r27, r27
    2180:	a6 17       	cp	r26, r22
    2182:	b7 07       	cpc	r27, r23
    2184:	10 f0       	brcs	.+4      	; 0x218a <__udivmodhi4_ep>
    2186:	a6 1b       	sub	r26, r22
    2188:	b7 0b       	sbc	r27, r23

0000218a <__udivmodhi4_ep>:
    218a:	88 1f       	adc	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	5a 95       	dec	r21
    2190:	a9 f7       	brne	.-22     	; 0x217c <__udivmodhi4_loop>
    2192:	80 95       	com	r24
    2194:	90 95       	com	r25
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	08 95       	ret

0000219c <__ftoa_engine>:
    219c:	28 30       	cpi	r18, 0x08	; 8
    219e:	08 f0       	brcs	.+2      	; 0x21a2 <__ftoa_engine+0x6>
    21a0:	27 e0       	ldi	r18, 0x07	; 7
    21a2:	33 27       	eor	r19, r19
    21a4:	da 01       	movw	r26, r20
    21a6:	99 0f       	add	r25, r25
    21a8:	31 1d       	adc	r19, r1
    21aa:	87 fd       	sbrc	r24, 7
    21ac:	91 60       	ori	r25, 0x01	; 1
    21ae:	00 96       	adiw	r24, 0x00	; 0
    21b0:	61 05       	cpc	r22, r1
    21b2:	71 05       	cpc	r23, r1
    21b4:	39 f4       	brne	.+14     	; 0x21c4 <__ftoa_engine+0x28>
    21b6:	32 60       	ori	r19, 0x02	; 2
    21b8:	2e 5f       	subi	r18, 0xFE	; 254
    21ba:	3d 93       	st	X+, r19
    21bc:	30 e3       	ldi	r19, 0x30	; 48
    21be:	2a 95       	dec	r18
    21c0:	e1 f7       	brne	.-8      	; 0x21ba <__ftoa_engine+0x1e>
    21c2:	08 95       	ret
    21c4:	9f 3f       	cpi	r25, 0xFF	; 255
    21c6:	30 f0       	brcs	.+12     	; 0x21d4 <__ftoa_engine+0x38>
    21c8:	80 38       	cpi	r24, 0x80	; 128
    21ca:	71 05       	cpc	r23, r1
    21cc:	61 05       	cpc	r22, r1
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <__ftoa_engine+0x36>
    21d0:	3c 5f       	subi	r19, 0xFC	; 252
    21d2:	3c 5f       	subi	r19, 0xFC	; 252
    21d4:	3d 93       	st	X+, r19
    21d6:	91 30       	cpi	r25, 0x01	; 1
    21d8:	08 f0       	brcs	.+2      	; 0x21dc <__ftoa_engine+0x40>
    21da:	80 68       	ori	r24, 0x80	; 128
    21dc:	91 1d       	adc	r25, r1
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	1f 93       	push	r17
    21e4:	0f 93       	push	r16
    21e6:	ff 92       	push	r15
    21e8:	ef 92       	push	r14
    21ea:	19 2f       	mov	r17, r25
    21ec:	98 7f       	andi	r25, 0xF8	; 248
    21ee:	96 95       	lsr	r25
    21f0:	e9 2f       	mov	r30, r25
    21f2:	96 95       	lsr	r25
    21f4:	96 95       	lsr	r25
    21f6:	e9 0f       	add	r30, r25
    21f8:	ff 27       	eor	r31, r31
    21fa:	ee 59       	subi	r30, 0x9E	; 158
    21fc:	fe 4f       	sbci	r31, 0xFE	; 254
    21fe:	99 27       	eor	r25, r25
    2200:	33 27       	eor	r19, r19
    2202:	ee 24       	eor	r14, r14
    2204:	ff 24       	eor	r15, r15
    2206:	a7 01       	movw	r20, r14
    2208:	e7 01       	movw	r28, r14
    220a:	05 90       	lpm	r0, Z+
    220c:	08 94       	sec
    220e:	07 94       	ror	r0
    2210:	28 f4       	brcc	.+10     	; 0x221c <__ftoa_engine+0x80>
    2212:	36 0f       	add	r19, r22
    2214:	e7 1e       	adc	r14, r23
    2216:	f8 1e       	adc	r15, r24
    2218:	49 1f       	adc	r20, r25
    221a:	51 1d       	adc	r21, r1
    221c:	66 0f       	add	r22, r22
    221e:	77 1f       	adc	r23, r23
    2220:	88 1f       	adc	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	06 94       	lsr	r0
    2226:	a1 f7       	brne	.-24     	; 0x2210 <__ftoa_engine+0x74>
    2228:	05 90       	lpm	r0, Z+
    222a:	07 94       	ror	r0
    222c:	28 f4       	brcc	.+10     	; 0x2238 <__ftoa_engine+0x9c>
    222e:	e7 0e       	add	r14, r23
    2230:	f8 1e       	adc	r15, r24
    2232:	49 1f       	adc	r20, r25
    2234:	56 1f       	adc	r21, r22
    2236:	c1 1d       	adc	r28, r1
    2238:	77 0f       	add	r23, r23
    223a:	88 1f       	adc	r24, r24
    223c:	99 1f       	adc	r25, r25
    223e:	66 1f       	adc	r22, r22
    2240:	06 94       	lsr	r0
    2242:	a1 f7       	brne	.-24     	; 0x222c <__ftoa_engine+0x90>
    2244:	05 90       	lpm	r0, Z+
    2246:	07 94       	ror	r0
    2248:	28 f4       	brcc	.+10     	; 0x2254 <__ftoa_engine+0xb8>
    224a:	f8 0e       	add	r15, r24
    224c:	49 1f       	adc	r20, r25
    224e:	56 1f       	adc	r21, r22
    2250:	c7 1f       	adc	r28, r23
    2252:	d1 1d       	adc	r29, r1
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	66 1f       	adc	r22, r22
    225a:	77 1f       	adc	r23, r23
    225c:	06 94       	lsr	r0
    225e:	a1 f7       	brne	.-24     	; 0x2248 <__ftoa_engine+0xac>
    2260:	05 90       	lpm	r0, Z+
    2262:	07 94       	ror	r0
    2264:	20 f4       	brcc	.+8      	; 0x226e <__ftoa_engine+0xd2>
    2266:	49 0f       	add	r20, r25
    2268:	56 1f       	adc	r21, r22
    226a:	c7 1f       	adc	r28, r23
    226c:	d8 1f       	adc	r29, r24
    226e:	99 0f       	add	r25, r25
    2270:	66 1f       	adc	r22, r22
    2272:	77 1f       	adc	r23, r23
    2274:	88 1f       	adc	r24, r24
    2276:	06 94       	lsr	r0
    2278:	a9 f7       	brne	.-22     	; 0x2264 <__ftoa_engine+0xc8>
    227a:	84 91       	lpm	r24, Z
    227c:	10 95       	com	r17
    227e:	17 70       	andi	r17, 0x07	; 7
    2280:	41 f0       	breq	.+16     	; 0x2292 <__ftoa_engine+0xf6>
    2282:	d6 95       	lsr	r29
    2284:	c7 95       	ror	r28
    2286:	57 95       	ror	r21
    2288:	47 95       	ror	r20
    228a:	f7 94       	ror	r15
    228c:	e7 94       	ror	r14
    228e:	1a 95       	dec	r17
    2290:	c1 f7       	brne	.-16     	; 0x2282 <__ftoa_engine+0xe6>
    2292:	e8 e0       	ldi	r30, 0x08	; 8
    2294:	f1 e0       	ldi	r31, 0x01	; 1
    2296:	68 94       	set
    2298:	15 90       	lpm	r1, Z+
    229a:	15 91       	lpm	r17, Z+
    229c:	35 91       	lpm	r19, Z+
    229e:	65 91       	lpm	r22, Z+
    22a0:	95 91       	lpm	r25, Z+
    22a2:	05 90       	lpm	r0, Z+
    22a4:	7f e2       	ldi	r23, 0x2F	; 47
    22a6:	73 95       	inc	r23
    22a8:	e1 18       	sub	r14, r1
    22aa:	f1 0a       	sbc	r15, r17
    22ac:	43 0b       	sbc	r20, r19
    22ae:	56 0b       	sbc	r21, r22
    22b0:	c9 0b       	sbc	r28, r25
    22b2:	d0 09       	sbc	r29, r0
    22b4:	c0 f7       	brcc	.-16     	; 0x22a6 <__ftoa_engine+0x10a>
    22b6:	e1 0c       	add	r14, r1
    22b8:	f1 1e       	adc	r15, r17
    22ba:	43 1f       	adc	r20, r19
    22bc:	56 1f       	adc	r21, r22
    22be:	c9 1f       	adc	r28, r25
    22c0:	d0 1d       	adc	r29, r0
    22c2:	7e f4       	brtc	.+30     	; 0x22e2 <__ftoa_engine+0x146>
    22c4:	70 33       	cpi	r23, 0x30	; 48
    22c6:	11 f4       	brne	.+4      	; 0x22cc <__ftoa_engine+0x130>
    22c8:	8a 95       	dec	r24
    22ca:	e6 cf       	rjmp	.-52     	; 0x2298 <__ftoa_engine+0xfc>
    22cc:	e8 94       	clt
    22ce:	01 50       	subi	r16, 0x01	; 1
    22d0:	30 f0       	brcs	.+12     	; 0x22de <__ftoa_engine+0x142>
    22d2:	08 0f       	add	r16, r24
    22d4:	0a f4       	brpl	.+2      	; 0x22d8 <__ftoa_engine+0x13c>
    22d6:	00 27       	eor	r16, r16
    22d8:	02 17       	cp	r16, r18
    22da:	08 f4       	brcc	.+2      	; 0x22de <__ftoa_engine+0x142>
    22dc:	20 2f       	mov	r18, r16
    22de:	23 95       	inc	r18
    22e0:	02 2f       	mov	r16, r18
    22e2:	7a 33       	cpi	r23, 0x3A	; 58
    22e4:	28 f0       	brcs	.+10     	; 0x22f0 <__ftoa_engine+0x154>
    22e6:	79 e3       	ldi	r23, 0x39	; 57
    22e8:	7d 93       	st	X+, r23
    22ea:	2a 95       	dec	r18
    22ec:	e9 f7       	brne	.-6      	; 0x22e8 <__ftoa_engine+0x14c>
    22ee:	10 c0       	rjmp	.+32     	; 0x2310 <__ftoa_engine+0x174>
    22f0:	7d 93       	st	X+, r23
    22f2:	2a 95       	dec	r18
    22f4:	89 f6       	brne	.-94     	; 0x2298 <__ftoa_engine+0xfc>
    22f6:	06 94       	lsr	r0
    22f8:	97 95       	ror	r25
    22fa:	67 95       	ror	r22
    22fc:	37 95       	ror	r19
    22fe:	17 95       	ror	r17
    2300:	17 94       	ror	r1
    2302:	e1 18       	sub	r14, r1
    2304:	f1 0a       	sbc	r15, r17
    2306:	43 0b       	sbc	r20, r19
    2308:	56 0b       	sbc	r21, r22
    230a:	c9 0b       	sbc	r28, r25
    230c:	d0 09       	sbc	r29, r0
    230e:	98 f0       	brcs	.+38     	; 0x2336 <__ftoa_engine+0x19a>
    2310:	23 95       	inc	r18
    2312:	7e 91       	ld	r23, -X
    2314:	73 95       	inc	r23
    2316:	7a 33       	cpi	r23, 0x3A	; 58
    2318:	08 f0       	brcs	.+2      	; 0x231c <__ftoa_engine+0x180>
    231a:	70 e3       	ldi	r23, 0x30	; 48
    231c:	7c 93       	st	X, r23
    231e:	20 13       	cpse	r18, r16
    2320:	b8 f7       	brcc	.-18     	; 0x2310 <__ftoa_engine+0x174>
    2322:	7e 91       	ld	r23, -X
    2324:	70 61       	ori	r23, 0x10	; 16
    2326:	7d 93       	st	X+, r23
    2328:	30 f0       	brcs	.+12     	; 0x2336 <__ftoa_engine+0x19a>
    232a:	83 95       	inc	r24
    232c:	71 e3       	ldi	r23, 0x31	; 49
    232e:	7d 93       	st	X+, r23
    2330:	70 e3       	ldi	r23, 0x30	; 48
    2332:	2a 95       	dec	r18
    2334:	e1 f7       	brne	.-8      	; 0x232e <__ftoa_engine+0x192>
    2336:	11 24       	eor	r1, r1
    2338:	ef 90       	pop	r14
    233a:	ff 90       	pop	r15
    233c:	0f 91       	pop	r16
    233e:	1f 91       	pop	r17
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	99 27       	eor	r25, r25
    2346:	87 fd       	sbrc	r24, 7
    2348:	90 95       	com	r25
    234a:	08 95       	ret

0000234c <strnlen_P>:
    234c:	fc 01       	movw	r30, r24
    234e:	05 90       	lpm	r0, Z+
    2350:	61 50       	subi	r22, 0x01	; 1
    2352:	70 40       	sbci	r23, 0x00	; 0
    2354:	01 10       	cpse	r0, r1
    2356:	d8 f7       	brcc	.-10     	; 0x234e <strnlen_P+0x2>
    2358:	80 95       	com	r24
    235a:	90 95       	com	r25
    235c:	8e 0f       	add	r24, r30
    235e:	9f 1f       	adc	r25, r31
    2360:	08 95       	ret

00002362 <strnlen>:
    2362:	fc 01       	movw	r30, r24
    2364:	61 50       	subi	r22, 0x01	; 1
    2366:	70 40       	sbci	r23, 0x00	; 0
    2368:	01 90       	ld	r0, Z+
    236a:	01 10       	cpse	r0, r1
    236c:	d8 f7       	brcc	.-10     	; 0x2364 <strnlen+0x2>
    236e:	80 95       	com	r24
    2370:	90 95       	com	r25
    2372:	8e 0f       	add	r24, r30
    2374:	9f 1f       	adc	r25, r31
    2376:	08 95       	ret

00002378 <fputc>:
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	8c 01       	movw	r16, r24
    2382:	eb 01       	movw	r28, r22
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	81 fd       	sbrc	r24, 1
    2388:	03 c0       	rjmp	.+6      	; 0x2390 <fputc+0x18>
    238a:	0f ef       	ldi	r16, 0xFF	; 255
    238c:	1f ef       	ldi	r17, 0xFF	; 255
    238e:	1a c0       	rjmp	.+52     	; 0x23c4 <fputc+0x4c>
    2390:	82 ff       	sbrs	r24, 2
    2392:	0d c0       	rjmp	.+26     	; 0x23ae <fputc+0x36>
    2394:	2e 81       	ldd	r18, Y+6	; 0x06
    2396:	3f 81       	ldd	r19, Y+7	; 0x07
    2398:	8c 81       	ldd	r24, Y+4	; 0x04
    239a:	9d 81       	ldd	r25, Y+5	; 0x05
    239c:	28 17       	cp	r18, r24
    239e:	39 07       	cpc	r19, r25
    23a0:	64 f4       	brge	.+24     	; 0x23ba <fputc+0x42>
    23a2:	e8 81       	ld	r30, Y
    23a4:	f9 81       	ldd	r31, Y+1	; 0x01
    23a6:	01 93       	st	Z+, r16
    23a8:	f9 83       	std	Y+1, r31	; 0x01
    23aa:	e8 83       	st	Y, r30
    23ac:	06 c0       	rjmp	.+12     	; 0x23ba <fputc+0x42>
    23ae:	e8 85       	ldd	r30, Y+8	; 0x08
    23b0:	f9 85       	ldd	r31, Y+9	; 0x09
    23b2:	80 2f       	mov	r24, r16
    23b4:	09 95       	icall
    23b6:	89 2b       	or	r24, r25
    23b8:	41 f7       	brne	.-48     	; 0x238a <fputc+0x12>
    23ba:	8e 81       	ldd	r24, Y+6	; 0x06
    23bc:	9f 81       	ldd	r25, Y+7	; 0x07
    23be:	01 96       	adiw	r24, 0x01	; 1
    23c0:	9f 83       	std	Y+7, r25	; 0x07
    23c2:	8e 83       	std	Y+6, r24	; 0x06
    23c4:	c8 01       	movw	r24, r16
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	08 95       	ret

000023d0 <sprintf>:
    23d0:	ae e0       	ldi	r26, 0x0E	; 14
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	ee ee       	ldi	r30, 0xEE	; 238
    23d6:	f1 e1       	ldi	r31, 0x11	; 17
    23d8:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__prologue_saves__+0x1c>
    23dc:	0d 89       	ldd	r16, Y+21	; 0x15
    23de:	1e 89       	ldd	r17, Y+22	; 0x16
    23e0:	86 e0       	ldi	r24, 0x06	; 6
    23e2:	8c 83       	std	Y+4, r24	; 0x04
    23e4:	1a 83       	std	Y+2, r17	; 0x02
    23e6:	09 83       	std	Y+1, r16	; 0x01
    23e8:	8f ef       	ldi	r24, 0xFF	; 255
    23ea:	9f e7       	ldi	r25, 0x7F	; 127
    23ec:	9e 83       	std	Y+6, r25	; 0x06
    23ee:	8d 83       	std	Y+5, r24	; 0x05
    23f0:	ce 01       	movw	r24, r28
    23f2:	49 96       	adiw	r24, 0x19	; 25
    23f4:	ac 01       	movw	r20, r24
    23f6:	6f 89       	ldd	r22, Y+23	; 0x17
    23f8:	78 8d       	ldd	r23, Y+24	; 0x18
    23fa:	ce 01       	movw	r24, r28
    23fc:	01 96       	adiw	r24, 0x01	; 1
    23fe:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <vfprintf>
    2402:	ef 81       	ldd	r30, Y+7	; 0x07
    2404:	f8 85       	ldd	r31, Y+8	; 0x08
    2406:	e0 0f       	add	r30, r16
    2408:	f1 1f       	adc	r31, r17
    240a:	10 82       	st	Z, r1
    240c:	2e 96       	adiw	r28, 0x0e	; 14
    240e:	e4 e0       	ldi	r30, 0x04	; 4
    2410:	0c 94 ad 10 	jmp	0x215a	; 0x215a <__epilogue_restores__+0x1c>

00002414 <__ultoa_invert>:
    2414:	fa 01       	movw	r30, r20
    2416:	aa 27       	eor	r26, r26
    2418:	28 30       	cpi	r18, 0x08	; 8
    241a:	51 f1       	breq	.+84     	; 0x2470 <__ultoa_invert+0x5c>
    241c:	20 31       	cpi	r18, 0x10	; 16
    241e:	81 f1       	breq	.+96     	; 0x2480 <__ultoa_invert+0x6c>
    2420:	e8 94       	clt
    2422:	6f 93       	push	r22
    2424:	6e 7f       	andi	r22, 0xFE	; 254
    2426:	6e 5f       	subi	r22, 0xFE	; 254
    2428:	7f 4f       	sbci	r23, 0xFF	; 255
    242a:	8f 4f       	sbci	r24, 0xFF	; 255
    242c:	9f 4f       	sbci	r25, 0xFF	; 255
    242e:	af 4f       	sbci	r26, 0xFF	; 255
    2430:	b1 e0       	ldi	r27, 0x01	; 1
    2432:	3e d0       	rcall	.+124    	; 0x24b0 <__ultoa_invert+0x9c>
    2434:	b4 e0       	ldi	r27, 0x04	; 4
    2436:	3c d0       	rcall	.+120    	; 0x24b0 <__ultoa_invert+0x9c>
    2438:	67 0f       	add	r22, r23
    243a:	78 1f       	adc	r23, r24
    243c:	89 1f       	adc	r24, r25
    243e:	9a 1f       	adc	r25, r26
    2440:	a1 1d       	adc	r26, r1
    2442:	68 0f       	add	r22, r24
    2444:	79 1f       	adc	r23, r25
    2446:	8a 1f       	adc	r24, r26
    2448:	91 1d       	adc	r25, r1
    244a:	a1 1d       	adc	r26, r1
    244c:	6a 0f       	add	r22, r26
    244e:	71 1d       	adc	r23, r1
    2450:	81 1d       	adc	r24, r1
    2452:	91 1d       	adc	r25, r1
    2454:	a1 1d       	adc	r26, r1
    2456:	20 d0       	rcall	.+64     	; 0x2498 <__ultoa_invert+0x84>
    2458:	09 f4       	brne	.+2      	; 0x245c <__ultoa_invert+0x48>
    245a:	68 94       	set
    245c:	3f 91       	pop	r19
    245e:	2a e0       	ldi	r18, 0x0A	; 10
    2460:	26 9f       	mul	r18, r22
    2462:	11 24       	eor	r1, r1
    2464:	30 19       	sub	r19, r0
    2466:	30 5d       	subi	r19, 0xD0	; 208
    2468:	31 93       	st	Z+, r19
    246a:	de f6       	brtc	.-74     	; 0x2422 <__ultoa_invert+0xe>
    246c:	cf 01       	movw	r24, r30
    246e:	08 95       	ret
    2470:	46 2f       	mov	r20, r22
    2472:	47 70       	andi	r20, 0x07	; 7
    2474:	40 5d       	subi	r20, 0xD0	; 208
    2476:	41 93       	st	Z+, r20
    2478:	b3 e0       	ldi	r27, 0x03	; 3
    247a:	0f d0       	rcall	.+30     	; 0x249a <__ultoa_invert+0x86>
    247c:	c9 f7       	brne	.-14     	; 0x2470 <__ultoa_invert+0x5c>
    247e:	f6 cf       	rjmp	.-20     	; 0x246c <__ultoa_invert+0x58>
    2480:	46 2f       	mov	r20, r22
    2482:	4f 70       	andi	r20, 0x0F	; 15
    2484:	40 5d       	subi	r20, 0xD0	; 208
    2486:	4a 33       	cpi	r20, 0x3A	; 58
    2488:	18 f0       	brcs	.+6      	; 0x2490 <__ultoa_invert+0x7c>
    248a:	49 5d       	subi	r20, 0xD9	; 217
    248c:	31 fd       	sbrc	r19, 1
    248e:	40 52       	subi	r20, 0x20	; 32
    2490:	41 93       	st	Z+, r20
    2492:	02 d0       	rcall	.+4      	; 0x2498 <__ultoa_invert+0x84>
    2494:	a9 f7       	brne	.-22     	; 0x2480 <__ultoa_invert+0x6c>
    2496:	ea cf       	rjmp	.-44     	; 0x246c <__ultoa_invert+0x58>
    2498:	b4 e0       	ldi	r27, 0x04	; 4
    249a:	a6 95       	lsr	r26
    249c:	97 95       	ror	r25
    249e:	87 95       	ror	r24
    24a0:	77 95       	ror	r23
    24a2:	67 95       	ror	r22
    24a4:	ba 95       	dec	r27
    24a6:	c9 f7       	brne	.-14     	; 0x249a <__ultoa_invert+0x86>
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	61 05       	cpc	r22, r1
    24ac:	71 05       	cpc	r23, r1
    24ae:	08 95       	ret
    24b0:	9b 01       	movw	r18, r22
    24b2:	ac 01       	movw	r20, r24
    24b4:	0a 2e       	mov	r0, r26
    24b6:	06 94       	lsr	r0
    24b8:	57 95       	ror	r21
    24ba:	47 95       	ror	r20
    24bc:	37 95       	ror	r19
    24be:	27 95       	ror	r18
    24c0:	ba 95       	dec	r27
    24c2:	c9 f7       	brne	.-14     	; 0x24b6 <__ultoa_invert+0xa2>
    24c4:	62 0f       	add	r22, r18
    24c6:	73 1f       	adc	r23, r19
    24c8:	84 1f       	adc	r24, r20
    24ca:	95 1f       	adc	r25, r21
    24cc:	a0 1d       	adc	r26, r0
    24ce:	08 95       	ret

000024d0 <__eerd_byte_m168pa>:
    24d0:	f9 99       	sbic	0x1f, 1	; 31
    24d2:	fe cf       	rjmp	.-4      	; 0x24d0 <__eerd_byte_m168pa>
    24d4:	92 bd       	out	0x22, r25	; 34
    24d6:	81 bd       	out	0x21, r24	; 33
    24d8:	f8 9a       	sbi	0x1f, 0	; 31
    24da:	99 27       	eor	r25, r25
    24dc:	80 b5       	in	r24, 0x20	; 32
    24de:	08 95       	ret

000024e0 <__eerd_dword_m168pa>:
    24e0:	a6 e1       	ldi	r26, 0x16	; 22
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	44 e0       	ldi	r20, 0x04	; 4
    24e6:	50 e0       	ldi	r21, 0x00	; 0
    24e8:	0c 94 96 12 	jmp	0x252c	; 0x252c <__eerd_blraw_m168pa>

000024ec <__eeupd_byte_m168pa>:
    24ec:	26 2f       	mov	r18, r22

000024ee <__eeupd_r18_m168pa>:
    24ee:	f9 99       	sbic	0x1f, 1	; 31
    24f0:	fe cf       	rjmp	.-4      	; 0x24ee <__eeupd_r18_m168pa>
    24f2:	92 bd       	out	0x22, r25	; 34
    24f4:	81 bd       	out	0x21, r24	; 33
    24f6:	f8 9a       	sbi	0x1f, 0	; 31
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	00 b4       	in	r0, 0x20	; 32
    24fc:	02 16       	cp	r0, r18
    24fe:	39 f0       	breq	.+14     	; 0x250e <__eeupd_r18_m168pa+0x20>
    2500:	1f ba       	out	0x1f, r1	; 31
    2502:	20 bd       	out	0x20, r18	; 32
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	fa 9a       	sbi	0x1f, 2	; 31
    250a:	f9 9a       	sbi	0x1f, 1	; 31
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	08 95       	ret

00002510 <__eeupd_dword_m168pa>:
    2510:	03 96       	adiw	r24, 0x03	; 3
    2512:	27 2f       	mov	r18, r23
    2514:	0e 94 77 12 	call	0x24ee	; 0x24ee <__eeupd_r18_m168pa>
    2518:	0e 94 76 12 	call	0x24ec	; 0x24ec <__eeupd_byte_m168pa>
    251c:	25 2f       	mov	r18, r21
    251e:	0e 94 77 12 	call	0x24ee	; 0x24ee <__eeupd_r18_m168pa>
    2522:	24 2f       	mov	r18, r20
    2524:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__eeupd_r18_m168pa>

00002528 <__eerd_block_m168pa>:
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22

0000252c <__eerd_blraw_m168pa>:
    252c:	fc 01       	movw	r30, r24
    252e:	f9 99       	sbic	0x1f, 1	; 31
    2530:	fe cf       	rjmp	.-4      	; 0x252e <__eerd_blraw_m168pa+0x2>
    2532:	06 c0       	rjmp	.+12     	; 0x2540 <__eerd_blraw_m168pa+0x14>
    2534:	f2 bd       	out	0x22, r31	; 34
    2536:	e1 bd       	out	0x21, r30	; 33
    2538:	f8 9a       	sbi	0x1f, 0	; 31
    253a:	31 96       	adiw	r30, 0x01	; 1
    253c:	00 b4       	in	r0, 0x20	; 32
    253e:	0d 92       	st	X+, r0
    2540:	41 50       	subi	r20, 0x01	; 1
    2542:	50 40       	sbci	r21, 0x00	; 0
    2544:	b8 f7       	brcc	.-18     	; 0x2534 <__eerd_blraw_m168pa+0x8>
    2546:	08 95       	ret

00002548 <_exit>:
    2548:	f8 94       	cli

0000254a <__stop_program>:
    254a:	ff cf       	rjmp	.-2      	; 0x254a <__stop_program>
