{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"LCD_RS",
				"LCD_RS_PIN_LOW"
			],
			[
				"LCD_E_PIN",
				"LCD_E_PIN_LOW"
			],
			[
				"LCD_E_",
				"LCD_E_PIN_HIGH"
			],
			[
				"LCD_R_W",
				"LCD_R_W_PIN_LOW"
			],
			[
				"LCD_E",
				"LCD_E_PIN_LOW"
			],
			[
				"ENC_CH",
				"ENC_CH_B"
			],
			[
				"S",
				"STATUS_LED"
			],
			[
				"WU_F",
				"WU_FLOW_SENSOR_PORT"
			],
			[
				"ENCODER",
				"ENCODER_CH_A_DIR"
			]
		]
	},
	"buffers":
	[
		{
			"file": "lcd.h",
			"settings":
			{
				"buffer_size": 2177,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef LCD_H\n#define LCD_H\n/*************************************************************************\n Title	:   C include file for the HD44780U LCD library (lcd.c)\n Author:    Peter Fleury <pfleury@gmx.ch>  http://jump.to/fleury\n File:	    $Id: lcd.h,v 1.13.2.2 2006/01/30 19:51:33 peter Exp $\n Software:  AVR-GCC 3.3\n Hardware:  any AVR device, memory mapped mode only for AT90S4414/8515/Mega\n***************************************************************************/\n\n/**\n @defgroup pfleury_lcd LCD library\n @code #include <lcd.h> @endcode\n \n @brief Basic routines for interfacing a HD44780U-based text LCD display\n\n Originally based on Volker Oth's LCD library,\n changed lcd_init(), added additional constants for lcd_command(), \n added 4-bit I/O mode, improved and optimized code.\n       \n Library can be operated in memory mapped mode (LCD_IO_MODE=0) or in \n 4-bit IO port mode (LCD_IO_MODE=1). 8-bit IO port mode not supported.\n\n Memory mapped mode compatible with Kanda STK200, but supports also \n generation of R/W signal through A8 address line.\n       \n @author Peter Fleury pfleury@gmx.ch http://jump.to/fleury\n \n @see The chapter <a href=\"http://homepage.sunrise.ch/mysunrise/peterfleury/avr-lcd44780.html\" target=\"_blank\">Interfacing a HD44780 Based LCD to an AVR</a>\n      on my home page.\n\n*/\n\n/*@{*/\n\n#if (__GNUC__ * 100 + __GNUC_MINOR__) < 303\n#error \"This library requires AVR-GCC 3.3 or later, update to newer AVR-GCC compiler !\"\n#endif\n\n#include <inttypes.h>\n#include <avr/pgmspace.h>\n\n/** \n *  @name  Definitions for MCU Clock Frequency\n *  Adapt the MCU clock frequency in Hz to your target. \n */\n#define XTAL 16000000UL              /**< clock frequency in Hz, used to calculate delay timer */\n\n\n/**\n * @name  Definition for LCD controller type\n * Use 0 for HD44780 controller, change to 1 for displays with KS0073 controller.\n */\n#define LCD_CONTROLLER_KS0073 0  /**< Use 0 for HD44780 controller, 1 for KS0073 controller */\n\n/** \n *  @name  Definitions for Display Size \n *  Change these definitions to adapt setting to your display\n */\n#define LCD_LINES           4     /**< number of visible lines of the display */\n#define LCD_DISP_LENGTH    20     /**< visibles characters per line of the display */\n#define LCD_LINE_LENGTH  0x40     /**< internal line length of the display    */\n#define LCD_START_LINE1  0x00     /**< DDRAM address of first char of line 1 */\n#define LCD_START_LINE2  0x40     /**< DDRAM address of first char of line 2 */\n#define LCD_START_LINE3  0x14     /**< DDRAM address of first char of line 3 */\n#define LCD_START_LINE4  0x54     /**< DDRAM address of first char of line 4 */\n#define LCD_WRAP_LINES      0     /**< 0: no wrap, 1: wrap at end of visibile line */\n\n\n#define LCD_IO_MODE      1         /**< 0: memory mapped mode, 1: IO port mode */\n#if LCD_IO_MODE\n/**\n *  @name Definitions for 4-bit IO mode\n *  Change LCD_PORT if you want to use a different port for the LCD pins.\n *\n *  The four LCD data lines and the three control lines RS, RW, E can be on the \n *  same port or on different ports. \n *  Change LCD_RS_PORT, LCD_RW_PORT, LCD_E_PORT if you want the control lines on\n *  different ports. \n *\n *  Normally the four data lines should be mapped to bit 0..3 on one port, but it\n *  is possible to connect these data lines in different order or even on different\n *  ports by adapting the LCD_DATAx_PORT and LCD_DATAx_PIN definitions.\n *  \n */\n#define LCD_PORT         PORTA        /**< port for the LCD lines   */\n#define LCD_DATA0_PORT   LCD_PORT     /**< port for 4bit data bit 0 */\n#define LCD_DATA1_PORT   LCD_PORT     /**< port for 4bit data bit 1 */\n#define LCD_DATA2_PORT   LCD_PORT     /**< port for 4bit data bit 2 */\n#define LCD_DATA3_PORT   LCD_PORT     /**< port for 4bit data bit 3 */\n#define LCD_DATA0_PIN    0            /**< pin for 4bit data bit 0  */\n#define LCD_DATA1_PIN    1            /**< pin for 4bit data bit 1  */\n#define LCD_DATA2_PIN    2            /**< pin for 4bit data bit 2  */\n#define LCD_DATA3_PIN    3            /**< pin for 4bit data bit 3  */\n#define LCD_RS_PORT      LCD_PORT     /**< port for RS line         */\n#define LCD_RS_PIN       4            /**< pin  for RS line         */\n#define LCD_RW_PORT      LCD_PORT     /**< port for RW line         */\n#define LCD_RW_PIN       5            /**< pin  for RW line         */\n#define LCD_E_PORT       LCD_PORT     /**< port for Enable line     */\n#define LCD_E_PIN        6            /**< pin  for Enable line     */\n\n#elif defined(__AVR_AT90S4414__) || defined(__AVR_AT90S8515__) || defined(__AVR_ATmega64__) || \\\n      defined(__AVR_ATmega8515__)|| defined(__AVR_ATmega103__) || defined(__AVR_ATmega128__) || \\\n      defined(__AVR_ATmega161__) || defined(__AVR_ATmega162__)\n/*\n *  memory mapped mode is only supported when the device has an external data memory interface\n */\n#define LCD_IO_DATA      0xC000    /* A15=E=1, A14=RS=1                 */\n#define LCD_IO_FUNCTION  0x8000    /* A15=E=1, A14=RS=0                 */\n#define LCD_IO_READ      0x0100    /* A8 =R/W=1 (R/W: 1=Read, 0=Write   */\n#else\n#error \"external data memory interface not available for this device, use 4-bit IO port mode\"\n\n#endif\n\n\n/**\n *  @name Definitions for LCD command instructions\n *  The constants define the various LCD controller instructions which can be passed to the \n *  function lcd_command(), see HD44780 data sheet for a complete description.\n */\n\n/* instruction register bit positions, see HD44780U data sheet */\n#define LCD_CLR               0      /* DB0: clear display                  */\n#define LCD_HOME              1      /* DB1: return to home position        */\n#define LCD_ENTRY_MODE        2      /* DB2: set entry mode                 */\n#define LCD_ENTRY_INC         1      /*   DB1: 1=increment, 0=decrement     */\n#define LCD_ENTRY_SHIFT       0      /*   DB2: 1=display shift on           */\n#define LCD_ON                3      /* DB3: turn lcd/cursor on             */\n#define LCD_ON_DISPLAY        2      /*   DB2: turn display on              */\n#define LCD_ON_CURSOR         1      /*   DB1: turn cursor on               */\n#define LCD_ON_BLINK          0      /*     DB0: blinking cursor ?          */\n#define LCD_MOVE              4      /* DB4: move cursor/display            */\n#define LCD_MOVE_DISP         3      /*   DB3: move display (0-> cursor) ?  */\n#define LCD_MOVE_RIGHT        2      /*   DB2: move right (0-> left) ?      */\n#define LCD_FUNCTION          5      /* DB5: function set                   */\n#define LCD_FUNCTION_8BIT     4      /*   DB4: set 8BIT mode (0->4BIT mode) */\n#define LCD_FUNCTION_2LINES   3      /*   DB3: two lines (0->one line)      */\n#define LCD_FUNCTION_10DOTS   2      /*   DB2: 5x10 font (0->5x7 font)      */\n#define LCD_CGRAM             6      /* DB6: set CG RAM address             */\n#define LCD_DDRAM             7      /* DB7: set DD RAM address             */\n#define LCD_BUSY              7      /* DB7: LCD is busy                    */\n\n/* set entry mode: display shift on/off, dec/inc cursor move direction */\n#define LCD_ENTRY_DEC            0x04   /* display shift off, dec cursor move dir */\n#define LCD_ENTRY_DEC_SHIFT      0x05   /* display shift on,  dec cursor move dir */\n#define LCD_ENTRY_INC_           0x06   /* display shift off, inc cursor move dir */\n#define LCD_ENTRY_INC_SHIFT      0x07   /* display shift on,  inc cursor move dir */\n\n/* display on/off, cursor on/off, blinking char at cursor position */\n#define LCD_DISP_OFF             0x08   /* display off                            */\n#define LCD_DISP_ON              0x0C   /* display on, cursor off                 */\n#define LCD_DISP_ON_BLINK        0x0D   /* display on, cursor off, blink char     */\n#define LCD_DISP_ON_CURSOR       0x0E   /* display on, cursor on                  */\n#define LCD_DISP_ON_CURSOR_BLINK 0x0F   /* display on, cursor on, blink char      */\n\n/* move cursor/shift display */\n#define LCD_MOVE_CURSOR_LEFT     0x10   /* move cursor left  (decrement)          */\n#define LCD_MOVE_CURSOR_RIGHT    0x14   /* move cursor right (increment)          */\n#define LCD_MOVE_DISP_LEFT       0x18   /* shift display left                     */\n#define LCD_MOVE_DISP_RIGHT      0x1C   /* shift display right                    */\n\n/* function set: set interface data length and number of display lines */\n#define LCD_FUNCTION_4BIT_1LINE  0x20   /* 4-bit interface, single line, 5x7 dots */\n#define LCD_FUNCTION_4BIT_2LINES 0x28   /* 4-bit interface, dual line,   5x7 dots */\n#define LCD_FUNCTION_8BIT_1LINE  0x30   /* 8-bit interface, single line, 5x7 dots */\n#define LCD_FUNCTION_8BIT_2LINES 0x38   /* 8-bit interface, dual line,   5x7 dots */\n\n\n#define LCD_MODE_DEFAULT     ((1<<LCD_ENTRY_MODE) | (1<<LCD_ENTRY_INC) )\n\n\n\n/** \n *  @name Functions\n */\n\n\n/**\n @brief    Initialize display and select type of cursor\n @param    dispAttr \\b LCD_DISP_OFF display off\\n\n                    \\b LCD_DISP_ON display on, cursor off\\n\n                    \\b LCD_DISP_ON_CURSOR display on, cursor on\\n\n                    \\b LCD_DISP_ON_CURSOR_BLINK display on, cursor on flashing             \n @return  none\n*/\nextern void lcd_init(uint8_t dispAttr);\n\n\n/**\n @brief    Clear display and set cursor to home position\n @param    void                                        \n @return   none\n*/\nextern void lcd_clrscr(void);\n\n\n/**\n @brief    Set cursor to home position\n @param    void                                        \n @return   none\n*/\nextern void lcd_home(void);\n\n\n/**\n @brief    Set cursor to specified position\n \n @param    x horizontal position\\n (0: left most position)\n @param    y vertical position\\n   (0: first line)\n @return   none\n*/\nextern void lcd_gotoxy(uint8_t x, uint8_t y);\n\n\n/**\n @brief    Display character at current cursor position\n @param    c character to be displayed                                       \n @return   none\n*/\nextern void lcd_putc(char c);\n\n\n/**\n @brief    Display string without auto linefeed\n @param    s string to be displayed                                        \n @return   none\n*/\nextern void lcd_puts(const char *s);\n\n\n/**\n @brief    Display string from program memory without auto linefeed\n @param    s string from program memory be be displayed                                        \n @return   none\n @see      lcd_puts_P\n*/\nextern void lcd_puts_p(const char *progmem_s);\n\n\n/**\n @brief    Send LCD controller instruction command\n @param    cmd instruction to send to LCD controller, see HD44780 data sheet\n @return   none\n*/\nextern void lcd_command(uint8_t cmd);\n\n\n/**\n @brief    Send data byte to LCD controller \n \n Similar to lcd_putc(), but without interpreting LF\n @param    data byte to send to LCD controller, see HD44780 data sheet\n @return   none\n*/\nextern void lcd_data(uint8_t data);\n\n\n/**\n @brief macros for automatically storing string constant in program memory\n*/\n#define lcd_puts_P(__s)         lcd_puts_p(PSTR(__s))\n\n/*@}*/\n#endif //LCD_H\n",
			"file": "fluery_lcd.h",
			"file_size": 11188,
			"file_write_time": 1391610333000000,
			"settings":
			{
				"buffer_size": 10926,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"pci",
				"Package Control: Install Package"
			],
			[
				"snippet: ",
				"Snippet: main()"
			],
			[
				"gi",
				"Git: Init"
			],
			[
				"package",
				"Package Control: Add Channel"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/jesse/Magnum/Water Use Project/Code 2/includes.h",
		"/home/jesse/Magnum/Water Use Project/Code 2/main.c",
		"/home/jesse/Magnum/Water Use Project/Code 2/lcd.c",
		"/home/jesse/Magnum/Water Use Project/Code 2/init.h",
		"/home/jesse/Magnum/Water Use Project/Code 2/init.c",
		"/home/jesse/.config/sublime-text-2/Packages/User/Comment-C-Title.sublime-snippet",
		"/home/jesse/Magnum/Water Use Project/Code/main.c",
		"/home/jesse/Magnum/Water Use Project/Code/waterUsage.h",
		"/home/jesse/Magnum/Water Use Project/Code/encoder.c",
		"/home/jesse/.config/sublime-text-2/Packages/User/AVR-mega324a-Variants.sublime-build",
		"/home/nc6320/bin/eagle-post-install.sh",
		"/home/nc6320/Magnum/Water Use Project/Code/lcd.h",
		"/home/nc6320/Magnum/Water Use Project/Sample Code/AVRFREAKS/lcd_drv.c",
		"/home/nc6320/Magnum/Water Use Project/Sample Code/AVRFREAKS/lcd_drv.h",
		"/home/nc6320/Magnum/Water Use Project/Code/waterUsage.c",
		"/home/nc6320/Magnum/Water Use Project/Code/waterUsage.h",
		"/home/nc6320/Magnum/Water Use Project/Code/encoder.h",
		"/home/nc6320/Magnum/Water Use Project/Code/main.c",
		"/home/nc6320/Magnum/Water Use Project/Code/main.h",
		"/run/user/1000/gvfs/smb-share:server=mserver,share=projects/Lakewood/Vibratory Controller/Software/Lakewood Motor Controller/Lakewood Motor Controller/AC_Control.c",
		"/home/nc6320/Magnum/Water Use Project/Sample Code/AVRFREAKS/main.c",
		"/home/nc6320/Magnum/Water Use Project/Code/lcd.c",
		"/home/nc6320/Magnum/Water Use Project/Code/global.h",
		"/home/nc6320/Magnum/Water Use Project/Code/encoder.c",
		"/home/nc6320/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/nc6320/Magnum/Water Use Project/Code/Water Usage.c",
		"/home/nc6320/Magnum/Water Use Project/Code/Water Usage.h",
		"/home/nc6320/Magnum/Water Use Project/Code/lcdconf.h",
		"/home/nc6320/Magnum/Water Use Project/Sample Code/global.h",
		"/home/nc6320/Water Use Monitor.xml",
		"/home/nc6320/bin/eagle-board-parser.py",
		"/home/nc6320/Magnum/Water Use Project/Code/timer.h",
		"/home/nc6320/Magnum/Water Use Project/Code/Water Usage.sublime-project",
		"/home/nc6320/.FreeCAD/eagle.FCMacro",
		"/home/nc6320/.local/share/wineprefixes/sketchup/drive_c/Program Files/SketchUp/SketchUp 2013/Plugins/eagleUp_import.rb",
		"/home/nc6320/Magnum/Water Use Project/Electrical/Water Use Monitor/Water Use Monitor.eup",
		"/home/nc6320/School/Winter2014/FPGA SETUP NOTES",
		"/home/nc6320/eagle/Eagleup/models/zz_more models are available at the warehouse.txt",
		"/home/nc6320/.bashrc",
		"/home/nc6320/bin/xilinx",
		"/home/nc6320/Downloads/Digilent/digilent.adept.runtime_2.13.1-x86_64/README",
		"/home/nc6320/Magnum/Ruggeduino/am010.emn",
		"/home/nc6320/School/Winter2014/Lab1/Nexys3_Master.ucf",
		"/home/nc6320/Downloads/Digilent/digilent.adept.utilities_2.1.1-x86_64/README"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			" *                                                                             | \n",
			"ctrl+alt",
			"wire",
			"border",
			"layer=\"20\"",
			"Dimension",
			"USE_RELATIVE_PATH"
		],
		"highlight": true,
		"in_selection": true,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "lcd.h",
					"settings":
					{
						"buffer_size": 2177,
						"regions":
						{
						},
						"selection":
						[
							[
								2083,
								2083
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublime_auto_complete": true,
							"sublimelinter": false,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "fluery_lcd.h",
					"settings":
					{
						"buffer_size": 10926,
						"regions":
						{
						},
						"selection":
						[
							[
								3441,
								3441
							]
						],
						"settings":
						{
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublime_auto_complete": true,
							"sublimelinter": false,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1071.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 269.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"m",
				"main.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 149.0,
	"status_bar_visible": true
}
